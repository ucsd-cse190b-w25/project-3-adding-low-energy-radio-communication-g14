
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800426c  0800426c  0000526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004314  08004314  000061bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800431c  0800431c  000061bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800431c  0800431c  0000531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08004324  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001bc  080044e0  000061bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080044e0  000064b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a464  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9f  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  000124f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070e  00000000  00000000  00012e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274de  00000000  00000000  0001357e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0a1  00000000  00000000  0003aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e6c  00000000  00000000  00045afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  001369ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001393cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001bc 	.word	0x200001bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004254 	.word	0x08004254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c0 	.word	0x200001c0
 80001cc:	08004254 	.word	0x08004254

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fb20 	bl	80038cc <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f91f 	bl	80004e8 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f99e 	bl	80005fc <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fbae 	bl	8001a38 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fafb 	bl	80038dc <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fab9 	bl	8000868 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fae4 	bl	80038dc <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 faa2 	bl	8000868 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fab8 	bl	80038dc <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb3c 	bl	80009f4 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 faa4 	bl	80038dc <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa62 	bl	8000868 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fa8d 	bl	80038dc <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa4b 	bl	8000868 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fa76 	bl	80038dc <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa34 	bl	8000868 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fa5f 	bl	80038dc <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f9a3 	bl	8000768 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa6a 	bl	8000900 <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa9a 	bl	8000970 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa92 	bl	8000970 <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002f0 	.word	0x200002f0
 8000458:	200002f4 	.word	0x200002f4
 800045c:	20000000 	.word	0x20000000
 8000460:	200002ee 	.word	0x200002ee
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001d8 	.word	0x200001d8
 8000478:	200001dc 	.word	0x200001dc
 800047c:	200001e0 	.word	0x200001e0
 8000480:	20000124 	.word	0x20000124
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	2000007c 	.word	0x2000007c
 8000498:	20000058 	.word	0x20000058
 800049c:	200002e4 	.word	0x200002e4
 80004a0:	2000012c 	.word	0x2000012c
 80004a4:	200002ec 	.word	0x200002ec
 80004a8:	2000014c 	.word	0x2000014c
 80004ac:	200002e8 	.word	0x200002e8
 80004b0:	2000013c 	.word	0x2000013c

080004b4 <standbyBle>:
 
 void standbyBle() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af02      	add	r7, sp, #8
	  //STANDBY MODE
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
 80004ba:	2300      	movs	r3, #0
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2307      	movs	r3, #7
 80004c0:	4a06      	ldr	r2, [pc, #24]	@ (80004dc <standbyBle+0x28>)
 80004c2:	2104      	movs	r1, #4
 80004c4:	4806      	ldr	r0, [pc, #24]	@ (80004e0 <standbyBle+0x2c>)
 80004c6:	f000 f9cf 	bl	8000868 <BLE_command>
	  }
	  free(rxEvent);
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <standbyBle+0x30>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 fa04 	bl	80038dc <free>
 }
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000050 	.word	0x20000050
 80004e0:	2000004c 	.word	0x2000004c
 80004e4:	200002f0 	.word	0x200002f0

080004e8 <fetchBleEvent>:
 
 int fetchBleEvent(uint8_t *container, int size){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	@ 0x30
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004f2:	4a3d      	ldr	r2, [pc, #244]	@ (80005e8 <fetchBleEvent+0x100>)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fc:	6018      	str	r0, [r3, #0]
 80004fe:	3304      	adds	r3, #4
 8000500:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000502:	2140      	movs	r1, #64	@ 0x40
 8000504:	4839      	ldr	r0, [pc, #228]	@ (80005ec <fetchBleEvent+0x104>)
 8000506:	f001 fd97 	bl	8002038 <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d065      	beq.n	80005dc <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 8000510:	2005      	movs	r0, #5
 8000512:	f001 fa91 	bl	8001a38 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051c:	4834      	ldr	r0, [pc, #208]	@ (80005f0 <fetchBleEvent+0x108>)
 800051e:	f001 fda3 	bl	8002068 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000522:	f107 0210 	add.w	r2, r7, #16
 8000526:	f107 0118 	add.w	r1, r7, #24
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2305      	movs	r3, #5
 8000530:	4830      	ldr	r0, [pc, #192]	@ (80005f4 <fetchBleEvent+0x10c>)
 8000532:	f002 fe45 	bl	80031c0 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053c:	482c      	ldr	r0, [pc, #176]	@ (80005f0 <fetchBleEvent+0x108>)
 800053e:	f001 fd93 	bl	8002068 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 fa78 	bl	8001a38 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054e:	4828      	ldr	r0, [pc, #160]	@ (80005f0 <fetchBleEvent+0x108>)
 8000550:	f001 fd8a 	bl	8002068 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000554:	f107 0210 	add.w	r2, r7, #16
 8000558:	f107 0118 	add.w	r1, r7, #24
 800055c:	2301      	movs	r3, #1
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2305      	movs	r3, #5
 8000562:	4824      	ldr	r0, [pc, #144]	@ (80005f4 <fetchBleEvent+0x10c>)
 8000564:	f002 fe2c 	bl	80031c0 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	461a      	mov	r2, r3
 800056c:	7d3b      	ldrb	r3, [r7, #20]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	4313      	orrs	r3, r2
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000574:	23ff      	movs	r3, #255	@ 0xff
 8000576:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	dd01      	ble.n	8000584 <fetchBleEvent+0x9c>
	   dataSize=size;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000586:	2b00      	cmp	r3, #0
 8000588:	dd1f      	ble.n	80005ca <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
 800058e:	e00d      	b.n	80005ac <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	441a      	add	r2, r3
 8000596:	f107 010f 	add.w	r1, r7, #15
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	4814      	ldr	r0, [pc, #80]	@ (80005f4 <fetchBleEvent+0x10c>)
 80005a2:	f002 fe0d 	bl	80031c0 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	3301      	adds	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
 80005ac:	6a3a      	ldr	r2, [r7, #32]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbed      	blt.n	8000590 <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ba:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <fetchBleEvent+0x108>)
 80005bc:	f001 fd54 	bl	8002068 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <fetchBleEvent+0x110>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e00a      	b.n	80005e0 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <fetchBleEvent+0x108>)
 80005d2:	f001 fd49 	bl	8002068 <HAL_GPIO_WritePin>
		 return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e001      	b.n	80005e0 <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005dc:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005e0:	4618      	mov	r0, r3
 80005e2:	3728      	adds	r7, #40	@ 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800426c 	.word	0x0800426c
 80005ec:	48001000 	.word	0x48001000
 80005f0:	48000c00 	.word	0x48000c00
 80005f4:	200002f8 	.word	0x200002f8
 80005f8:	200002f4 	.word	0x200002f4

080005fc <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	 int j=0;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e00f      	b.n	8000632 <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	440b      	add	r3, r1
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d002      	beq.n	800062c <checkEventResp+0x30>
			 return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	e007      	b.n	800063c <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3301      	adds	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbeb      	blt.n	8000612 <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 800063a:	2300      	movs	r3, #0
 }
 800063c:	4618      	mov	r0, r3
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000652:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <sendCommand+0x88>)
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	3304      	adds	r3, #4
 8000660:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000668:	481a      	ldr	r0, [pc, #104]	@ (80006d4 <sendCommand+0x8c>)
 800066a:	f001 fcfd 	bl	8002068 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800066e:	f107 0208 	add.w	r2, r7, #8
 8000672:	f107 0110 	add.w	r1, r7, #16
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2305      	movs	r3, #5
 800067c:	4816      	ldr	r0, [pc, #88]	@ (80006d8 <sendCommand+0x90>)
 800067e:	f002 fd9f 	bl	80031c0 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	7a7a      	ldrb	r2, [r7, #9]
 8000688:	4313      	orrs	r3, r2
 800068a:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	db09      	blt.n	80006a8 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <sendCommand+0x90>)
 800069e:	f002 fc1a 	bl	8002ed6 <HAL_SPI_Transmit>
		 result=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	e002      	b.n	80006ae <sendCommand+0x66>
	   }else{
		 result=-1;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <sendCommand+0x8c>)
 80006b6:	f001 fcd7 	bl	8002068 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <sendCommand+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1cd      	bne.n	8000662 <sendCommand+0x1a>
 
 }
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08004274 	.word	0x08004274
 80006d4:	48000c00 	.word	0x48000c00
 80006d8:	200002f8 	.word	0x200002f8
 80006dc:	200002f4 	.word	0x200002f4

080006e0 <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006ea:	217f      	movs	r1, #127	@ 0x7f
 80006ec:	4819      	ldr	r0, [pc, #100]	@ (8000754 <catchBLE+0x74>)
 80006ee:	f7ff fefb 	bl	80004e8 <fetchBleEvent>
 80006f2:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d128      	bne.n	800074c <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006fa:	2203      	movs	r2, #3
 80006fc:	4916      	ldr	r1, [pc, #88]	@ (8000758 <catchBLE+0x78>)
 80006fe:	4815      	ldr	r0, [pc, #84]	@ (8000754 <catchBLE+0x74>)
 8000700:	f7ff ff7c 	bl	80005fc <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000704:	2205      	movs	r2, #5
 8000706:	4915      	ldr	r1, [pc, #84]	@ (800075c <catchBLE+0x7c>)
 8000708:	4812      	ldr	r0, [pc, #72]	@ (8000754 <catchBLE+0x74>)
 800070a:	f7ff ff77 	bl	80005fc <checkEventResp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <catchBLE+0x74>)
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	b21a      	sxth	r2, r3
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <catchBLE+0x80>)
 800071c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <catchBLE+0x74>)
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <catchBLE+0x80>)
 8000726:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 8000728:	2205      	movs	r2, #5
 800072a:	490e      	ldr	r1, [pc, #56]	@ (8000764 <catchBLE+0x84>)
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <catchBLE+0x74>)
 800072e:	f7ff ff65 	bl	80005fc <checkEventResp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d109      	bne.n	800074c <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <catchBLE+0x74>)
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <catchBLE+0x80>)
 8000740:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <catchBLE+0x74>)
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <catchBLE+0x80>)
 800074a:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001e4 	.word	0x200001e4
 8000758:	200000fc 	.word	0x200000fc
 800075c:	20000108 	.word	0x20000108
 8000760:	2000015c 	.word	0x2000015c
 8000764:	20000110 	.word	0x20000110

08000768 <setConnectable>:
 
 void setConnectable(){
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800076e:	200c      	movs	r0, #12
 8000770:	f003 f8ac 	bl	80038cc <malloc>
 8000774:	4603      	mov	r3, r0
 8000776:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4a36      	ldr	r2, [pc, #216]	@ (8000854 <setConnectable+0xec>)
 800077c:	6810      	ldr	r0, [r2, #0]
 800077e:	6018      	str	r0, [r3, #0]
 8000780:	8891      	ldrh	r1, [r2, #4]
 8000782:	7992      	ldrb	r2, [r2, #6]
 8000784:	8099      	strh	r1, [r3, #4]
 8000786:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3308      	adds	r3, #8
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3309      	adds	r3, #9
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	330a      	adds	r3, #10
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	330b      	adds	r3, #11
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3307      	adds	r3, #7
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
 
 
		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80007b0:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <setConnectable+0xf0>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80007b6:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <setConnectable+0xf0>)
 80007b8:	2215      	movs	r2, #21
 80007ba:	70da      	strb	r2, [r3, #3]
 
		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80007bc:	2019      	movs	r0, #25
 80007be:	f003 f885 	bl	80038cc <malloc>
 80007c2:	4603      	mov	r3, r0
 80007c4:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4a23      	ldr	r2, [pc, #140]	@ (8000858 <setConnectable+0xf0>)
 80007ca:	461c      	mov	r4, r3
 80007cc:	4613      	mov	r3, r2
 80007ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007d0:	6020      	str	r0, [r4, #0]
 80007d2:	6061      	str	r1, [r4, #4]
 80007d4:	60a2      	str	r2, [r4, #8]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	330d      	adds	r3, #13
 80007de:	220c      	movs	r2, #12
 80007e0:	68f9      	ldr	r1, [r7, #12]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f9a8 	bl	8003b38 <memcpy>
 
		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007e8:	2119      	movs	r1, #25
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f7ff ff2c 	bl	8000648 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 80007f0:	2007      	movs	r0, #7
 80007f2:	f003 f86b 	bl	80038cc <malloc>
 80007f6:	4603      	mov	r3, r0
 80007f8:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 80007fa:	bf00      	nop
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <setConnectable+0xf4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0fb      	beq.n	80007fc <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 8000804:	2107      	movs	r1, #7
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe6e 	bl	80004e8 <fetchBleEvent>
 800080c:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10f      	bne.n	8000834 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000814:	2207      	movs	r2, #7
 8000816:	4912      	ldr	r1, [pc, #72]	@ (8000860 <setConnectable+0xf8>)
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff feef 	bl	80005fc <checkEventResp>
 800081e:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d106      	bne.n	8000834 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <setConnectable+0xfc>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <setConnectable+0xfc>)
 8000832:	801a      	strh	r2, [r3, #0]
		}
		}
 
		free(rxEvent);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f003 f851 	bl	80038dc <free>
		free(discoverableCommand);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f003 f84e 	bl	80038dc <free>
		free(localname);
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f003 f84b 	bl	80038dc <free>
		HAL_Delay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f001 f8f6 	bl	8001a38 <HAL_Delay>
 }
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000124 	.word	0x20000124
 8000858:	20000084 	.word	0x20000084
 800085c:	200002f4 	.word	0x200002f4
 8000860:	20000094 	.word	0x20000094
 8000864:	200002ee 	.word	0x200002ee

08000868 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff fee5 	bl	8000648 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	005a      	lsls	r2, r3, #1
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f820 	bl	80038cc <malloc>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <BLE_command+0x90>)
 8000892:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000898:	e007      	b.n	80008aa <BLE_command+0x42>
			contatore++;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	3301      	adds	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80008a6:	4293      	cmp	r3, r2
 80008a8:	dc07      	bgt.n	80008ba <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008aa:	2140      	movs	r1, #64	@ 0x40
 80008ac:	4813      	ldr	r0, [pc, #76]	@ (80008fc <BLE_command+0x94>)
 80008ae:	f001 fbc3 	bl	8002038 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f0      	beq.n	800089a <BLE_command+0x32>
 80008b8:	e000      	b.n	80008bc <BLE_command+0x54>
				break;
 80008ba:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <BLE_command+0x90>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	005a      	lsls	r2, r3, #1
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	f7ff fe0d 	bl	80004e8 <fetchBleEvent>
 80008ce:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <BLE_command+0x90>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe8c 	bl	80005fc <checkEventResp>
 80008e4:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f001 f8a6 	bl	8001a38 <HAL_Delay>
 
 
	 return response;
 80008ec:	697b      	ldr	r3, [r7, #20]
 }
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002f0 	.word	0x200002f0
 80008fc:	48001000 	.word	0x48001000

08000900 <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <addService+0x60>)
 800090e:	2210      	movs	r2, #16
 8000910:	68f9      	ldr	r1, [r7, #12]
 8000912:	4618      	mov	r0, r3
 8000914:	f003 f910 	bl	8003b38 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <addService+0x64>)
 800091e:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000920:	2301      	movs	r3, #1
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2307      	movs	r3, #7
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <addService+0x68>)
 8000928:	2117      	movs	r1, #23
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <addService+0x64>)
 800092c:	f7ff ff9c 	bl	8000868 <BLE_command>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10a      	bne.n	800094c <addService+0x4c>
			handle[0]=rxEvent[7];
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <addService+0x6c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	79da      	ldrb	r2, [r3, #7]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <addService+0x6c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3301      	adds	r3, #1
 8000948:	7a12      	ldrb	r2, [r2, #8]
 800094a:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <addService+0x6c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f002 ffc3 	bl	80038dc <free>
 }
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000a1 	.word	0x200000a1
 8000964:	2000009c 	.word	0x2000009c
 8000968:	200000b4 	.word	0x200000b4
 800096c:	200002f0 	.word	0x200002f0

08000970 <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <addCharacteristic+0x74>)
 8000980:	2210      	movs	r2, #16
 8000982:	68f9      	ldr	r1, [r7, #12]
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f8d7 	bl	8003b38 <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <addCharacteristic+0x78>)
 8000990:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	785a      	ldrb	r2, [r3, #1]
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <addCharacteristic+0x78>)
 8000998:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 800099a:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <addCharacteristic+0x78>)
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 80009a0:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <addCharacteristic+0x78>)
 80009a2:	7e3b      	ldrb	r3, [r7, #24]
 80009a4:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80009a6:	2301      	movs	r3, #1
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2307      	movs	r3, #7
 80009ac:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <addCharacteristic+0x7c>)
 80009ae:	211e      	movs	r1, #30
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <addCharacteristic+0x78>)
 80009b2:	f7ff ff59 	bl	8000868 <BLE_command>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10a      	bne.n	80009d2 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <addCharacteristic+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	79da      	ldrb	r2, [r3, #7]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <addCharacteristic+0x80>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3301      	adds	r3, #1
 80009ce:	7a12      	ldrb	r2, [r2, #8]
 80009d0:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <addCharacteristic+0x80>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 ff80 	bl	80038dc <free>
 }
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c3 	.word	0x200000c3
 80009e8:	200000bc 	.word	0x200000bc
 80009ec:	200000dc 	.word	0x200000dc
 80009f0:	200002f0 	.word	0x200002f0

080009f4 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3306      	adds	r3, #6
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <updateCharValue+0x9c>)
 8000a0c:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <updateCharValue+0x9c>)
 8000a14:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	785a      	ldrb	r2, [r3, #1]
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <updateCharValue+0x9c>)
 8000a1c:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <updateCharValue+0x9c>)
 8000a24:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	785a      	ldrb	r2, [r3, #1]
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <updateCharValue+0x9c>)
 8000a2c:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <updateCharValue+0x9c>)
 8000a34:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <updateCharValue+0x9c>)
 8000a3c:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	330a      	adds	r3, #10
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 ff42 	bl	80038cc <malloc>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4910      	ldr	r1, [pc, #64]	@ (8000a90 <updateCharValue+0x9c>)
 8000a50:	6978      	ldr	r0, [r7, #20]
 8000a52:	f003 f871 	bl	8003b38 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	330a      	adds	r3, #10
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	6a39      	ldr	r1, [r7, #32]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 f86a 	bl	8003b38 <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f103 010a 	add.w	r1, r3, #10
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2307      	movs	r3, #7
 8000a70:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <updateCharValue+0xa0>)
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff fef8 	bl	8000868 <BLE_command>
 
	 free(commandComplete);
 8000a78:	6978      	ldr	r0, [r7, #20]
 8000a7a:	f002 ff2f 	bl	80038dc <free>
	 free(rxEvent);
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <updateCharValue+0xa4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 ff2a 	bl	80038dc <free>
 }
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000e4 	.word	0x200000e4
 8000a94:	200000dc 	.word	0x200000dc
 8000a98:	200002f0 	.word	0x200002f0

08000a9c <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000aa2:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <disconnectBLE+0x98>)
 8000aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d105      	bne.n	8000aba <disconnectBLE+0x1e>
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <disconnectBLE+0x98>)
 8000ab0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d037      	beq.n	8000b2a <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <disconnectBLE+0x9c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <disconnectBLE+0x98>)
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <disconnectBLE+0x98>)
 8000acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000ad4:	2313      	movs	r3, #19
 8000ad6:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000ad8:	1d38      	adds	r0, r7, #4
 8000ada:	2300      	movs	r3, #0
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2307      	movs	r3, #7
 8000ae0:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <disconnectBLE+0xa0>)
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	f7ff fec0 	bl	8000868 <BLE_command>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d11e      	bne.n	8000b2c <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000aee:	217f      	movs	r1, #127	@ 0x7f
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <disconnectBLE+0xa4>)
 8000af2:	f7ff fcf9 	bl	80004e8 <fetchBleEvent>
 8000af6:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10f      	bne.n	8000b1e <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000afe:	2204      	movs	r2, #4
 8000b00:	4910      	ldr	r1, [pc, #64]	@ (8000b44 <disconnectBLE+0xa8>)
 8000b02:	480f      	ldr	r0, [pc, #60]	@ (8000b40 <disconnectBLE+0xa4>)
 8000b04:	f7ff fd7a 	bl	80005fc <checkEventResp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d107      	bne.n	8000b1e <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <disconnectBLE+0x98>)
 8000b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b14:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <disconnectBLE+0x98>)
 8000b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1c:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <disconnectBLE+0xac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 feda 	bl	80038dc <free>
 8000b28:	e000      	b.n	8000b2c <disconnectBLE+0x90>
		return;
 8000b2a:	bf00      	nop
	 }
 }
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	200000f4 	.word	0x200000f4
 8000b3c:	20000100 	.word	0x20000100
 8000b40:	200001e4 	.word	0x200001e4
 8000b44:	200000fc 	.word	0x200000fc
 8000b48:	200002f0 	.word	0x200002f0

08000b4c <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d102      	bne.n	8000b62 <setDiscoverability+0x16>
		 setConnectable();
 8000b5c:	f7ff fe04 	bl	8000768 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b60:	e00f      	b.n	8000b82 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10c      	bne.n	8000b82 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <setDiscoverability+0x40>)
 8000b70:	2104      	movs	r1, #4
 8000b72:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <setDiscoverability+0x44>)
 8000b74:	f7ff fe78 	bl	8000868 <BLE_command>
		 free(rxEvent);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <setDiscoverability+0x48>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fead 	bl	80038dc <free>
 }
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000011c 	.word	0x2000011c
 8000b90:	20000118 	.word	0x20000118
 8000b94:	200002f0 	.word	0x200002f0

08000b98 <i2c_init>:

#include "i2c.h"
#define I2C_SPEED 400000
#define I2C_TIMEOUT 1000000
void i2c_init() {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	// trying to configure noise filters then enable timer for I2C by setting the PE bit of the register
	// wanna change the baud rate to 400 khz
	// configure the pins on the MCU so they are connected to the correct I2C peripheral rather than operating as GPIO pins

	// Enable GPIOB clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <i2c_init+0x80>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <i2c_init+0x80>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// enable i2c2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <i2c_init+0x80>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bac:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <i2c_init+0x80>)
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb2:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set PB10 and PB11 to Alternate Function mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11); // Clear mode bits
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <i2c_init+0x84>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <i2c_init+0x84>)
 8000bba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bbe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1); // Set to Alternate Function mode
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <i2c_init+0x84>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a15      	ldr	r2, [pc, #84]	@ (8000c1c <i2c_init+0x84>)
 8000bc6:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000bca:	6013      	str	r3, [r2, #0]

	// Set PB10 and PB11 to Open-Drain Output
	GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <i2c_init+0x84>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <i2c_init+0x84>)
 8000bd2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000bd6:	6053      	str	r3, [r2, #4]

	// Enable Pull-Up resistors for PB10 and PB11
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11); // Clear
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <i2c_init+0x84>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <i2c_init+0x84>)
 8000bde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000be2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0); // Enable pull-ups
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <i2c_init+0x84>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <i2c_init+0x84>)
 8000bea:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000bee:	60d3      	str	r3, [r2, #12]

	// Configure PB10 and PB11 to use Alternate Function 4 (AF4) for I2C2
	//GPIOB->AFRH &= ~((0xF << GPIO_AFRH_AFSEL10_Pos) | (0xF << GPIO_AFRH_AFSEL11_Pos)); // Clear AFR bits
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL10_Pos) | (4 << GPIO_AFRH_AFSEL11_Pos));     // Set AF4 for PB10, PB11
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <i2c_init+0x84>)
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf4:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <i2c_init+0x84>)
 8000bf6:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000bfa:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C2->TIMINGR = 0x10909CEC;	// sets up timing for communication, that values is for 100khz
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <i2c_init+0x88>)
 8000bfe:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <i2c_init+0x8c>)
 8000c00:	611a      	str	r2, [r3, #16]
	I2C2->CR1 |= I2C_CR1_PE; // Enable I2C2
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <i2c_init+0x88>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a06      	ldr	r2, [pc, #24]	@ (8000c20 <i2c_init+0x88>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6013      	str	r3, [r2, #0]


}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	40005800 	.word	0x40005800
 8000c24:	10909cec 	.word	0x10909cec

08000c28 <i2c_transaction>:
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	603a      	str	r2, [r7, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	460b      	mov	r3, r1
 8000c38:	71bb      	strb	r3, [r7, #6]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	717b      	strb	r3, [r7, #5]
	volatile uint32_t timeout;

	    // Clear any existing errors
	    I2C2->ICR = I2C_ICR_NACKCF | I2C_ICR_STOPCF | I2C_ICR_BERRCF;
 8000c3e:	4b56      	ldr	r3, [pc, #344]	@ (8000d98 <i2c_transaction+0x170>)
 8000c40:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000c44:	61da      	str	r2, [r3, #28]

	    //printf("Starting I2C transaction - ISR: 0x%lx, CR2: 0x%lx\n", I2C2->ISR, I2C2->CR2);

	    if (dir == 0) {  // Writing data
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d156      	bne.n	8000cfa <i2c_transaction+0xd2>
	        // Configure the transfer
	        I2C2->CR2 = 0; // Clear CR2 first
 8000c4c:	4b52      	ldr	r3, [pc, #328]	@ (8000d98 <i2c_transaction+0x170>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
	        I2C2->CR2 = (address << 1) | (len << 16) | I2C_CR2_START;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	005a      	lsls	r2, r3, #1
 8000c56:	797b      	ldrb	r3, [r7, #5]
 8000c58:	041b      	lsls	r3, r3, #16
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d98 <i2c_transaction+0x170>)
 8000c5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c62:	6053      	str	r3, [r2, #4]

	        //printf("Write CR2 configured: 0x%lx\n", I2C2->CR2);

	        for (uint8_t i = 0; i < len; i++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e02c      	b.n	8000cc4 <i2c_transaction+0x9c>
	            timeout = I2C_TIMEOUT;
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <i2c_transaction+0x174>)
 8000c6c:	60bb      	str	r3, [r7, #8]
	            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000c6e:	e01a      	b.n	8000ca6 <i2c_transaction+0x7e>
	                if (I2C2->ISR & I2C_ISR_NACKF) {
 8000c70:	4b49      	ldr	r3, [pc, #292]	@ (8000d98 <i2c_transaction+0x170>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <i2c_transaction+0x64>
	                    //printf("Error: NACK received. ISR=0x%lx\n", I2C2->ISR);
	                    I2C2->CR2 |= I2C_CR2_STOP;
 8000c7c:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <i2c_transaction+0x170>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4a45      	ldr	r2, [pc, #276]	@ (8000d98 <i2c_transaction+0x170>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c86:	6053      	str	r3, [r2, #4]
	                    return 6;
 8000c88:	2306      	movs	r3, #6
 8000c8a:	e07f      	b.n	8000d8c <i2c_transaction+0x164>
	                }

	                if (--timeout == 0) {
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d107      	bne.n	8000ca6 <i2c_transaction+0x7e>
	                    //printf("Error 1: TXIS timeout. ISR=0x%lx, CR2=0x%lx\n",I2C2->ISR, I2C2->CR2);
	                    I2C2->CR2 |= I2C_CR2_STOP;
 8000c96:	4b40      	ldr	r3, [pc, #256]	@ (8000d98 <i2c_transaction+0x170>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d98 <i2c_transaction+0x170>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6053      	str	r3, [r2, #4]
	                    return 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e072      	b.n	8000d8c <i2c_transaction+0x164>
	            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8000d98 <i2c_transaction+0x170>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0de      	beq.n	8000c70 <i2c_transaction+0x48>
	                }
	            }
	            I2C2->TXDR = data[i];
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <i2c_transaction+0x170>)
 8000cbc:	629a      	str	r2, [r3, #40]	@ 0x28
	        for (uint8_t i = 0; i < len; i++) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3ce      	bcc.n	8000c6a <i2c_transaction+0x42>
	            //printf("Wrote byte %d: 0x%02x\n", i, data[i]);
	        }

	        timeout = I2C_TIMEOUT;
 8000ccc:	4b33      	ldr	r3, [pc, #204]	@ (8000d9c <i2c_transaction+0x174>)
 8000cce:	60bb      	str	r3, [r7, #8]
	        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8000cd0:	e006      	b.n	8000ce0 <i2c_transaction+0xb8>
	            if (--timeout == 0) {
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <i2c_transaction+0xb8>
	                //printf("Error 2: TC timeout. ISR=0x%lx\n", I2C2->ISR);
	                return 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e055      	b.n	8000d8c <i2c_transaction+0x164>
	        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <i2c_transaction+0x170>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f2      	beq.n	8000cd2 <i2c_transaction+0xaa>
	            }
	        }

	        I2C2->CR2 |= I2C_CR2_STOP;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <i2c_transaction+0x170>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4a29      	ldr	r2, [pc, #164]	@ (8000d98 <i2c_transaction+0x170>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf6:	6053      	str	r3, [r2, #4]
 8000cf8:	e047      	b.n	8000d8a <i2c_transaction+0x162>
	    }
	else {	// 1 for reading data
		I2C2->CR2 = ((address << 1) & I2C_CR2_SADD_Msk) | I2C_CR2_RD_WRN; // Set the device address and indicate a read
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d02:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <i2c_transaction+0x170>)
 8000d04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d08:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START; // Set how many bytes we’re reading and start the communication
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <i2c_transaction+0x170>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	041b      	lsls	r3, r3, #16
 8000d12:	4313      	orrs	r3, r2
 8000d14:	4a20      	ldr	r2, [pc, #128]	@ (8000d98 <i2c_transaction+0x170>)
 8000d16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d1a:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73bb      	strb	r3, [r7, #14]
 8000d20:	e019      	b.n	8000d56 <i2c_transaction+0x12e>
			timeout = I2C_TIMEOUT;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <i2c_transaction+0x174>)
 8000d24:	60bb      	str	r3, [r7, #8]
			while (!(I2C2->ISR & I2C_ISR_RXNE)) { // Wait until data is received
 8000d26:	e006      	b.n	8000d36 <i2c_transaction+0x10e>
				if (--timeout == 0) {
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <i2c_transaction+0x10e>
					//printf("error 3");
					return 3; // If we wait too long, return an error
 8000d32:	2303      	movs	r3, #3
 8000d34:	e02a      	b.n	8000d8c <i2c_transaction+0x164>
			while (!(I2C2->ISR & I2C_ISR_RXNE)) { // Wait until data is received
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <i2c_transaction+0x170>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f2      	beq.n	8000d28 <i2c_transaction+0x100>
				}
			}
			data[i] = I2C2->RXDR; // Store the received data
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <i2c_transaction+0x170>)
 8000d44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	73bb      	strb	r3, [r7, #14]
 8000d56:	7bba      	ldrb	r2, [r7, #14]
 8000d58:	797b      	ldrb	r3, [r7, #5]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e1      	bcc.n	8000d22 <i2c_transaction+0xfa>
		}

		timeout = I2C_TIMEOUT;
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <i2c_transaction+0x174>)
 8000d60:	60bb      	str	r3, [r7, #8]
		while (!(I2C2->ISR & I2C_ISR_TC)) { // Wait until the transfer is complete
 8000d62:	e006      	b.n	8000d72 <i2c_transaction+0x14a>
			if (--timeout == 0){
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <i2c_transaction+0x14a>
				//printf("error 4");
				return 4; // If we wait too long, return an error
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e00c      	b.n	8000d8c <i2c_transaction+0x164>
		while (!(I2C2->ISR & I2C_ISR_TC)) { // Wait until the transfer is complete
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <i2c_transaction+0x170>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f2      	beq.n	8000d64 <i2c_transaction+0x13c>
			}
		}

		I2C2->CR2 |= I2C_CR2_STOP; // Send a stop condition to end the communication
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <i2c_transaction+0x170>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <i2c_transaction+0x170>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d88:	6053      	str	r3, [r2, #4]
	}

	return 0; // If we got here, everything worked!
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40005800 	.word	0x40005800
 8000d9c:	000f4240 	.word	0x000f4240

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	@ (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <lptimer_init>:
/**
 * @brief Initializes the Low-Power Timer (LPTIM1) with LSI clock source.
 * @param timer Pointer to the LPTIM instance.
 */
void lptimer_init(LPTIM_TypeDef* timer)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    // Enable LSI clock and wait until it is stable
    RCC->CSR |= RCC_CSR_LSION;
 8000e38:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <lptimer_init+0x10c>)
 8000e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f3c <lptimer_init+0x10c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    while (!(RCC->CSR & RCC_CSR_LSIRDY));
 8000e48:	bf00      	nop
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f3c <lptimer_init+0x10c>)
 8000e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f8      	beq.n	8000e4a <lptimer_init+0x1a>

    // Select LSI as the clock source for LPTIM1
    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL;
 8000e58:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <lptimer_init+0x10c>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5e:	4a37      	ldr	r2, [pc, #220]	@ (8000f3c <lptimer_init+0x10c>)
 8000e60:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0;
 8000e68:	4b34      	ldr	r3, [pc, #208]	@ (8000f3c <lptimer_init+0x10c>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6e:	4a33      	ldr	r2, [pc, #204]	@ (8000f3c <lptimer_init+0x10c>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    // Enable LPTIM1 peripheral clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <lptimer_init+0x10c>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f3c <lptimer_init+0x10c>)
 8000e7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e82:	6593      	str	r3, [r2, #88]	@ 0x58

    // Keep LPTIM1 clock enabled during sleep mode
    RCC->APB1SMENR1 |= RCC_APB1SMENR1_LPTIM1SMEN;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <lptimer_init+0x10c>)
 8000e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e88:	4a2c      	ldr	r2, [pc, #176]	@ (8000f3c <lptimer_init+0x10c>)
 8000e8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e8e:	6793      	str	r3, [r2, #120]	@ 0x78

    // Disable the timer before configuration
    timer->CR &= ~LPTIM_CR_ENABLE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	f023 0201 	bic.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
    while (timer->CR & LPTIM_CR_ENABLE);
 8000e9c:	bf00      	nop
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f9      	bne.n	8000e9e <lptimer_init+0x6e>

    // Configure timer to use the internal clock
    timer->CFGR &= ~LPTIM_CFGR_CKSEL;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f023 0201 	bic.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60da      	str	r2, [r3, #12]
    timer->CFGR &= ~LPTIM_CFGR_COUNTMODE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]

    // Reset the counter
    timer->CNT = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]

    // Set prescaler to 32 (Prescaler = 2^(PRESC+1), where PRESC=5 → 2^5 = 32)
    timer->CFGR &= ~LPTIM_CFGR_PRESC;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	60da      	str	r2, [r3, #12]
    timer->CFGR |= (LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_2);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	f443 6260 	orr.w	r2, r3, #3584	@ 0xe00
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60da      	str	r2, [r3, #12]

    // Disable external trigger
    timer->CFGR &= ~LPTIM_CFGR_TRIGEN;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60da      	str	r2, [r3, #12]

    // Clear interrupt flags
    timer->ICR = LPTIM_ICR_ARRMCF | LPTIM_ICR_CMPMCF | LPTIM_ICR_EXTTRIGCF;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2207      	movs	r2, #7
 8000ef0:	605a      	str	r2, [r3, #4]

    // Enable interrupt for autoreload match
    timer->IER |= LPTIM_IER_ARRMIE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f043 0202 	orr.w	r2, r3, #2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	609a      	str	r2, [r3, #8]

    // Enable LPTIM1 interrupt in NVIC with highest priority
    NVIC_EnableIRQ(LPTIM1_IRQn);
 8000efe:	2041      	movs	r0, #65	@ 0x41
 8000f00:	f7ff ff4e 	bl	8000da0 <__NVIC_EnableIRQ>
    NVIC_SetPriority(LPTIM1_IRQn, 0);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2041      	movs	r0, #65	@ 0x41
 8000f08:	f7ff ff68 	bl	8000ddc <__NVIC_SetPriority>

    // Enable the timer and start counting
    timer->CR |= LPTIM_CR_ENABLE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
    while (!(timer->CR & LPTIM_CR_ENABLE));
 8000f18:	bf00      	nop
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f9      	beq.n	8000f1a <lptimer_init+0xea>

    timer->CR |= LPTIM_CR_CNTSTRT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	f043 0204 	orr.w	r2, r3, #4
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <lptimer_set_ms>:
 * @brief Sets the autoreload value for a given period in milliseconds.
 * @param timer Pointer to the LPTIM instance.
 * @param period Time in milliseconds (converted to LPTIM ticks internally).
 */
void lptimer_set_ms(LPTIM_TypeDef* timer, uint16_t period)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
    timer->ARR = period - 1;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	619a      	str	r2, [r3, #24]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <lsm6dsl_init>:
#include <stdio.h>
#include <stdint.h>

// Initialize the LSM6DSL accelerometer and gyroscope

void lsm6dsl_init() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
    uint8_t who_am_i = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
    uint8_t reg = LSM6DSL_WHO_AM_I;
 8000f6e:	230f      	movs	r3, #15
 8000f70:	73bb      	strb	r3, [r7, #14]

    // Add a small delay before starting
//    for (volatile int i = 0; i < 100000; i++);

    // Verify the device by reading WHO_AM_I
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, &reg, 1) != 0) {
 8000f72:	f107 020e 	add.w	r2, r7, #14
 8000f76:	2301      	movs	r3, #1
 8000f78:	2100      	movs	r1, #0
 8000f7a:	206a      	movs	r0, #106	@ 0x6a
 8000f7c:	f7ff fe54 	bl	8000c28 <i2c_transaction>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d13a      	bne.n	8000ffc <lsm6dsl_init+0x98>
        //printf("Error: Failed to send WHO_AM_I register address!\n");
        return;
    }

    if (i2c_transaction(LSM6DSL_ADDRESS, 1, &who_am_i, 1) != 0) {
 8000f86:	f107 020f 	add.w	r2, r7, #15
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	206a      	movs	r0, #106	@ 0x6a
 8000f90:	f7ff fe4a 	bl	8000c28 <i2c_transaction>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d132      	bne.n	8001000 <lsm6dsl_init+0x9c>
        //printf("Error: Failed to read WHO_AM_I register!\n");
        return;
    }

    //printf("LSM6DSL WHO_AM_I: 0x%02X\n", who_am_i);
    if (who_am_i != 0x6A) {
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f9e:	d131      	bne.n	8001004 <lsm6dsl_init+0xa0>
        //printf("Error: LSM6DSL not detected!\n");
        return;
    }

    // Add a small delay
    for (volatile int i = 0; i < 100000; i++);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	e002      	b.n	8000fac <lsm6dsl_init+0x48>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <lsm6dsl_init+0xac>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	ddf8      	ble.n	8000fa6 <lsm6dsl_init+0x42>

    // Configure accelerometer first - ODR = 104 Hz (0x40), ±2g (0x00)
    uint8_t accel_config[2] = {LSM6DSL_CTRL1_XL, 0x40};
 8000fb4:	f244 0310 	movw	r3, #16400	@ 0x4010
 8000fb8:	81bb      	strh	r3, [r7, #12]
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, accel_config, 2) != 0) {
 8000fba:	f107 020c 	add.w	r2, r7, #12
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	206a      	movs	r0, #106	@ 0x6a
 8000fc4:	f7ff fe30 	bl	8000c28 <i2c_transaction>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11c      	bne.n	8001008 <lsm6dsl_init+0xa4>
        //printf("Error: Failed to configure accelerometer\n");
        return;
    }

    // Add a small delay
    for (volatile int i = 0; i < 100000; i++);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	e002      	b.n	8000fda <lsm6dsl_init+0x76>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <lsm6dsl_init+0xac>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	ddf8      	ble.n	8000fd4 <lsm6dsl_init+0x70>

    // Enable BDU and IF_INC
    uint8_t ctrl3_config[2] = {LSM6DSL_CTRL3_C, 0x44};
 8000fe2:	f244 4312 	movw	r3, #17426	@ 0x4412
 8000fe6:	813b      	strh	r3, [r7, #8]
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, ctrl3_config, 2) != 0) {
 8000fe8:	f107 0208 	add.w	r2, r7, #8
 8000fec:	2302      	movs	r3, #2
 8000fee:	2100      	movs	r1, #0
 8000ff0:	206a      	movs	r0, #106	@ 0x6a
 8000ff2:	f7ff fe19 	bl	8000c28 <i2c_transaction>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	e006      	b.n	800100a <lsm6dsl_init+0xa6>
        return;
 8000ffc:	bf00      	nop
 8000ffe:	e004      	b.n	800100a <lsm6dsl_init+0xa6>
        return;
 8001000:	bf00      	nop
 8001002:	e002      	b.n	800100a <lsm6dsl_init+0xa6>
        return;
 8001004:	bf00      	nop
 8001006:	e000      	b.n	800100a <lsm6dsl_init+0xa6>
        return;
 8001008:	bf00      	nop
        //printf("Error: Failed to configure CTRL3_C\n");
        return;
    }

    //printf("LSM6DSL Initialized Successfully!\n");
}
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0001869f 	.word	0x0001869f

08001014 <lsm6dsl_read_xyz>:


// Read acceleration data from X, Y, Z axes
void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    uint8_t reg = LSM6DSL_OUTX_L_XL;
 8001020:	2328      	movs	r3, #40	@ 0x28
 8001022:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[6];

    // Set register address
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, &reg, 1) != 0) {
 8001024:	f107 0217 	add.w	r2, r7, #23
 8001028:	2301      	movs	r3, #1
 800102a:	2100      	movs	r1, #0
 800102c:	206a      	movs	r0, #106	@ 0x6a
 800102e:	f7ff fdfb 	bl	8000c28 <i2c_transaction>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d15b      	bne.n	80010f0 <lsm6dsl_read_xyz+0xdc>
        //printf("Error: Failed to set register address for reading!\n");
        return;
    }

    // Read all 6 bytes in a single transaction
    if (i2c_transaction(LSM6DSL_ADDRESS, 1, raw_data, 6) != 0) {
 8001038:	f107 0210 	add.w	r2, r7, #16
 800103c:	2306      	movs	r3, #6
 800103e:	2101      	movs	r1, #1
 8001040:	206a      	movs	r0, #106	@ 0x6a
 8001042:	f7ff fdf1 	bl	8000c28 <i2c_transaction>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d153      	bne.n	80010f4 <lsm6dsl_read_xyz+0xe0>
        //printf("Error: Failed to read acceleration data!\n");
        return;
    }

    // Combine bytes and convert to signed 16-bit integers
    *x = (int16_t)((raw_data[1] << 8) | raw_data[0]);
 800104c:	7c7b      	ldrb	r3, [r7, #17]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	7c3b      	ldrb	r3, [r7, #16]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((raw_data[3] << 8) | raw_data[2]);
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	7cbb      	ldrb	r3, [r7, #18]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((raw_data[5] << 8) | raw_data[4]);
 8001070:	7d7b      	ldrb	r3, [r7, #21]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7d3b      	ldrb	r3, [r7, #20]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	801a      	strh	r2, [r3, #0]

    // Convert to mg (milli-g) values
    // With ±2g full scale, 1 mg = 0.061 mg/LSB
    *x = (*x * 61) / 1000;  // Convert to mg
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	461a      	mov	r2, r3
 800108a:	4613      	mov	r3, r2
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <lsm6dsl_read_xyz+0xe8>)
 8001096:	fb82 1203 	smull	r1, r2, r2, r3
 800109a:	1192      	asrs	r2, r2, #6
 800109c:	17db      	asrs	r3, r3, #31
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	801a      	strh	r2, [r3, #0]
    *y = (*y * 61) / 1000;  // Convert to mg
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4613      	mov	r3, r2
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	4a10      	ldr	r2, [pc, #64]	@ (80010fc <lsm6dsl_read_xyz+0xe8>)
 80010ba:	fb82 1203 	smull	r1, r2, r2, r3
 80010be:	1192      	asrs	r2, r2, #6
 80010c0:	17db      	asrs	r3, r3, #31
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	801a      	strh	r2, [r3, #0]
    *z = (*z * 61) / 1000;  // Convert to mg
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <lsm6dsl_read_xyz+0xe8>)
 80010de:	fb82 1203 	smull	r1, r2, r2, r3
 80010e2:	1192      	asrs	r2, r2, #6
 80010e4:	17db      	asrs	r3, r3, #31
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	801a      	strh	r2, [r3, #0]
 80010ee:	e002      	b.n	80010f6 <lsm6dsl_read_xyz+0xe2>
        return;
 80010f0:	bf00      	nop
 80010f2:	e000      	b.n	80010f6 <lsm6dsl_read_xyz+0xe2>
        return;
 80010f4:	bf00      	nop
}
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	10624dd3 	.word	0x10624dd3

08001100 <LPTIM1_IRQHandler>:
//         TIM2->SR &= ~TIM_SR_UIF;
//         updated_count++;
//     }
// };
void LPTIM1_IRQHandler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	if (LPTIM1->ISR & LPTIM_ISR_ARRM) {
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <LPTIM1_IRQHandler+0x30>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00a      	beq.n	8001126 <LPTIM1_IRQHandler+0x26>
		LPTIM1->ICR |= LPTIM_ICR_ARRMCF;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <LPTIM1_IRQHandler+0x30>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <LPTIM1_IRQHandler+0x30>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	6053      	str	r3, [r2, #4]
		updated_count++;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <LPTIM1_IRQHandler+0x34>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <LPTIM1_IRQHandler+0x34>)
 8001124:	6013      	str	r3, [r2, #0]
	}

};
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40007c00 	.word	0x40007c00
 8001134:	2000035c 	.word	0x2000035c

08001138 <main>:
/**
 * @brief  Main program entry point
 * @retval int
 */
int main(void)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b0a7      	sub	sp, #156	@ 0x9c
 800113c:	af02      	add	r7, sp, #8
  /* MCU Configuration and Initialization */
  HAL_Init();
 800113e:	f000 fc06 	bl	800194e <HAL_Init>
  SystemClock_Config();
 8001142:	f000 f9b3 	bl	80014ac <SystemClock_Config>
  MX_GPIO_Init();
 8001146:	f000 fa35 	bl	80015b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 800114a:	f000 f9f5 	bl	8001538 <MX_SPI3_Init>

  /* BLE Module Reset Sequence */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f000 ff86 	bl	8002068 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800115c:	200a      	movs	r0, #10
 800115e:	f000 fc6b 	bl	8001a38 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001168:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116c:	f000 ff7c 	bl	8002068 <HAL_GPIO_WritePin>

  /* Initialize Peripherals */
  ble_init();
 8001170:	f7ff f886 	bl	8000280 <ble_init>
  HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f000 fc5f 	bl	8001a38 <HAL_Delay>

  /* Initialize LPTIM1 as 1.25 second periodic timer */
  lptimer_init(LPTIM1);
 800117a:	48c0      	ldr	r0, [pc, #768]	@ (800147c <main+0x344>)
 800117c:	f7ff fe58 	bl	8000e30 <lptimer_init>
  lptimer_set_ms(LPTIM1, 1250);
 8001180:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 8001184:	48bd      	ldr	r0, [pc, #756]	@ (800147c <main+0x344>)
 8001186:	f7ff fedb 	bl	8000f40 <lptimer_set_ms>

  /* Initialize I2C and LSM6DSL accelerometer */
  i2c_init();
 800118a:	f7ff fd05 	bl	8000b98 <i2c_init>
  for (volatile int i = 0; i < 500000; i++);  // Delay for stabilization
 800118e:	2300      	movs	r3, #0
 8001190:	677b      	str	r3, [r7, #116]	@ 0x74
 8001192:	e002      	b.n	800119a <main+0x62>
 8001194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001196:	3301      	adds	r3, #1
 8001198:	677b      	str	r3, [r7, #116]	@ 0x74
 800119a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800119c:	4ab8      	ldr	r2, [pc, #736]	@ (8001480 <main+0x348>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	ddf8      	ble.n	8001194 <main+0x5c>
  lsm6dsl_init();
 80011a2:	f7ff fedf 	bl	8000f64 <lsm6dsl_init>

  /* Accelerometer variables */
  int16_t x, y, z;                // Current accelerometer readings
  int16_t lastX, lastY, lastZ;    // Previous accelerometer readings
  const int16_t thresh = 45;      // Movement detection threshold
 80011a6:	232d      	movs	r3, #45	@ 0x2d
 80011a8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

  /* State variables */
  int is_moved_bc = 0;            // Flag for BLE message broadcast
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint8_t nonDiscoverable = 0;    // BLE discoverability control
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  setDiscoverability(1);          // Start in discoverable mode
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fcc7 	bl	8000b4c <setDiscoverability>

  /* Main loop */
  while (1)
  {
      /* Check for BLE interrupt if in discoverable mode */
      if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin)) {
 80011be:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d108      	bne.n	80011d8 <main+0xa0>
 80011c6:	2140      	movs	r1, #64	@ 0x40
 80011c8:	48ae      	ldr	r0, [pc, #696]	@ (8001484 <main+0x34c>)
 80011ca:	f000 ff35 	bl	8002038 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <main+0xa0>
          catchBLE();  // Handle BLE interrupt
 80011d4:	f7ff fa84 	bl	80006e0 <catchBLE>
      }

      /* Active Mode (< 15 seconds since last movement) */
      if (updated_count < 12) {    // Less than 15 seconds (12 * 1.25s)
 80011d8:	4bab      	ldr	r3, [pc, #684]	@ (8001488 <main+0x350>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b0b      	cmp	r3, #11
 80011de:	d872      	bhi.n	80012c6 <main+0x18e>
          setDiscoverability(0);   // Set to non-discoverable to save power
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fcb3 	bl	8000b4c <setDiscoverability>

          /* Read accelerometer data */
          lsm6dsl_read_xyz(&x, &y, &z);
 80011e6:	f107 027a 	add.w	r2, r7, #122	@ 0x7a
 80011ea:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80011ee:	f107 037e 	add.w	r3, r7, #126	@ 0x7e
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff0e 	bl	8001014 <lsm6dsl_read_xyz>

          /* Check for significant movement in any axis */
          if (x < lastX - thresh || x > lastX + thresh) {
 80011f8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80011fc:	4619      	mov	r1, r3
 80011fe:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	@ 0x8e
 8001202:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4299      	cmp	r1, r3
 800120a:	db09      	blt.n	8001220 <main+0xe8>
 800120c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001210:	4619      	mov	r1, r3
 8001212:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	@ 0x8e
 8001216:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800121a:	4413      	add	r3, r2
 800121c:	4299      	cmp	r1, r3
 800121e:	dd0c      	ble.n	800123a <main+0x102>
              lastX = x;
 8001220:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001224:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
              updated_count = 0;  // Reset timer on movement
 8001228:	4b97      	ldr	r3, [pc, #604]	@ (8001488 <main+0x350>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
              is_moved_bc = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
              time = 0;
 8001234:	4b95      	ldr	r3, [pc, #596]	@ (800148c <main+0x354>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
          }
          if (y < lastY - thresh || y > lastY + thresh) {
 800123a:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 800123e:	4619      	mov	r1, r3
 8001240:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	@ 0x8c
 8001244:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4299      	cmp	r1, r3
 800124c:	db09      	blt.n	8001262 <main+0x12a>
 800124e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 8001252:	4619      	mov	r1, r3
 8001254:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	@ 0x8c
 8001258:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800125c:	4413      	add	r3, r2
 800125e:	4299      	cmp	r1, r3
 8001260:	dd0c      	ble.n	800127c <main+0x144>
              lastY = y;
 8001262:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001266:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
              updated_count = 0;
 800126a:	4b87      	ldr	r3, [pc, #540]	@ (8001488 <main+0x350>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
              is_moved_bc = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
              time = 0;
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <main+0x354>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
          }
          if (z < lastZ - thresh || z > lastZ + thresh) {
 800127c:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001280:	4619      	mov	r1, r3
 8001282:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 8001286:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4299      	cmp	r1, r3
 800128e:	db09      	blt.n	80012a4 <main+0x16c>
 8001290:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001294:	4619      	mov	r1, r3
 8001296:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 800129a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800129e:	4413      	add	r3, r2
 80012a0:	4299      	cmp	r1, r3
 80012a2:	dd0c      	ble.n	80012be <main+0x186>
              lastZ = z;
 80012a4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80012a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
              updated_count = 0;
 80012ac:	4b76      	ldr	r3, [pc, #472]	@ (8001488 <main+0x350>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
              is_moved_bc = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
              time = 0;
 80012b8:	4b74      	ldr	r3, [pc, #464]	@ (800148c <main+0x354>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
          }
          is_moved_bc = 0;  // Reset broadcast flag
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012c4:	e0ba      	b.n	800143c <main+0x304>
      }
      /* Lost Mode (≥ 15 seconds without movement) */
      else {
          setDiscoverability(1);  // Make device discoverable
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fc40 	bl	8000b4c <setDiscoverability>

          /* Handle counter overflow */
          if (updated_count == 0xFFFFFFFF) {
 80012cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001488 <main+0x350>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d102      	bne.n	80012dc <main+0x1a4>
              updated_count = 14;  // Reset to slightly above threshold
 80012d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001488 <main+0x350>)
 80012d8:	220e      	movs	r2, #14
 80012da:	601a      	str	r2, [r3, #0]
          }

          /* Send initial lost notification */
          if (is_moved_bc == 0) {
 80012dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d119      	bne.n	8001318 <main+0x1e0>
              count_ten = updated_count;
 80012e4:	4b68      	ldr	r3, [pc, #416]	@ (8001488 <main+0x350>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a69      	ldr	r2, [pc, #420]	@ (8001490 <main+0x358>)
 80012ea:	6013      	str	r3, [r2, #0]
              unsigned char test_str[] = "Airtag1 lost 0s";
 80012ec:	4b69      	ldr	r3, [pc, #420]	@ (8001494 <main+0x35c>)
 80012ee:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
              HAL_Delay(1000);
 80012f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012fc:	f000 fb9c 	bl	8001a38 <HAL_Delay>
              updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001300:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	230f      	movs	r3, #15
 8001308:	2200      	movs	r2, #0
 800130a:	4963      	ldr	r1, [pc, #396]	@ (8001498 <main+0x360>)
 800130c:	4863      	ldr	r0, [pc, #396]	@ (800149c <main+0x364>)
 800130e:	f7ff fb71 	bl	80009f4 <updateCharValue>
              is_moved_bc = 1;  // Set broadcast flag to prevent repeated initial messages
 8001312:	2301      	movs	r3, #1
 8001314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          }

          /* Send periodic updates every 2.5 seconds */
          if (count_ten == updated_count - 2) {
 8001318:	4b5b      	ldr	r3, [pc, #364]	@ (8001488 <main+0x350>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1e9a      	subs	r2, r3, #2
 800131e:	4b5c      	ldr	r3, [pc, #368]	@ (8001490 <main+0x358>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d121      	bne.n	800136a <main+0x232>
              time += 10;  // Increment lost time counter
 8001326:	4b59      	ldr	r3, [pc, #356]	@ (800148c <main+0x354>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	330a      	adds	r3, #10
 800132c:	4a57      	ldr	r2, [pc, #348]	@ (800148c <main+0x354>)
 800132e:	6013      	str	r3, [r2, #0]
              count_ten = updated_count;  // Update reference point
 8001330:	4b55      	ldr	r3, [pc, #340]	@ (8001488 <main+0x350>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a56      	ldr	r2, [pc, #344]	@ (8001490 <main+0x358>)
 8001336:	6013      	str	r3, [r2, #0]

              /* Format and send lost status update */
              char str[100];
              snprintf(str, sizeof(str), "Airtag1 lost %ds", time);
 8001338:	4b54      	ldr	r3, [pc, #336]	@ (800148c <main+0x354>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4638      	mov	r0, r7
 800133e:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <main+0x368>)
 8001340:	2164      	movs	r1, #100	@ 0x64
 8001342:	f002 fb81 	bl	8003a48 <sniprintf>
              HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800134a:	f000 fb75 	bl	8001a38 <HAL_Delay>
              updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(str), (unsigned char*)str);
 800134e:	463b      	mov	r3, r7
 8001350:	4618      	mov	r0, r3
 8001352:	f7fe ff3d 	bl	80001d0 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	463b      	mov	r3, r7
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4613      	mov	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	494d      	ldr	r1, [pc, #308]	@ (8001498 <main+0x360>)
 8001364:	484d      	ldr	r0, [pc, #308]	@ (800149c <main+0x364>)
 8001366:	f7ff fb45 	bl	80009f4 <updateCharValue>
          }

          /* Continue checking for movement to exit lost mode */
          lsm6dsl_read_xyz(&x, &y, &z);
 800136a:	f107 027a 	add.w	r2, r7, #122	@ 0x7a
 800136e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001372:	f107 037e 	add.w	r3, r7, #126	@ 0x7e
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fe4c 	bl	8001014 <lsm6dsl_read_xyz>

          /* Check for significant movement in any axis */
          if (x < lastX - thresh || x > lastX + thresh) {
 800137c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001380:	4619      	mov	r1, r3
 8001382:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	@ 0x8e
 8001386:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	4299      	cmp	r1, r3
 800138e:	db09      	blt.n	80013a4 <main+0x26c>
 8001390:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001394:	4619      	mov	r1, r3
 8001396:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	@ 0x8e
 800139a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800139e:	4413      	add	r3, r2
 80013a0:	4299      	cmp	r1, r3
 80013a2:	dd0b      	ble.n	80013bc <main+0x284>
              lastX = x;
 80013a4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80013a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
              updated_count = 0;  // Reset counters
 80013ac:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <main+0x350>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
              time = 0;
 80013b2:	4b36      	ldr	r3, [pc, #216]	@ (800148c <main+0x354>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
              disconnectBLE();    // Disconnect BLE when found
 80013b8:	f7ff fb70 	bl	8000a9c <disconnectBLE>
          }
          if (y < lastY - thresh || y > lastY + thresh) {
 80013bc:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 80013c0:	4619      	mov	r1, r3
 80013c2:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	@ 0x8c
 80013c6:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4299      	cmp	r1, r3
 80013ce:	db09      	blt.n	80013e4 <main+0x2ac>
 80013d0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 80013d4:	4619      	mov	r1, r3
 80013d6:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	@ 0x8c
 80013da:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80013de:	4413      	add	r3, r2
 80013e0:	4299      	cmp	r1, r3
 80013e2:	dd0b      	ble.n	80013fc <main+0x2c4>
              lastY = y;
 80013e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80013e8:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
              updated_count = 0;
 80013ec:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <main+0x350>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
              time = 0;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <main+0x354>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
              disconnectBLE();
 80013f8:	f7ff fb50 	bl	8000a9c <disconnectBLE>
          }
          if (z < lastZ - thresh || z > lastZ + thresh) {
 80013fc:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001400:	4619      	mov	r1, r3
 8001402:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 8001406:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4299      	cmp	r1, r3
 800140e:	db09      	blt.n	8001424 <main+0x2ec>
 8001410:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001414:	4619      	mov	r1, r3
 8001416:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 800141a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800141e:	4413      	add	r3, r2
 8001420:	4299      	cmp	r1, r3
 8001422:	dd0b      	ble.n	800143c <main+0x304>
              lastZ = z;
 8001424:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001428:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
              updated_count = 0;
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <main+0x350>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
              time = 0;
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <main+0x354>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
              disconnectBLE();
 8001438:	f7ff fb30 	bl	8000a9c <disconnectBLE>
          }
      }

      /* Power saving: Suspend BLE if non-discoverable */
      if (nonDiscoverable) {
 800143c:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <main+0x310>
          standbyBle();
 8001444:	f7ff f836 	bl	80004b4 <standbyBle>
      }

      /* Enter low-power STOP2 mode between operations */
      SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;  // Configure for normal sleep
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <main+0x36c>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <main+0x36c>)
 800144e:	f023 0304 	bic.w	r3, r3, #4
 8001452:	6113      	str	r3, [r2, #16]

      /* Suspend SysTick to save power */
      HAL_SuspendTick();
 8001454:	f000 fb14 	bl	8001a80 <HAL_SuspendTick>
      SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <main+0x370>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <main+0x370>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

      /* Enter STOP2 mode, wake on interrupt */
      HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
 8001464:	2001      	movs	r0, #1
 8001466:	f000 fe9f 	bl	80021a8 <HAL_PWREx_EnterSTOP2Mode>

      /* Resume SysTick after wakeup */
      SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <main+0x370>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0e      	ldr	r2, [pc, #56]	@ (80014a8 <main+0x370>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]
      HAL_ResumeTick();
 8001476:	f000 fb13 	bl	8001aa0 <HAL_ResumeTick>
      if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin)) {
 800147a:	e6a0      	b.n	80011be <main+0x86>
 800147c:	40007c00 	.word	0x40007c00
 8001480:	0007a11f 	.word	0x0007a11f
 8001484:	48001000 	.word	0x48001000
 8001488:	2000035c 	.word	0x2000035c
 800148c:	20000364 	.word	0x20000364
 8001490:	20000360 	.word	0x20000360
 8001494:	08004290 	.word	0x08004290
 8001498:	200002ec 	.word	0x200002ec
 800149c:	200002e4 	.word	0x200002e4
 80014a0:	0800427c 	.word	0x0800427c
 80014a4:	e000ed00 	.word	0xe000ed00
 80014a8:	e000e010 	.word	0xe000e010

080014ac <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b096      	sub	sp, #88	@ 0x58
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	2244      	movs	r2, #68	@ 0x44
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 faf8 	bl	8003ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014d2:	f000 fe13 	bl	80020fc <HAL_PWREx_ControlVoltageScaling>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x34>
  {
      Error_Handler();
 80014dc:	f000 f902 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014e0:	2310      	movs	r3, #16
 80014e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
  // This line changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80014ec:	2370      	movs	r3, #112	@ 0x70
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fe81 	bl	8002200 <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x5c>
  {
      Error_Handler();
 8001504:	f000 f8ee 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fa49 	bl	80029b8 <HAL_RCC_ClockConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x84>
  {
      Error_Handler();
 800152c:	f000 f8da 	bl	80016e4 <Error_Handler>
  }
}
 8001530:	bf00      	nop
 8001532:	3758      	adds	r7, #88	@ 0x58
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_SPI3_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <MX_SPI3_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001544:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001548:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_SPI3_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001552:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001556:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_SPI3_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_SPI3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_SPI3_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001586:	2207      	movs	r2, #7
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_SPI3_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001592:	2208      	movs	r2, #8
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_SPI3_Init+0x74>)
 8001598:	f001 fbfa 	bl	8002d90 <HAL_SPI_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_SPI3_Init+0x6e>
  {
      Error_Handler();
 80015a2:	f000 f89f 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002f8 	.word	0x200002f8
 80015b0:	40003c00 	.word	0x40003c00

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a42      	ldr	r2, [pc, #264]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a3c      	ldr	r2, [pc, #240]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b37      	ldr	r3, [pc, #220]	@ (80016d8 <MX_GPIO_Init+0x124>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	4a36      	ldr	r2, [pc, #216]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001606:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	4a30      	ldr	r2, [pc, #192]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161e:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <MX_GPIO_Init+0x124>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	4a2a      	ldr	r2, [pc, #168]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001636:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <MX_GPIO_Init+0x124>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f000 fd0d 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001654:	4821      	ldr	r0, [pc, #132]	@ (80016dc <MX_GPIO_Init+0x128>)
 8001656:	f000 fd07 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001664:	f000 fd00 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001668:	2340      	movs	r3, #64	@ 0x40
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <MX_GPIO_Init+0x12c>)
 800167e:	f000 fb31 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin | BLE_RESET_Pin;
 8001682:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f000 fb21 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80016a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4808      	ldr	r0, [pc, #32]	@ (80016dc <MX_GPIO_Init+0x128>)
 80016bc:	f000 fb12 	bl	8001ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2017      	movs	r0, #23
 80016c6:	f000 fad6 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ca:	2017      	movs	r0, #23
 80016cc:	f000 faef 	bl	8001cae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000c00 	.word	0x48000c00
 80016e0:	48001000 	.word	0x48001000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	@ 0x60
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	@ 0x58
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_SPI_MspInit+0x7c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d128      	bne.n	80017ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800175a:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_SPI_MspInit+0x80>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_SPI_MspInit+0x80>)
 8001760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <HAL_SPI_MspInit+0x80>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_SPI_MspInit+0x80>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a10      	ldr	r2, [pc, #64]	@ (80017b8 <HAL_SPI_MspInit+0x80>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_SPI_MspInit+0x80>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800178a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800179c:	2306      	movs	r3, #6
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <HAL_SPI_MspInit+0x84>)
 80017a8:	f000 fa9c 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	@ 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40003c00 	.word	0x40003c00
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48000800 	.word	0x48000800

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 f8ef 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <EXTI9_5_IRQHandler+0x14>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800182a:	2040      	movs	r0, #64	@ 0x40
 800182c:	f000 fc34 	bl	8002098 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002f4 	.word	0x200002f4

08001838 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x50>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x16>
		heap_end = &end;
 8001848:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <_sbrk+0x50>)
 800184a:	4a10      	ldr	r2, [pc, #64]	@ (800188c <_sbrk+0x54>)
 800184c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <_sbrk+0x50>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <_sbrk+0x50>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	466a      	mov	r2, sp
 800185e:	4293      	cmp	r3, r2
 8001860:	d907      	bls.n	8001872 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001862:	f002 f93d 	bl	8003ae0 <__errno>
 8001866:	4603      	mov	r3, r0
 8001868:	220c      	movs	r2, #12
 800186a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	e006      	b.n	8001880 <_sbrk+0x48>
	}

	heap_end += incr;
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <_sbrk+0x50>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a03      	ldr	r2, [pc, #12]	@ (8001888 <_sbrk+0x50>)
 800187c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000368 	.word	0x20000368
 800188c:	200004b8 	.word	0x200004b8

08001890 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <SystemInit+0x64>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a16      	ldr	r2, [pc, #88]	@ (80018f4 <SystemInit+0x64>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <SystemInit+0x68>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <SystemInit+0x68>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <SystemInit+0x68>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <SystemInit+0x68>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <SystemInit+0x68>)
 80018bc:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018c0:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <SystemInit+0x68>)
 80018c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <SystemInit+0x68>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <SystemInit+0x68>)
 80018d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <SystemInit+0x68>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <SystemInit+0x64>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018e6:	609a      	str	r2, [r3, #8]
#endif
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	40021000 	.word	0x40021000

080018fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001900:	f7ff ffc6 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <LoopForever+0x6>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	@ (800193c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <LoopForever+0xe>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	@ (8001948 <LoopForever+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f002 f8df 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192e:	f7ff fc03 	bl	8001138 <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001934:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8001940:	08004324 	.word	0x08004324
  ldr r2, =_sbss
 8001944:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8001948:	200004b8 	.word	0x200004b8

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>

0800194e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f981 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f80e 	bl	8001980 <HAL_InitTick>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e001      	b.n	8001974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001970:	f7ff febe 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001974:	79fb      	ldrb	r3, [r7, #7]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_InitTick+0x6c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_InitTick+0x70>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_InitTick+0x6c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f98d 	bl	8001cca <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d809      	bhi.n	80019d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 f957 	bl	8001c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_InitTick+0x74>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e004      	b.n	80019e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e001      	b.n	80019e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000168 	.word	0x20000168
 80019f0:	20000160 	.word	0x20000160
 80019f4:	20000164 	.word	0x20000164

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000168 	.word	0x20000168
 8001a1c:	2000036c 	.word	0x2000036c

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	2000036c 	.word	0x2000036c

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff ffee 	bl	8001a20 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000168 	.word	0x20000168

08001a80 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_SuspendTick+0x1c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <HAL_SuspendTick+0x1c>)
 8001a8a:	f023 0302 	bic.w	r3, r3, #2
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_ResumeTick+0x1c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <HAL_ResumeTick+0x1c>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <__NVIC_SetPriorityGrouping>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff3e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff31 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e17f      	b.n	8001ff4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8171 	beq.w	8001fee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d005      	beq.n	8001d24 <HAL_GPIO_Init+0x40>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0201 	and.w	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d118      	bne.n	8001dc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d017      	beq.n	8001e00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d123      	bne.n	8001e54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80ac 	beq.w	8001fee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	4b5f      	ldr	r3, [pc, #380]	@ (8002014 <HAL_GPIO_Init+0x330>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002014 <HAL_GPIO_Init+0x330>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8002014 <HAL_GPIO_Init+0x330>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eae:	4a5a      	ldr	r2, [pc, #360]	@ (8002018 <HAL_GPIO_Init+0x334>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0x242>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	@ (800201c <HAL_GPIO_Init+0x338>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x23e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8002020 <HAL_GPIO_Init+0x33c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x23a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	@ (8002024 <HAL_GPIO_Init+0x340>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x236>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8002028 <HAL_GPIO_Init+0x344>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x232>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	@ (800202c <HAL_GPIO_Init+0x348>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x22e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4a      	ldr	r2, [pc, #296]	@ (8002030 <HAL_GPIO_Init+0x34c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x22a>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00c      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00a      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x244>
 8001f26:	2300      	movs	r3, #0
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f38:	4937      	ldr	r1, [pc, #220]	@ (8002018 <HAL_GPIO_Init+0x334>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f46:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6a:	4a32      	ldr	r2, [pc, #200]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f94:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fe8:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f47f ae78 	bne.w	8001cf4 <HAL_GPIO_Init+0x10>
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800
 8002024:	48000c00 	.word	0x48000c00
 8002028:	48001000 	.word	0x48001000
 800202c:	48001400 	.word	0x48001400
 8002030:	48001800 	.word	0x48001800
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002084:	e002      	b.n	800208c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f806 	bl	80020c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000

080020fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800210a:	d130      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002118:	d038      	beq.n	800218c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002122:	4a1e      	ldr	r2, [pc, #120]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002124:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800212a:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2232      	movs	r2, #50	@ 0x32
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9b      	lsrs	r3, r3, #18
 800213c:	3301      	adds	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002140:	e002      	b.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002154:	d102      	bne.n	800215c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f2      	bne.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002168:	d110      	bne.n	800218c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e00f      	b.n	800218e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d007      	beq.n	800218c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800217c:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002184:	4a05      	ldr	r2, [pc, #20]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40007000 	.word	0x40007000
 80021a0:	20000160 	.word	0x20000160
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0307 	bic.w	r3, r3, #7
 80021ba:	4a0f      	ldr	r2, [pc, #60]	@ (80021f8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80021d4:	bf30      	wfi
 80021d6:	e002      	b.n	80021de <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80021d8:	bf40      	sev
    __WFE();
 80021da:	bf20      	wfe
    __WFE();
 80021dc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	4a06      	ldr	r2, [pc, #24]	@ (80021fc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6113      	str	r3, [r2, #16]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e3ca      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002212:	4b97      	ldr	r3, [pc, #604]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221c:	4b94      	ldr	r3, [pc, #592]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80e4 	beq.w	80023fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_RCC_OscConfig+0x4a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	f040 808b 	bne.w	8002358 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 8087 	bne.w	8002358 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224a:	4b89      	ldr	r3, [pc, #548]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3a2      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b82      	ldr	r3, [pc, #520]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_RCC_OscConfig+0x7c>
 8002272:	4b7f      	ldr	r3, [pc, #508]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800227a:	e005      	b.n	8002288 <HAL_RCC_OscConfig+0x88>
 800227c:	4b7c      	ldr	r3, [pc, #496]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002288:	4293      	cmp	r3, r2
 800228a:	d223      	bcs.n	80022d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fd1d 	bl	8002cd0 <RCC_SetFlashLatencyFromMSIRange>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e383      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a0:	4b73      	ldr	r3, [pc, #460]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a72      	ldr	r2, [pc, #456]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b70      	ldr	r3, [pc, #448]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	496d      	ldr	r1, [pc, #436]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4b6c      	ldr	r3, [pc, #432]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4968      	ldr	r1, [pc, #416]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
 80022d2:	e025      	b.n	8002320 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d4:	4b66      	ldr	r3, [pc, #408]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a65      	ldr	r2, [pc, #404]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b63      	ldr	r3, [pc, #396]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4960      	ldr	r1, [pc, #384]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	495b      	ldr	r1, [pc, #364]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fcdd 	bl	8002cd0 <RCC_SetFlashLatencyFromMSIRange>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e343      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002320:	f000 fc4a 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b52      	ldr	r3, [pc, #328]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	4950      	ldr	r1, [pc, #320]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	4a4e      	ldr	r2, [pc, #312]	@ (8002478 <HAL_RCC_OscConfig+0x278>)
 800233e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002340:	4b4e      	ldr	r3, [pc, #312]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb1b 	bl	8001980 <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d052      	beq.n	80023fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	e327      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d032      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002360:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a42      	ldr	r2, [pc, #264]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236c:	f7ff fb58 	bl	8001a20 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002374:	f7ff fb54 	bl	8001a20 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e310      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002392:	4b37      	ldr	r3, [pc, #220]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a36      	ldr	r2, [pc, #216]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4931      	ldr	r1, [pc, #196]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	492c      	ldr	r1, [pc, #176]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
 80023c4:	e01a      	b.n	80023fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a29      	ldr	r2, [pc, #164]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d2:	f7ff fb25 	bl	8001a20 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023da:	f7ff fb21 	bl	8001a20 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e2dd      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x1da>
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d074      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x21a>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d10e      	bne.n	8002432 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d064      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d160      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e2ba      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x24a>
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0b      	ldr	r2, [pc, #44]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e026      	b.n	8002498 <HAL_RCC_OscConfig+0x298>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002452:	d115      	bne.n	8002480 <HAL_RCC_OscConfig+0x280>
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 800245a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b03      	ldr	r3, [pc, #12]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a02      	ldr	r2, [pc, #8]	@ (8002470 <HAL_RCC_OscConfig+0x270>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x298>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	080042a0 	.word	0x080042a0
 8002478:	20000160 	.word	0x20000160
 800247c:	20000164 	.word	0x20000164
 8002480:	4ba0      	ldr	r3, [pc, #640]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a9f      	ldr	r2, [pc, #636]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b9d      	ldr	r3, [pc, #628]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9c      	ldr	r2, [pc, #624]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fabe 	bl	8001a20 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff faba 	bl	8001a20 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	@ 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e276      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	4b92      	ldr	r3, [pc, #584]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x2a8>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff faaa 	bl	8001a20 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff faa6 	bl	8001a20 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e262      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	4b88      	ldr	r3, [pc, #544]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2d0>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d060      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x310>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d119      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d116      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	4b7c      	ldr	r3, [pc, #496]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x328>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e23f      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b76      	ldr	r3, [pc, #472]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4973      	ldr	r1, [pc, #460]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	e040      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002546:	4b6f      	ldr	r3, [pc, #444]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7ff fa65 	bl	8001a20 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7ff fa61 	bl	8001a20 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e21d      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	4b65      	ldr	r3, [pc, #404]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b62      	ldr	r3, [pc, #392]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	495f      	ldr	r1, [pc, #380]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7ff fa41 	bl	8001a20 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff fa3d 	bl	8001a20 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1f9      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03c      	beq.n	8002646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01c      	beq.n	800260e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025da:	4a4a      	ldr	r2, [pc, #296]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff fa1c 	bl	8001a20 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff fa18 	bl	8001a20 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1d4      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	4b41      	ldr	r3, [pc, #260]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x3ec>
 800260c:	e01b      	b.n	8002646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002614:	4a3b      	ldr	r2, [pc, #236]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7ff f9ff 	bl	8001a20 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002626:	f7ff f9fb 	bl	8001a20 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1b7      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	4b32      	ldr	r3, [pc, #200]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a6 	beq.w	80027a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002658:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	4a26      	ldr	r2, [pc, #152]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002670:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267c:	2301      	movs	r3, #1
 800267e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <HAL_RCC_OscConfig+0x508>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_RCC_OscConfig+0x508>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <HAL_RCC_OscConfig+0x508>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002698:	f7ff f9c2 	bl	8001a20 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7ff f9be 	bl	8001a20 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e17a      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <HAL_RCC_OscConfig+0x508>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
 80026c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026d6:	e029      	b.n	800272c <HAL_RCC_OscConfig+0x52c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d115      	bne.n	800270c <HAL_RCC_OscConfig+0x50c>
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	4a07      	ldr	r2, [pc, #28]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f6:	4a03      	ldr	r2, [pc, #12]	@ (8002704 <HAL_RCC_OscConfig+0x504>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x52c>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
 800270c:	4b9c      	ldr	r3, [pc, #624]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	4a9b      	ldr	r2, [pc, #620]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271c:	4b98      	ldr	r3, [pc, #608]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	4a97      	ldr	r2, [pc, #604]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d016      	beq.n	8002762 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f974 	bl	8001a20 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273a:	e00a      	b.n	8002752 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7ff f970 	bl	8001a20 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e12a      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002752:	4b8b      	ldr	r3, [pc, #556]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ed      	beq.n	800273c <HAL_RCC_OscConfig+0x53c>
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7ff f95d 	bl	8001a20 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7ff f959 	bl	8001a20 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e113      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002780:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ed      	bne.n	800276a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278e:	7ffb      	ldrb	r3, [r7, #31]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b7a      	ldr	r3, [pc, #488]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4a79      	ldr	r2, [pc, #484]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80fe 	beq.w	80029a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 80d0 	bne.w	8002954 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027b4:	4b72      	ldr	r3, [pc, #456]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d130      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	3b01      	subs	r3, #1
 80027d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d127      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11f      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027f4:	2a07      	cmp	r2, #7
 80027f6:	bf14      	ite	ne
 80027f8:	2201      	movne	r2, #1
 80027fa:	2200      	moveq	r2, #0
 80027fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fe:	4293      	cmp	r3, r2
 8002800:	d113      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d109      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d06e      	beq.n	8002908 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d069      	beq.n	8002904 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002830:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800283c:	4b50      	ldr	r3, [pc, #320]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0ad      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800284c:	4b4c      	ldr	r3, [pc, #304]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4b      	ldr	r2, [pc, #300]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002858:	f7ff f8e2 	bl	8001a20 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff f8de 	bl	8001a20 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e09a      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	4b43      	ldr	r3, [pc, #268]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287e:	4b40      	ldr	r3, [pc, #256]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b40      	ldr	r3, [pc, #256]	@ (8002984 <HAL_RCC_OscConfig+0x784>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800288e:	3a01      	subs	r2, #1
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002898:	0212      	lsls	r2, r2, #8
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028a0:	0852      	lsrs	r2, r2, #1
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0552      	lsls	r2, r2, #21
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0652      	lsls	r2, r2, #25
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028b8:	0912      	lsrs	r2, r2, #4
 80028ba:	0452      	lsls	r2, r2, #17
 80028bc:	430a      	orrs	r2, r1
 80028be:	4930      	ldr	r1, [pc, #192]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028dc:	f7ff f8a0 	bl	8001a20 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff f89c 	bl	8001a20 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e058      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002902:	e050      	b.n	80029a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e04f      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d148      	bne.n	80029a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002914:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292c:	f7ff f878 	bl	8001a20 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f874 	bl	8001a20 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e030      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x734>
 8002952:	e028      	b.n	80029a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d023      	beq.n	80029a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <HAL_RCC_OscConfig+0x780>)
 8002960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff f85b 	bl	8001a20 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	e00c      	b.n	8002988 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7ff f857 	bl	8001a20 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d905      	bls.n	8002988 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e013      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
 8002980:	40021000 	.word	0x40021000
 8002984:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_OscConfig+0x7b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ec      	bne.n	800296e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_RCC_OscConfig+0x7b0>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4905      	ldr	r1, [pc, #20]	@ (80029b0 <HAL_RCC_OscConfig+0x7b0>)
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_OscConfig+0x7b4>)
 800299c:	4013      	ands	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e001      	b.n	80029a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	feeefffc 	.word	0xfeeefffc

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0e7      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b75      	ldr	r3, [pc, #468]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b72      	ldr	r3, [pc, #456]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	4970      	ldr	r1, [pc, #448]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0cf      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d908      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b63      	ldr	r3, [pc, #396]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4960      	ldr	r1, [pc, #384]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d04c      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d121      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0a6      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a56:	4b54      	ldr	r3, [pc, #336]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d115      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e09a      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e08e      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e086      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4943      	ldr	r1, [pc, #268]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe ffbe 	bl	8001a20 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe ffba 	bl	8001a20 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e06e      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d208      	bcs.n	8002afe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	492b      	ldr	r1, [pc, #172]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afe:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d210      	bcs.n	8002b2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 0207 	bic.w	r2, r3, #7
 8002b14:	4923      	ldr	r1, [pc, #140]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e036      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4918      	ldr	r1, [pc, #96]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b58:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4910      	ldr	r1, [pc, #64]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b6c:	f000 f824 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	490b      	ldr	r1, [pc, #44]	@ (8002bac <HAL_RCC_ClockConfig+0x1f4>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fef5 	bl	8001980 <HAL_InitTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	080042a0 	.word	0x080042a0
 8002bb0:	20000160 	.word	0x20000160
 8002bb4:	20000164 	.word	0x20000164

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	@ 0x24
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x34>
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d121      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d11e      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bec:	4b34      	ldr	r3, [pc, #208]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bf8:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e005      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c14:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d102      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e004      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d134      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d003      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0xac>
 8002c5c:	e005      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c60:	617b      	str	r3, [r7, #20]
      break;
 8002c62:	e005      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c66:	617b      	str	r3, [r7, #20]
      break;
 8002c68:	e002      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	617b      	str	r3, [r7, #20]
      break;
 8002c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	fb03 f202 	mul.w	r2, r3, r2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	0e5b      	lsrs	r3, r3, #25
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	@ 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	080042b0 	.word	0x080042b0
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce8:	f7ff f9fa 	bl	80020e0 <HAL_PWREx_GetVoltageRange>
 8002cec:	6178      	str	r0, [r7, #20]
 8002cee:	e014      	b.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	4a24      	ldr	r2, [pc, #144]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cfc:	4b22      	ldr	r3, [pc, #136]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d08:	f7ff f9ea 	bl	80020e0 <HAL_PWREx_GetVoltageRange>
 8002d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	4a1d      	ldr	r2, [pc, #116]	@ (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d20:	d10b      	bne.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b80      	cmp	r3, #128	@ 0x80
 8002d26:	d919      	bls.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d2c:	d902      	bls.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d2e:	2302      	movs	r3, #2
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e013      	b.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d34:	2301      	movs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e010      	b.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b80      	cmp	r3, #128	@ 0x80
 8002d3e:	d902      	bls.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d40:	2303      	movs	r3, #3
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e00a      	b.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b80      	cmp	r3, #128	@ 0x80
 8002d4a:	d102      	bne.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e004      	b.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b70      	cmp	r3, #112	@ 0x70
 8002d56:	d101      	bne.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 0207 	bic.w	r2, r3, #7
 8002d64:	4909      	ldr	r1, [pc, #36]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d6c:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e095      	b.n	8002ece <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002db2:	d009      	beq.n	8002dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
 8002dba:	e005      	b.n	8002dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fca8 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e08:	d902      	bls.n	8002e10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e002      	b.n	8002e16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e1e:	d007      	beq.n	8002e30 <HAL_SPI_Init+0xa0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	ea42 0103 	orr.w	r1, r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	f003 0204 	and.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002eac:	ea42 0103 	orr.w	r1, r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b088      	sub	sp, #32
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_SPI_Transmit+0x22>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e15f      	b.n	80031b8 <HAL_SPI_Transmit+0x2e2>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f00:	f7fe fd8e 	bl	8001a20 <HAL_GetTick>
 8002f04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f1a:	e148      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_Transmit+0x52>
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f2c:	e13f      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f78:	d10f      	bne.n	8002f9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d007      	beq.n	8002fb8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc0:	d94f      	bls.n	8003062 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0xfa>
 8002fca:	8afb      	ldrh	r3, [r7, #22]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d142      	bne.n	8003056 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff4:	e02f      	b.n	8003056 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d112      	bne.n	800302a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003028:	e015      	b.n	8003056 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302a:	f7fe fcf9 	bl	8001a20 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Transmit+0x16c>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Transmit+0x172>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003054:	e0ab      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ca      	bne.n	8002ff6 <HAL_SPI_Transmit+0x120>
 8003060:	e080      	b.n	8003164 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Transmit+0x19a>
 800306a:	8afb      	ldrh	r3, [r7, #22]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d174      	bne.n	800315a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d912      	bls.n	80030a0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b02      	subs	r3, #2
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800309e:	e05c      	b.n	800315a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030c6:	e048      	b.n	800315a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d12b      	bne.n	800312e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d912      	bls.n	8003106 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b02      	subs	r3, #2
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003104:	e029      	b.n	800315a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800312c:	e015      	b.n	800315a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312e:	f7fe fc77 	bl	8001a20 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d803      	bhi.n	8003146 <HAL_SPI_Transmit+0x270>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d102      	bne.n	800314c <HAL_SPI_Transmit+0x276>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003158:	e029      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1b1      	bne.n	80030c8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	6839      	ldr	r1, [r7, #0]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb69 	bl	8003840 <SPI_EndRxTxTransaction>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e003      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031ce:	2301      	movs	r3, #1
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_TransmitReceive+0x26>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e20a      	b.n	80035fc <HAL_SPI_TransmitReceive+0x43c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ee:	f7fe fc17 	bl	8001a20 <HAL_GetTick>
 80031f2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800320a:	7efb      	ldrb	r3, [r7, #27]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d00e      	beq.n	800322e <HAL_SPI_TransmitReceive+0x6e>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003216:	d106      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x66>
 8003220:	7efb      	ldrb	r3, [r7, #27]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d003      	beq.n	800322e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800322c:	e1e0      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x80>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x80>
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003246:	e1d3      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b04      	cmp	r3, #4
 8003252:	d003      	beq.n	800325c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2205      	movs	r2, #5
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	887a      	ldrh	r2, [r7, #2]
 8003282:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800329e:	d802      	bhi.n	80032a6 <HAL_SPI_TransmitReceive+0xe6>
 80032a0:	8a3b      	ldrh	r3, [r7, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d908      	bls.n	80032b8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	e007      	b.n	80032c8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	d007      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032ee:	f240 8081 	bls.w	80033f4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x140>
 80032fa:	8a7b      	ldrh	r3, [r7, #18]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d16d      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003324:	e05a      	b.n	80033dc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d11b      	bne.n	800336c <HAL_SPI_TransmitReceive+0x1ac>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <HAL_SPI_TransmitReceive+0x1ac>
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2b01      	cmp	r3, #1
 8003342:	d113      	bne.n	800336c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d11c      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x1f4>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	b292      	uxth	r2, r2
 8003392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b0:	2301      	movs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b4:	f7fe fb34 	bl	8001a20 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d80b      	bhi.n	80033dc <HAL_SPI_TransmitReceive+0x21c>
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d007      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80033da:	e109      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d19f      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x166>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d199      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x166>
 80033f2:	e0e3      	b.n	80035bc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x244>
 80033fc:	8a7b      	ldrh	r3, [r7, #18]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	f040 80cf 	bne.w	80035a2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d912      	bls.n	8003434 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003432:	e0b6      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345a:	e0a2      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d134      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x314>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d02f      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x314>
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	2b01      	cmp	r3, #1
 8003478:	d12c      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d912      	bls.n	80034aa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	1c9a      	adds	r2, r3, #2
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b02      	subs	r3, #2
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034a8:	e012      	b.n	80034d0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d148      	bne.n	8003574 <HAL_SPI_TransmitReceive+0x3b4>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d042      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d923      	bls.n	8003542 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	b292      	uxth	r2, r2
 8003506:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b02      	subs	r3, #2
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d81f      	bhi.n	8003570 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	e016      	b.n	8003570 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f103 020c 	add.w	r2, r3, #12
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003570:	2301      	movs	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003574:	f7fe fa54 	bl	8001a20 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003580:	429a      	cmp	r2, r3
 8003582:	d803      	bhi.n	800358c <HAL_SPI_TransmitReceive+0x3cc>
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d102      	bne.n	8003592 <HAL_SPI_TransmitReceive+0x3d2>
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	2b00      	cmp	r3, #0
 8003590:	d107      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80035a0:	e026      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af57 	bne.w	800345c <HAL_SPI_TransmitReceive+0x29c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f47f af50 	bne.w	800345c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f93d 	bl	8003840 <SPI_EndRxTxTransaction>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e6:	e003      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80035f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3728      	adds	r7, #40	@ 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003614:	f7fe fa04 	bl	8001a20 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	4413      	add	r3, r2
 8003622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003624:	f7fe f9fc 	bl	8001a20 <HAL_GetTick>
 8003628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800362a:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	015b      	lsls	r3, r3, #5
 8003630:	0d1b      	lsrs	r3, r3, #20
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363a:	e054      	b.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d050      	beq.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003644:	f7fe f9ec 	bl	8001a20 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	d902      	bls.n	800365a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13d      	bne.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003672:	d111      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367c:	d004      	beq.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d107      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a0:	d10f      	bne.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e017      	b.n	8003706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	429a      	cmp	r2, r3
 8003702:	d19b      	bne.n	800363c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000160 	.word	0x20000160

08003714 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	@ 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003726:	f7fe f97b 	bl	8001a20 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003736:	f7fe f973 	bl	8001a20 <HAL_GetTick>
 800373a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003744:	4b3d      	ldr	r3, [pc, #244]	@ (800383c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00da      	lsls	r2, r3, #3
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	0d1b      	lsrs	r3, r3, #20
 8003754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800375c:	e060      	b.n	8003820 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003764:	d107      	bne.n	8003776 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003774:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d050      	beq.n	8003820 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800377e:	f7fe f94f 	bl	8001a20 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378a:	429a      	cmp	r2, r3
 800378c:	d902      	bls.n	8003794 <SPI_WaitFifoStateUntilTimeout+0x80>
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	d13d      	bne.n	8003810 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ac:	d111      	bne.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d004      	beq.n	80037c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d107      	bne.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037da:	d10f      	bne.n	80037fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e010      	b.n	8003832 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	3b01      	subs	r3, #1
 800381e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d196      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3728      	adds	r7, #40	@ 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000160 	.word	0x20000160

08003840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff ff5b 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e027      	b.n	80038c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	2180      	movs	r1, #128	@ 0x80
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff fec0 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e014      	b.n	80038c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff ff34 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e000      	b.n	80038c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <malloc>:
 80038cc:	4b02      	ldr	r3, [pc, #8]	@ (80038d8 <malloc+0xc>)
 80038ce:	4601      	mov	r1, r0
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	f000 b82d 	b.w	8003930 <_malloc_r>
 80038d6:	bf00      	nop
 80038d8:	2000016c 	.word	0x2000016c

080038dc <free>:
 80038dc:	4b02      	ldr	r3, [pc, #8]	@ (80038e8 <free+0xc>)
 80038de:	4601      	mov	r1, r0
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	f000 b937 	b.w	8003b54 <_free_r>
 80038e6:	bf00      	nop
 80038e8:	2000016c 	.word	0x2000016c

080038ec <sbrk_aligned>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4e0f      	ldr	r6, [pc, #60]	@ (800392c <sbrk_aligned+0x40>)
 80038f0:	460c      	mov	r4, r1
 80038f2:	6831      	ldr	r1, [r6, #0]
 80038f4:	4605      	mov	r5, r0
 80038f6:	b911      	cbnz	r1, 80038fe <sbrk_aligned+0x12>
 80038f8:	f000 f8e2 	bl	8003ac0 <_sbrk_r>
 80038fc:	6030      	str	r0, [r6, #0]
 80038fe:	4621      	mov	r1, r4
 8003900:	4628      	mov	r0, r5
 8003902:	f000 f8dd 	bl	8003ac0 <_sbrk_r>
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	d103      	bne.n	8003912 <sbrk_aligned+0x26>
 800390a:	f04f 34ff 	mov.w	r4, #4294967295
 800390e:	4620      	mov	r0, r4
 8003910:	bd70      	pop	{r4, r5, r6, pc}
 8003912:	1cc4      	adds	r4, r0, #3
 8003914:	f024 0403 	bic.w	r4, r4, #3
 8003918:	42a0      	cmp	r0, r4
 800391a:	d0f8      	beq.n	800390e <sbrk_aligned+0x22>
 800391c:	1a21      	subs	r1, r4, r0
 800391e:	4628      	mov	r0, r5
 8003920:	f000 f8ce 	bl	8003ac0 <_sbrk_r>
 8003924:	3001      	adds	r0, #1
 8003926:	d1f2      	bne.n	800390e <sbrk_aligned+0x22>
 8003928:	e7ef      	b.n	800390a <sbrk_aligned+0x1e>
 800392a:	bf00      	nop
 800392c:	20000370 	.word	0x20000370

08003930 <_malloc_r>:
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	1ccd      	adds	r5, r1, #3
 8003936:	f025 0503 	bic.w	r5, r5, #3
 800393a:	3508      	adds	r5, #8
 800393c:	2d0c      	cmp	r5, #12
 800393e:	bf38      	it	cc
 8003940:	250c      	movcc	r5, #12
 8003942:	2d00      	cmp	r5, #0
 8003944:	4606      	mov	r6, r0
 8003946:	db01      	blt.n	800394c <_malloc_r+0x1c>
 8003948:	42a9      	cmp	r1, r5
 800394a:	d904      	bls.n	8003956 <_malloc_r+0x26>
 800394c:	230c      	movs	r3, #12
 800394e:	6033      	str	r3, [r6, #0]
 8003950:	2000      	movs	r0, #0
 8003952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003956:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a2c <_malloc_r+0xfc>
 800395a:	f000 f869 	bl	8003a30 <__malloc_lock>
 800395e:	f8d8 3000 	ldr.w	r3, [r8]
 8003962:	461c      	mov	r4, r3
 8003964:	bb44      	cbnz	r4, 80039b8 <_malloc_r+0x88>
 8003966:	4629      	mov	r1, r5
 8003968:	4630      	mov	r0, r6
 800396a:	f7ff ffbf 	bl	80038ec <sbrk_aligned>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	4604      	mov	r4, r0
 8003972:	d158      	bne.n	8003a26 <_malloc_r+0xf6>
 8003974:	f8d8 4000 	ldr.w	r4, [r8]
 8003978:	4627      	mov	r7, r4
 800397a:	2f00      	cmp	r7, #0
 800397c:	d143      	bne.n	8003a06 <_malloc_r+0xd6>
 800397e:	2c00      	cmp	r4, #0
 8003980:	d04b      	beq.n	8003a1a <_malloc_r+0xea>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	4639      	mov	r1, r7
 8003986:	4630      	mov	r0, r6
 8003988:	eb04 0903 	add.w	r9, r4, r3
 800398c:	f000 f898 	bl	8003ac0 <_sbrk_r>
 8003990:	4581      	cmp	r9, r0
 8003992:	d142      	bne.n	8003a1a <_malloc_r+0xea>
 8003994:	6821      	ldr	r1, [r4, #0]
 8003996:	1a6d      	subs	r5, r5, r1
 8003998:	4629      	mov	r1, r5
 800399a:	4630      	mov	r0, r6
 800399c:	f7ff ffa6 	bl	80038ec <sbrk_aligned>
 80039a0:	3001      	adds	r0, #1
 80039a2:	d03a      	beq.n	8003a1a <_malloc_r+0xea>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	442b      	add	r3, r5
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	f8d8 3000 	ldr.w	r3, [r8]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	bb62      	cbnz	r2, 8003a0c <_malloc_r+0xdc>
 80039b2:	f8c8 7000 	str.w	r7, [r8]
 80039b6:	e00f      	b.n	80039d8 <_malloc_r+0xa8>
 80039b8:	6822      	ldr	r2, [r4, #0]
 80039ba:	1b52      	subs	r2, r2, r5
 80039bc:	d420      	bmi.n	8003a00 <_malloc_r+0xd0>
 80039be:	2a0b      	cmp	r2, #11
 80039c0:	d917      	bls.n	80039f2 <_malloc_r+0xc2>
 80039c2:	1961      	adds	r1, r4, r5
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	6025      	str	r5, [r4, #0]
 80039c8:	bf18      	it	ne
 80039ca:	6059      	strne	r1, [r3, #4]
 80039cc:	6863      	ldr	r3, [r4, #4]
 80039ce:	bf08      	it	eq
 80039d0:	f8c8 1000 	streq.w	r1, [r8]
 80039d4:	5162      	str	r2, [r4, r5]
 80039d6:	604b      	str	r3, [r1, #4]
 80039d8:	4630      	mov	r0, r6
 80039da:	f000 f82f 	bl	8003a3c <__malloc_unlock>
 80039de:	f104 000b 	add.w	r0, r4, #11
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	f020 0007 	bic.w	r0, r0, #7
 80039e8:	1ac2      	subs	r2, r0, r3
 80039ea:	bf1c      	itt	ne
 80039ec:	1a1b      	subne	r3, r3, r0
 80039ee:	50a3      	strne	r3, [r4, r2]
 80039f0:	e7af      	b.n	8003952 <_malloc_r+0x22>
 80039f2:	6862      	ldr	r2, [r4, #4]
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	bf0c      	ite	eq
 80039f8:	f8c8 2000 	streq.w	r2, [r8]
 80039fc:	605a      	strne	r2, [r3, #4]
 80039fe:	e7eb      	b.n	80039d8 <_malloc_r+0xa8>
 8003a00:	4623      	mov	r3, r4
 8003a02:	6864      	ldr	r4, [r4, #4]
 8003a04:	e7ae      	b.n	8003964 <_malloc_r+0x34>
 8003a06:	463c      	mov	r4, r7
 8003a08:	687f      	ldr	r7, [r7, #4]
 8003a0a:	e7b6      	b.n	800397a <_malloc_r+0x4a>
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	42a3      	cmp	r3, r4
 8003a12:	d1fb      	bne.n	8003a0c <_malloc_r+0xdc>
 8003a14:	2300      	movs	r3, #0
 8003a16:	6053      	str	r3, [r2, #4]
 8003a18:	e7de      	b.n	80039d8 <_malloc_r+0xa8>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	6033      	str	r3, [r6, #0]
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f000 f80c 	bl	8003a3c <__malloc_unlock>
 8003a24:	e794      	b.n	8003950 <_malloc_r+0x20>
 8003a26:	6005      	str	r5, [r0, #0]
 8003a28:	e7d6      	b.n	80039d8 <_malloc_r+0xa8>
 8003a2a:	bf00      	nop
 8003a2c:	20000374 	.word	0x20000374

08003a30 <__malloc_lock>:
 8003a30:	4801      	ldr	r0, [pc, #4]	@ (8003a38 <__malloc_lock+0x8>)
 8003a32:	f000 b87f 	b.w	8003b34 <__retarget_lock_acquire_recursive>
 8003a36:	bf00      	nop
 8003a38:	200004b4 	.word	0x200004b4

08003a3c <__malloc_unlock>:
 8003a3c:	4801      	ldr	r0, [pc, #4]	@ (8003a44 <__malloc_unlock+0x8>)
 8003a3e:	f000 b87a 	b.w	8003b36 <__retarget_lock_release_recursive>
 8003a42:	bf00      	nop
 8003a44:	200004b4 	.word	0x200004b4

08003a48 <sniprintf>:
 8003a48:	b40c      	push	{r2, r3}
 8003a4a:	b530      	push	{r4, r5, lr}
 8003a4c:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <sniprintf+0x64>)
 8003a4e:	1e0c      	subs	r4, r1, #0
 8003a50:	681d      	ldr	r5, [r3, #0]
 8003a52:	b09d      	sub	sp, #116	@ 0x74
 8003a54:	da08      	bge.n	8003a68 <sniprintf+0x20>
 8003a56:	238b      	movs	r3, #139	@ 0x8b
 8003a58:	602b      	str	r3, [r5, #0]
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	b01d      	add	sp, #116	@ 0x74
 8003a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a64:	b002      	add	sp, #8
 8003a66:	4770      	bx	lr
 8003a68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a70:	bf14      	ite	ne
 8003a72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a76:	4623      	moveq	r3, r4
 8003a78:	9304      	str	r3, [sp, #16]
 8003a7a:	9307      	str	r3, [sp, #28]
 8003a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a80:	9002      	str	r0, [sp, #8]
 8003a82:	9006      	str	r0, [sp, #24]
 8003a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a8a:	ab21      	add	r3, sp, #132	@ 0x84
 8003a8c:	a902      	add	r1, sp, #8
 8003a8e:	4628      	mov	r0, r5
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	f000 f905 	bl	8003ca0 <_svfiprintf_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	bfbc      	itt	lt
 8003a9a:	238b      	movlt	r3, #139	@ 0x8b
 8003a9c:	602b      	strlt	r3, [r5, #0]
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	d0dd      	beq.n	8003a5e <sniprintf+0x16>
 8003aa2:	9b02      	ldr	r3, [sp, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e7d9      	b.n	8003a5e <sniprintf+0x16>
 8003aaa:	bf00      	nop
 8003aac:	2000016c 	.word	0x2000016c

08003ab0 <memset>:
 8003ab0:	4402      	add	r2, r0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	f803 1b01 	strb.w	r1, [r3], #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d06      	ldr	r5, [pc, #24]	@ (8003adc <_sbrk_r+0x1c>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fd feb4 	bl	8001838 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	200004b0 	.word	0x200004b0

08003ae0 <__errno>:
 8003ae0:	4b01      	ldr	r3, [pc, #4]	@ (8003ae8 <__errno+0x8>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2000016c 	.word	0x2000016c

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4d0d      	ldr	r5, [pc, #52]	@ (8003b24 <__libc_init_array+0x38>)
 8003af0:	4c0d      	ldr	r4, [pc, #52]	@ (8003b28 <__libc_init_array+0x3c>)
 8003af2:	1b64      	subs	r4, r4, r5
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	2600      	movs	r6, #0
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	4d0b      	ldr	r5, [pc, #44]	@ (8003b2c <__libc_init_array+0x40>)
 8003afe:	4c0c      	ldr	r4, [pc, #48]	@ (8003b30 <__libc_init_array+0x44>)
 8003b00:	f000 fba8 	bl	8004254 <_init>
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	2600      	movs	r6, #0
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	0800431c 	.word	0x0800431c
 8003b28:	0800431c 	.word	0x0800431c
 8003b2c:	0800431c 	.word	0x0800431c
 8003b30:	08004320 	.word	0x08004320

08003b34 <__retarget_lock_acquire_recursive>:
 8003b34:	4770      	bx	lr

08003b36 <__retarget_lock_release_recursive>:
 8003b36:	4770      	bx	lr

08003b38 <memcpy>:
 8003b38:	440a      	add	r2, r1
 8003b3a:	4291      	cmp	r1, r2
 8003b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b40:	d100      	bne.n	8003b44 <memcpy+0xc>
 8003b42:	4770      	bx	lr
 8003b44:	b510      	push	{r4, lr}
 8003b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	d1f9      	bne.n	8003b46 <memcpy+0xe>
 8003b52:	bd10      	pop	{r4, pc}

08003b54 <_free_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4605      	mov	r5, r0
 8003b58:	2900      	cmp	r1, #0
 8003b5a:	d041      	beq.n	8003be0 <_free_r+0x8c>
 8003b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b60:	1f0c      	subs	r4, r1, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bfb8      	it	lt
 8003b66:	18e4      	addlt	r4, r4, r3
 8003b68:	f7ff ff62 	bl	8003a30 <__malloc_lock>
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <_free_r+0x90>)
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	b933      	cbnz	r3, 8003b80 <_free_r+0x2c>
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	6014      	str	r4, [r2, #0]
 8003b76:	4628      	mov	r0, r5
 8003b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b7c:	f7ff bf5e 	b.w	8003a3c <__malloc_unlock>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d908      	bls.n	8003b96 <_free_r+0x42>
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	1821      	adds	r1, r4, r0
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	bf01      	itttt	eq
 8003b8c:	6819      	ldreq	r1, [r3, #0]
 8003b8e:	685b      	ldreq	r3, [r3, #4]
 8003b90:	1809      	addeq	r1, r1, r0
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	e7ed      	b.n	8003b72 <_free_r+0x1e>
 8003b96:	461a      	mov	r2, r3
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b10b      	cbz	r3, 8003ba0 <_free_r+0x4c>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d9fa      	bls.n	8003b96 <_free_r+0x42>
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	1850      	adds	r0, r2, r1
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d10b      	bne.n	8003bc0 <_free_r+0x6c>
 8003ba8:	6820      	ldr	r0, [r4, #0]
 8003baa:	4401      	add	r1, r0
 8003bac:	1850      	adds	r0, r2, r1
 8003bae:	4283      	cmp	r3, r0
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	d1e0      	bne.n	8003b76 <_free_r+0x22>
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	6053      	str	r3, [r2, #4]
 8003bba:	4408      	add	r0, r1
 8003bbc:	6010      	str	r0, [r2, #0]
 8003bbe:	e7da      	b.n	8003b76 <_free_r+0x22>
 8003bc0:	d902      	bls.n	8003bc8 <_free_r+0x74>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	602b      	str	r3, [r5, #0]
 8003bc6:	e7d6      	b.n	8003b76 <_free_r+0x22>
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	1821      	adds	r1, r4, r0
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	bf04      	itt	eq
 8003bd0:	6819      	ldreq	r1, [r3, #0]
 8003bd2:	685b      	ldreq	r3, [r3, #4]
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	bf04      	itt	eq
 8003bd8:	1809      	addeq	r1, r1, r0
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	6054      	str	r4, [r2, #4]
 8003bde:	e7ca      	b.n	8003b76 <_free_r+0x22>
 8003be0:	bd38      	pop	{r3, r4, r5, pc}
 8003be2:	bf00      	nop
 8003be4:	20000374 	.word	0x20000374

08003be8 <__ssputs_r>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	688e      	ldr	r6, [r1, #8]
 8003bee:	461f      	mov	r7, r3
 8003bf0:	42be      	cmp	r6, r7
 8003bf2:	680b      	ldr	r3, [r1, #0]
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4690      	mov	r8, r2
 8003bfa:	d82d      	bhi.n	8003c58 <__ssputs_r+0x70>
 8003bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c04:	d026      	beq.n	8003c54 <__ssputs_r+0x6c>
 8003c06:	6965      	ldr	r5, [r4, #20]
 8003c08:	6909      	ldr	r1, [r1, #16]
 8003c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c0e:	eba3 0901 	sub.w	r9, r3, r1
 8003c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c16:	1c7b      	adds	r3, r7, #1
 8003c18:	444b      	add	r3, r9
 8003c1a:	106d      	asrs	r5, r5, #1
 8003c1c:	429d      	cmp	r5, r3
 8003c1e:	bf38      	it	cc
 8003c20:	461d      	movcc	r5, r3
 8003c22:	0553      	lsls	r3, r2, #21
 8003c24:	d527      	bpl.n	8003c76 <__ssputs_r+0x8e>
 8003c26:	4629      	mov	r1, r5
 8003c28:	f7ff fe82 	bl	8003930 <_malloc_r>
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	b360      	cbz	r0, 8003c8a <__ssputs_r+0xa2>
 8003c30:	6921      	ldr	r1, [r4, #16]
 8003c32:	464a      	mov	r2, r9
 8003c34:	f7ff ff80 	bl	8003b38 <memcpy>
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	6126      	str	r6, [r4, #16]
 8003c46:	6165      	str	r5, [r4, #20]
 8003c48:	444e      	add	r6, r9
 8003c4a:	eba5 0509 	sub.w	r5, r5, r9
 8003c4e:	6026      	str	r6, [r4, #0]
 8003c50:	60a5      	str	r5, [r4, #8]
 8003c52:	463e      	mov	r6, r7
 8003c54:	42be      	cmp	r6, r7
 8003c56:	d900      	bls.n	8003c5a <__ssputs_r+0x72>
 8003c58:	463e      	mov	r6, r7
 8003c5a:	6820      	ldr	r0, [r4, #0]
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	4641      	mov	r1, r8
 8003c60:	f000 faa8 	bl	80041b4 <memmove>
 8003c64:	68a3      	ldr	r3, [r4, #8]
 8003c66:	1b9b      	subs	r3, r3, r6
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	4433      	add	r3, r6
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	2000      	movs	r0, #0
 8003c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c76:	462a      	mov	r2, r5
 8003c78:	f000 fab6 	bl	80041e8 <_realloc_r>
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1e0      	bne.n	8003c44 <__ssputs_r+0x5c>
 8003c82:	6921      	ldr	r1, [r4, #16]
 8003c84:	4650      	mov	r0, sl
 8003c86:	f7ff ff65 	bl	8003b54 <_free_r>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	f8ca 3000 	str.w	r3, [sl]
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e7e9      	b.n	8003c72 <__ssputs_r+0x8a>
	...

08003ca0 <_svfiprintf_r>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	4698      	mov	r8, r3
 8003ca6:	898b      	ldrh	r3, [r1, #12]
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	b09d      	sub	sp, #116	@ 0x74
 8003cac:	4607      	mov	r7, r0
 8003cae:	460d      	mov	r5, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	d510      	bpl.n	8003cd6 <_svfiprintf_r+0x36>
 8003cb4:	690b      	ldr	r3, [r1, #16]
 8003cb6:	b973      	cbnz	r3, 8003cd6 <_svfiprintf_r+0x36>
 8003cb8:	2140      	movs	r1, #64	@ 0x40
 8003cba:	f7ff fe39 	bl	8003930 <_malloc_r>
 8003cbe:	6028      	str	r0, [r5, #0]
 8003cc0:	6128      	str	r0, [r5, #16]
 8003cc2:	b930      	cbnz	r0, 8003cd2 <_svfiprintf_r+0x32>
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	b01d      	add	sp, #116	@ 0x74
 8003cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd2:	2340      	movs	r3, #64	@ 0x40
 8003cd4:	616b      	str	r3, [r5, #20]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cda:	2320      	movs	r3, #32
 8003cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce4:	2330      	movs	r3, #48	@ 0x30
 8003ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e84 <_svfiprintf_r+0x1e4>
 8003cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cee:	f04f 0901 	mov.w	r9, #1
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cfa:	b10a      	cbz	r2, 8003d00 <_svfiprintf_r+0x60>
 8003cfc:	2a25      	cmp	r2, #37	@ 0x25
 8003cfe:	d1f9      	bne.n	8003cf4 <_svfiprintf_r+0x54>
 8003d00:	ebba 0b04 	subs.w	fp, sl, r4
 8003d04:	d00b      	beq.n	8003d1e <_svfiprintf_r+0x7e>
 8003d06:	465b      	mov	r3, fp
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f7ff ff6b 	bl	8003be8 <__ssputs_r>
 8003d12:	3001      	adds	r0, #1
 8003d14:	f000 80a7 	beq.w	8003e66 <_svfiprintf_r+0x1c6>
 8003d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d1a:	445a      	add	r2, fp
 8003d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 809f 	beq.w	8003e66 <_svfiprintf_r+0x1c6>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d32:	f10a 0a01 	add.w	sl, sl, #1
 8003d36:	9304      	str	r3, [sp, #16]
 8003d38:	9307      	str	r3, [sp, #28]
 8003d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d40:	4654      	mov	r4, sl
 8003d42:	2205      	movs	r2, #5
 8003d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d48:	484e      	ldr	r0, [pc, #312]	@ (8003e84 <_svfiprintf_r+0x1e4>)
 8003d4a:	f7fc fa49 	bl	80001e0 <memchr>
 8003d4e:	9a04      	ldr	r2, [sp, #16]
 8003d50:	b9d8      	cbnz	r0, 8003d8a <_svfiprintf_r+0xea>
 8003d52:	06d0      	lsls	r0, r2, #27
 8003d54:	bf44      	itt	mi
 8003d56:	2320      	movmi	r3, #32
 8003d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d5c:	0711      	lsls	r1, r2, #28
 8003d5e:	bf44      	itt	mi
 8003d60:	232b      	movmi	r3, #43	@ 0x2b
 8003d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d6c:	d015      	beq.n	8003d9a <_svfiprintf_r+0xfa>
 8003d6e:	9a07      	ldr	r2, [sp, #28]
 8003d70:	4654      	mov	r4, sl
 8003d72:	2000      	movs	r0, #0
 8003d74:	f04f 0c0a 	mov.w	ip, #10
 8003d78:	4621      	mov	r1, r4
 8003d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d7e:	3b30      	subs	r3, #48	@ 0x30
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	d94b      	bls.n	8003e1c <_svfiprintf_r+0x17c>
 8003d84:	b1b0      	cbz	r0, 8003db4 <_svfiprintf_r+0x114>
 8003d86:	9207      	str	r2, [sp, #28]
 8003d88:	e014      	b.n	8003db4 <_svfiprintf_r+0x114>
 8003d8a:	eba0 0308 	sub.w	r3, r0, r8
 8003d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	46a2      	mov	sl, r4
 8003d98:	e7d2      	b.n	8003d40 <_svfiprintf_r+0xa0>
 8003d9a:	9b03      	ldr	r3, [sp, #12]
 8003d9c:	1d19      	adds	r1, r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	9103      	str	r1, [sp, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfbb      	ittet	lt
 8003da6:	425b      	neglt	r3, r3
 8003da8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dac:	9307      	strge	r3, [sp, #28]
 8003dae:	9307      	strlt	r3, [sp, #28]
 8003db0:	bfb8      	it	lt
 8003db2:	9204      	strlt	r2, [sp, #16]
 8003db4:	7823      	ldrb	r3, [r4, #0]
 8003db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003db8:	d10a      	bne.n	8003dd0 <_svfiprintf_r+0x130>
 8003dba:	7863      	ldrb	r3, [r4, #1]
 8003dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dbe:	d132      	bne.n	8003e26 <_svfiprintf_r+0x186>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	9203      	str	r2, [sp, #12]
 8003dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dcc:	3402      	adds	r4, #2
 8003dce:	9305      	str	r3, [sp, #20]
 8003dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e94 <_svfiprintf_r+0x1f4>
 8003dd4:	7821      	ldrb	r1, [r4, #0]
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	4650      	mov	r0, sl
 8003dda:	f7fc fa01 	bl	80001e0 <memchr>
 8003dde:	b138      	cbz	r0, 8003df0 <_svfiprintf_r+0x150>
 8003de0:	9b04      	ldr	r3, [sp, #16]
 8003de2:	eba0 000a 	sub.w	r0, r0, sl
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	4082      	lsls	r2, r0
 8003dea:	4313      	orrs	r3, r2
 8003dec:	3401      	adds	r4, #1
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	4824      	ldr	r0, [pc, #144]	@ (8003e88 <_svfiprintf_r+0x1e8>)
 8003df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dfa:	2206      	movs	r2, #6
 8003dfc:	f7fc f9f0 	bl	80001e0 <memchr>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d036      	beq.n	8003e72 <_svfiprintf_r+0x1d2>
 8003e04:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <_svfiprintf_r+0x1ec>)
 8003e06:	bb1b      	cbnz	r3, 8003e50 <_svfiprintf_r+0x1b0>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	3307      	adds	r3, #7
 8003e0c:	f023 0307 	bic.w	r3, r3, #7
 8003e10:	3308      	adds	r3, #8
 8003e12:	9303      	str	r3, [sp, #12]
 8003e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e16:	4433      	add	r3, r6
 8003e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e1a:	e76a      	b.n	8003cf2 <_svfiprintf_r+0x52>
 8003e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e20:	460c      	mov	r4, r1
 8003e22:	2001      	movs	r0, #1
 8003e24:	e7a8      	b.n	8003d78 <_svfiprintf_r+0xd8>
 8003e26:	2300      	movs	r3, #0
 8003e28:	3401      	adds	r4, #1
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f04f 0c0a 	mov.w	ip, #10
 8003e32:	4620      	mov	r0, r4
 8003e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e38:	3a30      	subs	r2, #48	@ 0x30
 8003e3a:	2a09      	cmp	r2, #9
 8003e3c:	d903      	bls.n	8003e46 <_svfiprintf_r+0x1a6>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0c6      	beq.n	8003dd0 <_svfiprintf_r+0x130>
 8003e42:	9105      	str	r1, [sp, #20]
 8003e44:	e7c4      	b.n	8003dd0 <_svfiprintf_r+0x130>
 8003e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e7f0      	b.n	8003e32 <_svfiprintf_r+0x192>
 8003e50:	ab03      	add	r3, sp, #12
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	462a      	mov	r2, r5
 8003e56:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <_svfiprintf_r+0x1f0>)
 8003e58:	a904      	add	r1, sp, #16
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f3af 8000 	nop.w
 8003e60:	1c42      	adds	r2, r0, #1
 8003e62:	4606      	mov	r6, r0
 8003e64:	d1d6      	bne.n	8003e14 <_svfiprintf_r+0x174>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	065b      	lsls	r3, r3, #25
 8003e6a:	f53f af2d 	bmi.w	8003cc8 <_svfiprintf_r+0x28>
 8003e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e70:	e72c      	b.n	8003ccc <_svfiprintf_r+0x2c>
 8003e72:	ab03      	add	r3, sp, #12
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	462a      	mov	r2, r5
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <_svfiprintf_r+0x1f0>)
 8003e7a:	a904      	add	r1, sp, #16
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f000 f879 	bl	8003f74 <_printf_i>
 8003e82:	e7ed      	b.n	8003e60 <_svfiprintf_r+0x1c0>
 8003e84:	080042e0 	.word	0x080042e0
 8003e88:	080042ea 	.word	0x080042ea
 8003e8c:	00000000 	.word	0x00000000
 8003e90:	08003be9 	.word	0x08003be9
 8003e94:	080042e6 	.word	0x080042e6

08003e98 <_printf_common>:
 8003e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	4616      	mov	r6, r2
 8003e9e:	4698      	mov	r8, r3
 8003ea0:	688a      	ldr	r2, [r1, #8]
 8003ea2:	690b      	ldr	r3, [r1, #16]
 8003ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bfb8      	it	lt
 8003eac:	4613      	movlt	r3, r2
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	b10a      	cbz	r2, 8003ebe <_printf_common+0x26>
 8003eba:	3301      	adds	r3, #1
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	0699      	lsls	r1, r3, #26
 8003ec2:	bf42      	ittt	mi
 8003ec4:	6833      	ldrmi	r3, [r6, #0]
 8003ec6:	3302      	addmi	r3, #2
 8003ec8:	6033      	strmi	r3, [r6, #0]
 8003eca:	6825      	ldr	r5, [r4, #0]
 8003ecc:	f015 0506 	ands.w	r5, r5, #6
 8003ed0:	d106      	bne.n	8003ee0 <_printf_common+0x48>
 8003ed2:	f104 0a19 	add.w	sl, r4, #25
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	6832      	ldr	r2, [r6, #0]
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dc26      	bgt.n	8003f2e <_printf_common+0x96>
 8003ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	3b00      	subs	r3, #0
 8003ee8:	bf18      	it	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	0692      	lsls	r2, r2, #26
 8003eee:	d42b      	bmi.n	8003f48 <_printf_common+0xb0>
 8003ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	47c8      	blx	r9
 8003efa:	3001      	adds	r0, #1
 8003efc:	d01e      	beq.n	8003f3c <_printf_common+0xa4>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	f003 0306 	and.w	r3, r3, #6
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	bf02      	ittt	eq
 8003f0a:	68e5      	ldreq	r5, [r4, #12]
 8003f0c:	6833      	ldreq	r3, [r6, #0]
 8003f0e:	1aed      	subeq	r5, r5, r3
 8003f10:	68a3      	ldr	r3, [r4, #8]
 8003f12:	bf0c      	ite	eq
 8003f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f18:	2500      	movne	r5, #0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	bfc4      	itt	gt
 8003f1e:	1a9b      	subgt	r3, r3, r2
 8003f20:	18ed      	addgt	r5, r5, r3
 8003f22:	2600      	movs	r6, #0
 8003f24:	341a      	adds	r4, #26
 8003f26:	42b5      	cmp	r5, r6
 8003f28:	d11a      	bne.n	8003f60 <_printf_common+0xc8>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e008      	b.n	8003f40 <_printf_common+0xa8>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4652      	mov	r2, sl
 8003f32:	4641      	mov	r1, r8
 8003f34:	4638      	mov	r0, r7
 8003f36:	47c8      	blx	r9
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d103      	bne.n	8003f44 <_printf_common+0xac>
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	3501      	adds	r5, #1
 8003f46:	e7c6      	b.n	8003ed6 <_printf_common+0x3e>
 8003f48:	18e1      	adds	r1, r4, r3
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	2030      	movs	r0, #48	@ 0x30
 8003f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f52:	4422      	add	r2, r4
 8003f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	e7c7      	b.n	8003ef0 <_printf_common+0x58>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4622      	mov	r2, r4
 8003f64:	4641      	mov	r1, r8
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c8      	blx	r9
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d0e6      	beq.n	8003f3c <_printf_common+0xa4>
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7d9      	b.n	8003f26 <_printf_common+0x8e>
	...

08003f74 <_printf_i>:
 8003f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	7e0f      	ldrb	r7, [r1, #24]
 8003f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f7c:	2f78      	cmp	r7, #120	@ 0x78
 8003f7e:	4691      	mov	r9, r2
 8003f80:	4680      	mov	r8, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	469a      	mov	sl, r3
 8003f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f8a:	d807      	bhi.n	8003f9c <_printf_i+0x28>
 8003f8c:	2f62      	cmp	r7, #98	@ 0x62
 8003f8e:	d80a      	bhi.n	8003fa6 <_printf_i+0x32>
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	f000 80d2 	beq.w	800413a <_printf_i+0x1c6>
 8003f96:	2f58      	cmp	r7, #88	@ 0x58
 8003f98:	f000 80b9 	beq.w	800410e <_printf_i+0x19a>
 8003f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fa4:	e03a      	b.n	800401c <_printf_i+0xa8>
 8003fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003faa:	2b15      	cmp	r3, #21
 8003fac:	d8f6      	bhi.n	8003f9c <_printf_i+0x28>
 8003fae:	a101      	add	r1, pc, #4	@ (adr r1, 8003fb4 <_printf_i+0x40>)
 8003fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb4:	0800400d 	.word	0x0800400d
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08003f9d 	.word	0x08003f9d
 8003fc0:	08003f9d 	.word	0x08003f9d
 8003fc4:	08003f9d 	.word	0x08003f9d
 8003fc8:	08003f9d 	.word	0x08003f9d
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08003f9d 	.word	0x08003f9d
 8003fd4:	08003f9d 	.word	0x08003f9d
 8003fd8:	08003f9d 	.word	0x08003f9d
 8003fdc:	08003f9d 	.word	0x08003f9d
 8003fe0:	08004121 	.word	0x08004121
 8003fe4:	0800404b 	.word	0x0800404b
 8003fe8:	080040db 	.word	0x080040db
 8003fec:	08003f9d 	.word	0x08003f9d
 8003ff0:	08003f9d 	.word	0x08003f9d
 8003ff4:	08004143 	.word	0x08004143
 8003ff8:	08003f9d 	.word	0x08003f9d
 8003ffc:	0800404b 	.word	0x0800404b
 8004000:	08003f9d 	.word	0x08003f9d
 8004004:	08003f9d 	.word	0x08003f9d
 8004008:	080040e3 	.word	0x080040e3
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6032      	str	r2, [r6, #0]
 8004014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800401c:	2301      	movs	r3, #1
 800401e:	e09d      	b.n	800415c <_printf_i+0x1e8>
 8004020:	6833      	ldr	r3, [r6, #0]
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1d19      	adds	r1, r3, #4
 8004026:	6031      	str	r1, [r6, #0]
 8004028:	0606      	lsls	r6, r0, #24
 800402a:	d501      	bpl.n	8004030 <_printf_i+0xbc>
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	e003      	b.n	8004038 <_printf_i+0xc4>
 8004030:	0645      	lsls	r5, r0, #25
 8004032:	d5fb      	bpl.n	800402c <_printf_i+0xb8>
 8004034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004038:	2d00      	cmp	r5, #0
 800403a:	da03      	bge.n	8004044 <_printf_i+0xd0>
 800403c:	232d      	movs	r3, #45	@ 0x2d
 800403e:	426d      	negs	r5, r5
 8004040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004044:	4859      	ldr	r0, [pc, #356]	@ (80041ac <_printf_i+0x238>)
 8004046:	230a      	movs	r3, #10
 8004048:	e011      	b.n	800406e <_printf_i+0xfa>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	0608      	lsls	r0, r1, #24
 8004050:	f853 5b04 	ldr.w	r5, [r3], #4
 8004054:	d402      	bmi.n	800405c <_printf_i+0xe8>
 8004056:	0649      	lsls	r1, r1, #25
 8004058:	bf48      	it	mi
 800405a:	b2ad      	uxthmi	r5, r5
 800405c:	2f6f      	cmp	r7, #111	@ 0x6f
 800405e:	4853      	ldr	r0, [pc, #332]	@ (80041ac <_printf_i+0x238>)
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	bf14      	ite	ne
 8004064:	230a      	movne	r3, #10
 8004066:	2308      	moveq	r3, #8
 8004068:	2100      	movs	r1, #0
 800406a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800406e:	6866      	ldr	r6, [r4, #4]
 8004070:	60a6      	str	r6, [r4, #8]
 8004072:	2e00      	cmp	r6, #0
 8004074:	bfa2      	ittt	ge
 8004076:	6821      	ldrge	r1, [r4, #0]
 8004078:	f021 0104 	bicge.w	r1, r1, #4
 800407c:	6021      	strge	r1, [r4, #0]
 800407e:	b90d      	cbnz	r5, 8004084 <_printf_i+0x110>
 8004080:	2e00      	cmp	r6, #0
 8004082:	d04b      	beq.n	800411c <_printf_i+0x1a8>
 8004084:	4616      	mov	r6, r2
 8004086:	fbb5 f1f3 	udiv	r1, r5, r3
 800408a:	fb03 5711 	mls	r7, r3, r1, r5
 800408e:	5dc7      	ldrb	r7, [r0, r7]
 8004090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004094:	462f      	mov	r7, r5
 8004096:	42bb      	cmp	r3, r7
 8004098:	460d      	mov	r5, r1
 800409a:	d9f4      	bls.n	8004086 <_printf_i+0x112>
 800409c:	2b08      	cmp	r3, #8
 800409e:	d10b      	bne.n	80040b8 <_printf_i+0x144>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	07df      	lsls	r7, r3, #31
 80040a4:	d508      	bpl.n	80040b8 <_printf_i+0x144>
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	6861      	ldr	r1, [r4, #4]
 80040aa:	4299      	cmp	r1, r3
 80040ac:	bfde      	ittt	le
 80040ae:	2330      	movle	r3, #48	@ 0x30
 80040b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040b8:	1b92      	subs	r2, r2, r6
 80040ba:	6122      	str	r2, [r4, #16]
 80040bc:	f8cd a000 	str.w	sl, [sp]
 80040c0:	464b      	mov	r3, r9
 80040c2:	aa03      	add	r2, sp, #12
 80040c4:	4621      	mov	r1, r4
 80040c6:	4640      	mov	r0, r8
 80040c8:	f7ff fee6 	bl	8003e98 <_printf_common>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d14a      	bne.n	8004166 <_printf_i+0x1f2>
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	b004      	add	sp, #16
 80040d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	f043 0320 	orr.w	r3, r3, #32
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	4833      	ldr	r0, [pc, #204]	@ (80041b0 <_printf_i+0x23c>)
 80040e4:	2778      	movs	r7, #120	@ 0x78
 80040e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	6831      	ldr	r1, [r6, #0]
 80040ee:	061f      	lsls	r7, r3, #24
 80040f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80040f4:	d402      	bmi.n	80040fc <_printf_i+0x188>
 80040f6:	065f      	lsls	r7, r3, #25
 80040f8:	bf48      	it	mi
 80040fa:	b2ad      	uxthmi	r5, r5
 80040fc:	6031      	str	r1, [r6, #0]
 80040fe:	07d9      	lsls	r1, r3, #31
 8004100:	bf44      	itt	mi
 8004102:	f043 0320 	orrmi.w	r3, r3, #32
 8004106:	6023      	strmi	r3, [r4, #0]
 8004108:	b11d      	cbz	r5, 8004112 <_printf_i+0x19e>
 800410a:	2310      	movs	r3, #16
 800410c:	e7ac      	b.n	8004068 <_printf_i+0xf4>
 800410e:	4827      	ldr	r0, [pc, #156]	@ (80041ac <_printf_i+0x238>)
 8004110:	e7e9      	b.n	80040e6 <_printf_i+0x172>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f023 0320 	bic.w	r3, r3, #32
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	e7f6      	b.n	800410a <_printf_i+0x196>
 800411c:	4616      	mov	r6, r2
 800411e:	e7bd      	b.n	800409c <_printf_i+0x128>
 8004120:	6833      	ldr	r3, [r6, #0]
 8004122:	6825      	ldr	r5, [r4, #0]
 8004124:	6961      	ldr	r1, [r4, #20]
 8004126:	1d18      	adds	r0, r3, #4
 8004128:	6030      	str	r0, [r6, #0]
 800412a:	062e      	lsls	r6, r5, #24
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	d501      	bpl.n	8004134 <_printf_i+0x1c0>
 8004130:	6019      	str	r1, [r3, #0]
 8004132:	e002      	b.n	800413a <_printf_i+0x1c6>
 8004134:	0668      	lsls	r0, r5, #25
 8004136:	d5fb      	bpl.n	8004130 <_printf_i+0x1bc>
 8004138:	8019      	strh	r1, [r3, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	4616      	mov	r6, r2
 8004140:	e7bc      	b.n	80040bc <_printf_i+0x148>
 8004142:	6833      	ldr	r3, [r6, #0]
 8004144:	1d1a      	adds	r2, r3, #4
 8004146:	6032      	str	r2, [r6, #0]
 8004148:	681e      	ldr	r6, [r3, #0]
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	2100      	movs	r1, #0
 800414e:	4630      	mov	r0, r6
 8004150:	f7fc f846 	bl	80001e0 <memchr>
 8004154:	b108      	cbz	r0, 800415a <_printf_i+0x1e6>
 8004156:	1b80      	subs	r0, r0, r6
 8004158:	6060      	str	r0, [r4, #4]
 800415a:	6863      	ldr	r3, [r4, #4]
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	2300      	movs	r3, #0
 8004160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004164:	e7aa      	b.n	80040bc <_printf_i+0x148>
 8004166:	6923      	ldr	r3, [r4, #16]
 8004168:	4632      	mov	r2, r6
 800416a:	4649      	mov	r1, r9
 800416c:	4640      	mov	r0, r8
 800416e:	47d0      	blx	sl
 8004170:	3001      	adds	r0, #1
 8004172:	d0ad      	beq.n	80040d0 <_printf_i+0x15c>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	079b      	lsls	r3, r3, #30
 8004178:	d413      	bmi.n	80041a2 <_printf_i+0x22e>
 800417a:	68e0      	ldr	r0, [r4, #12]
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	4298      	cmp	r0, r3
 8004180:	bfb8      	it	lt
 8004182:	4618      	movlt	r0, r3
 8004184:	e7a6      	b.n	80040d4 <_printf_i+0x160>
 8004186:	2301      	movs	r3, #1
 8004188:	4632      	mov	r2, r6
 800418a:	4649      	mov	r1, r9
 800418c:	4640      	mov	r0, r8
 800418e:	47d0      	blx	sl
 8004190:	3001      	adds	r0, #1
 8004192:	d09d      	beq.n	80040d0 <_printf_i+0x15c>
 8004194:	3501      	adds	r5, #1
 8004196:	68e3      	ldr	r3, [r4, #12]
 8004198:	9903      	ldr	r1, [sp, #12]
 800419a:	1a5b      	subs	r3, r3, r1
 800419c:	42ab      	cmp	r3, r5
 800419e:	dcf2      	bgt.n	8004186 <_printf_i+0x212>
 80041a0:	e7eb      	b.n	800417a <_printf_i+0x206>
 80041a2:	2500      	movs	r5, #0
 80041a4:	f104 0619 	add.w	r6, r4, #25
 80041a8:	e7f5      	b.n	8004196 <_printf_i+0x222>
 80041aa:	bf00      	nop
 80041ac:	080042f1 	.word	0x080042f1
 80041b0:	08004302 	.word	0x08004302

080041b4 <memmove>:
 80041b4:	4288      	cmp	r0, r1
 80041b6:	b510      	push	{r4, lr}
 80041b8:	eb01 0402 	add.w	r4, r1, r2
 80041bc:	d902      	bls.n	80041c4 <memmove+0x10>
 80041be:	4284      	cmp	r4, r0
 80041c0:	4623      	mov	r3, r4
 80041c2:	d807      	bhi.n	80041d4 <memmove+0x20>
 80041c4:	1e43      	subs	r3, r0, #1
 80041c6:	42a1      	cmp	r1, r4
 80041c8:	d008      	beq.n	80041dc <memmove+0x28>
 80041ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041d2:	e7f8      	b.n	80041c6 <memmove+0x12>
 80041d4:	4402      	add	r2, r0
 80041d6:	4601      	mov	r1, r0
 80041d8:	428a      	cmp	r2, r1
 80041da:	d100      	bne.n	80041de <memmove+0x2a>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041e6:	e7f7      	b.n	80041d8 <memmove+0x24>

080041e8 <_realloc_r>:
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	4680      	mov	r8, r0
 80041ee:	4615      	mov	r5, r2
 80041f0:	460c      	mov	r4, r1
 80041f2:	b921      	cbnz	r1, 80041fe <_realloc_r+0x16>
 80041f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f8:	4611      	mov	r1, r2
 80041fa:	f7ff bb99 	b.w	8003930 <_malloc_r>
 80041fe:	b92a      	cbnz	r2, 800420c <_realloc_r+0x24>
 8004200:	f7ff fca8 	bl	8003b54 <_free_r>
 8004204:	2400      	movs	r4, #0
 8004206:	4620      	mov	r0, r4
 8004208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420c:	f000 f81a 	bl	8004244 <_malloc_usable_size_r>
 8004210:	4285      	cmp	r5, r0
 8004212:	4606      	mov	r6, r0
 8004214:	d802      	bhi.n	800421c <_realloc_r+0x34>
 8004216:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800421a:	d8f4      	bhi.n	8004206 <_realloc_r+0x1e>
 800421c:	4629      	mov	r1, r5
 800421e:	4640      	mov	r0, r8
 8004220:	f7ff fb86 	bl	8003930 <_malloc_r>
 8004224:	4607      	mov	r7, r0
 8004226:	2800      	cmp	r0, #0
 8004228:	d0ec      	beq.n	8004204 <_realloc_r+0x1c>
 800422a:	42b5      	cmp	r5, r6
 800422c:	462a      	mov	r2, r5
 800422e:	4621      	mov	r1, r4
 8004230:	bf28      	it	cs
 8004232:	4632      	movcs	r2, r6
 8004234:	f7ff fc80 	bl	8003b38 <memcpy>
 8004238:	4621      	mov	r1, r4
 800423a:	4640      	mov	r0, r8
 800423c:	f7ff fc8a 	bl	8003b54 <_free_r>
 8004240:	463c      	mov	r4, r7
 8004242:	e7e0      	b.n	8004206 <_realloc_r+0x1e>

08004244 <_malloc_usable_size_r>:
 8004244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004248:	1f18      	subs	r0, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfbc      	itt	lt
 800424e:	580b      	ldrlt	r3, [r1, r0]
 8004250:	18c0      	addlt	r0, r0, r3
 8004252:	4770      	bx	lr

08004254 <_init>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr

08004260 <_fini>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr
