
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00006198  2**0
                  CONTENTS
  4 .ARM          00000008  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c58  08004c58  00006198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08004c60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000198  08004df8  00006198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08004df8  00006494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a99b  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206e  00000000  00000000  00010b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000732  00000000  00000000  00013590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002755d  00000000  00000000  00013cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b622  00000000  00000000  0003b21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e99  00000000  00000000  00046841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001376da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d5c  00000000  00000000  00137720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0013a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000198 	.word	0x20000198
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004910 	.word	0x08004910

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	08004910 	.word	0x08004910

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 fb9e 	bl	80039b8 <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	@ (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	@ (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	@ (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f905 	bl	80004a4 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	@ (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	@ (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f984 	bl	80005b8 <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	@ (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	@ (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fc78 	bl	8001bbc <HAL_Delay>
	free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 fb79 	bl	80039c8 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	@ (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fa8f 	bl	8000804 <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	@ (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	@ (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	@ (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fb62 	bl	80039c8 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	@ (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	@ (8000460 <ble_init+0x1f0>)
 8000310:	f000 fa78 	bl	8000804 <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	@ (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	@ (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	@ (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	@ (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	@ (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 fb36 	bl	80039c8 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	@ (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2307      	movs	r3, #7
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	@ (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	@ (8000464 <ble_init+0x1f4>)
 8000368:	f000 fb12 	bl	8000990 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	@ (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fb22 	bl	80039c8 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	@ (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	@ (8000478 <ble_init+0x208>)
 8000390:	f000 fa38 	bl	8000804 <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	@ (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fb0b 	bl	80039c8 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	@ (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	@ (8000480 <ble_init+0x210>)
 80003be:	f000 fa21 	bl	8000804 <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 faf4 	bl	80039c8 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	@ (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	@ 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	@ (8000488 <ble_init+0x218>)
 80003ec:	f000 fa0a 	bl	8000804 <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fadd 	bl	80039c8 <free>

	//This will start the advertisment,
	setConnectable();
 800040e:	f000 f979 	bl	8000704 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	@ (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	@ (8000490 <ble_init+0x220>)
 8000418:	f000 fa40 	bl	800089c <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	@ (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	@ (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	@ (8000498 <ble_init+0x228>)
 8000428:	f000 fa70 	bl	800090c <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	@ (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	@ (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <ble_init+0x230>)
 8000438:	f000 fa68 	bl	800090c <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800043c:	bf00      	nop
}
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200002cc 	.word	0x200002cc
 8000448:	200002d0 	.word	0x200002d0
 800044c:	20000000 	.word	0x20000000
 8000450:	200002ca 	.word	0x200002ca
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	200001b4 	.word	0x200001b4
 8000468:	200001b8 	.word	0x200001b8
 800046c:	200001bc 	.word	0x200001bc
 8000470:	200000f4 	.word	0x200000f4
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	20000070 	.word	0x20000070
 8000488:	2000004c 	.word	0x2000004c
 800048c:	200002c0 	.word	0x200002c0
 8000490:	200000fc 	.word	0x200000fc
 8000494:	200002c8 	.word	0x200002c8
 8000498:	2000011c 	.word	0x2000011c
 800049c:	200002c4 	.word	0x200002c4
 80004a0:	2000010c 	.word	0x2000010c

080004a4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	@ 0x30
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ae:	4a3d      	ldr	r2, [pc, #244]	@ (80005a4 <fetchBleEvent+0x100>)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004be:	2140      	movs	r1, #64	@ 0x40
 80004c0:	4839      	ldr	r0, [pc, #228]	@ (80005a8 <fetchBleEvent+0x104>)
 80004c2:	f001 fe5b 	bl	800217c <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d065      	beq.n	8000598 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 fb75 	bl	8001bbc <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d8:	4834      	ldr	r0, [pc, #208]	@ (80005ac <fetchBleEvent+0x108>)
 80004da:	f001 fe67 	bl	80021ac <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0118 	add.w	r1, r7, #24
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2305      	movs	r3, #5
 80004ec:	4830      	ldr	r0, [pc, #192]	@ (80005b0 <fetchBleEvent+0x10c>)
 80004ee:	f002 fedd 	bl	80032ac <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f8:	482c      	ldr	r0, [pc, #176]	@ (80005ac <fetchBleEvent+0x108>)
 80004fa:	f001 fe57 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f001 fb5c 	bl	8001bbc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	4828      	ldr	r0, [pc, #160]	@ (80005ac <fetchBleEvent+0x108>)
 800050c:	f001 fe4e 	bl	80021ac <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000510:	f107 0210 	add.w	r2, r7, #16
 8000514:	f107 0118 	add.w	r1, r7, #24
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2305      	movs	r3, #5
 800051e:	4824      	ldr	r0, [pc, #144]	@ (80005b0 <fetchBleEvent+0x10c>)
 8000520:	f002 fec4 	bl	80032ac <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	461a      	mov	r2, r3
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd01      	ble.n	8000540 <fetchBleEvent+0x9c>
	  dataSize=size;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd1f      	ble.n	8000586 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e00d      	b.n	8000568 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <fetchBleEvent+0x10c>)
 800055e:	f002 fea5 	bl	80032ac <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	3301      	adds	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3a      	ldr	r2, [r7, #32]
 800056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	dbed      	blt.n	800054c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <fetchBleEvent+0x108>)
 8000578:	f001 fe18 	bl	80021ac <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <fetchBleEvent+0x110>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e00a      	b.n	800059c <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <fetchBleEvent+0x108>)
 800058e:	f001 fe0d 	bl	80021ac <HAL_GPIO_WritePin>
        return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e001      	b.n	800059c <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000598:	f06f 0301 	mvn.w	r3, #1
  }
}
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	@ 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08004928 	.word	0x08004928
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	200002d4 	.word	0x200002d4
 80005b4:	200002d0 	.word	0x200002d0

080005b8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int j=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00f      	b.n	80005ee <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68b9      	ldr	r1, [r7, #8]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d002      	beq.n	80005e8 <checkEventResp+0x30>
			return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e007      	b.n	80005f8 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <checkEventResp+0x16>
		}
	}

return BLE_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800060e:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <sendCommand+0x88>)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	481a      	ldr	r0, [pc, #104]	@ (8000690 <sendCommand+0x8c>)
 8000626:	f001 fdc1 	bl	80021ac <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2305      	movs	r3, #5
 8000638:	4816      	ldr	r0, [pc, #88]	@ (8000694 <sendCommand+0x90>)
 800063a:	f002 fe37 	bl	80032ac <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	7a7a      	ldrb	r2, [r7, #9]
 8000644:	4313      	orrs	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db09      	blt.n	8000664 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480e      	ldr	r0, [pc, #56]	@ (8000694 <sendCommand+0x90>)
 800065a:	f002 fcb2 	bl	8002fc2 <HAL_SPI_Transmit>
		result=0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e002      	b.n	800066a <sendCommand+0x66>
	  }else{
		result=-1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <sendCommand+0x8c>)
 8000672:	f001 fd9b 	bl	80021ac <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <sendCommand+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1cd      	bne.n	800061e <sendCommand+0x1a>

}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08004930 	.word	0x08004930
 8000690:	48000c00 	.word	0x48000c00
 8000694:	200002d4 	.word	0x200002d4
 8000698:	200002d0 	.word	0x200002d0

0800069c <catchBLE>:

void catchBLE(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80006a2:	217f      	movs	r1, #127	@ 0x7f
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <catchBLE+0x58>)
 80006a6:	f7ff fefd 	bl	80004a4 <fetchBleEvent>
 80006aa:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11b      	bne.n	80006ea <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006b2:	2203      	movs	r2, #3
 80006b4:	4910      	ldr	r1, [pc, #64]	@ (80006f8 <catchBLE+0x5c>)
 80006b6:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <catchBLE+0x58>)
 80006b8:	f7ff ff7e 	bl	80005b8 <checkEventResp>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 80006c2:	f000 f81f 	bl	8000704 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006c6:	2205      	movs	r2, #5
 80006c8:	490c      	ldr	r1, [pc, #48]	@ (80006fc <catchBLE+0x60>)
 80006ca:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <catchBLE+0x58>)
 80006cc:	f7ff ff74 	bl	80005b8 <checkEventResp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <catchBLE+0x58>)
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	b21a      	sxth	r2, r3
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <catchBLE+0x64>)
 80006de:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <catchBLE+0x58>)
 80006e2:	799b      	ldrb	r3, [r3, #6]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <catchBLE+0x64>)
 80006e8:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200001c0 	.word	0x200001c0
 80006f8:	200000e8 	.word	0x200000e8
 80006fc:	200000ec 	.word	0x200000ec
 8000700:	2000012c 	.word	0x2000012c

08000704 <setConnectable>:

void setConnectable(){
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800070a:	200c      	movs	r0, #12
 800070c:	f003 f954 	bl	80039b8 <malloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4a36      	ldr	r2, [pc, #216]	@ (80007f0 <setConnectable+0xec>)
 8000718:	6810      	ldr	r0, [r2, #0]
 800071a:	6018      	str	r0, [r3, #0]
 800071c:	8891      	ldrh	r1, [r2, #4]
 800071e:	7992      	ldrb	r2, [r2, #6]
 8000720:	8099      	strh	r1, [r3, #4]
 8000722:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3308      	adds	r3, #8
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3309      	adds	r3, #9
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	330a      	adds	r3, #10
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	330b      	adds	r3, #11
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3307      	adds	r3, #7
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <setConnectable+0xf0>)
 800074e:	2208      	movs	r2, #8
 8000750:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000752:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <setConnectable+0xf0>)
 8000754:	2215      	movs	r2, #21
 8000756:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000758:	2019      	movs	r0, #25
 800075a:	f003 f92d 	bl	80039b8 <malloc>
 800075e:	4603      	mov	r3, r0
 8000760:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4a23      	ldr	r2, [pc, #140]	@ (80007f4 <setConnectable+0xf0>)
 8000766:	461c      	mov	r4, r3
 8000768:	4613      	mov	r3, r2
 800076a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800076c:	6020      	str	r0, [r4, #0]
 800076e:	6061      	str	r1, [r4, #4]
 8000770:	60a2      	str	r2, [r4, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	330d      	adds	r3, #13
 800077a:	220c      	movs	r2, #12
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fc6d 	bl	800405e <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000784:	2119      	movs	r1, #25
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f7ff ff3c 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 800078c:	2007      	movs	r0, #7
 800078e:	f003 f913 	bl	80039b8 <malloc>
 8000792:	4603      	mov	r3, r0
 8000794:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000796:	bf00      	nop
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <setConnectable+0xf4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0fb      	beq.n	8000798 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 80007a0:	2107      	movs	r1, #7
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fe7e 	bl	80004a4 <fetchBleEvent>
 80007a8:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10f      	bne.n	80007d0 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007b0:	2207      	movs	r2, #7
 80007b2:	4912      	ldr	r1, [pc, #72]	@ (80007fc <setConnectable+0xf8>)
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff feff 	bl	80005b8 <checkEventResp>
 80007ba:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d106      	bne.n	80007d0 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <setConnectable+0xfc>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <setConnectable+0xfc>)
 80007ce:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f003 f8f9 	bl	80039c8 <free>
	   free(discoverableCommand);
 80007d6:	68b8      	ldr	r0, [r7, #8]
 80007d8:	f003 f8f6 	bl	80039c8 <free>
	   free(localname);
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f003 f8f3 	bl	80039c8 <free>
	   HAL_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f001 f9ea 	bl	8001bbc <HAL_Delay>
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	200000f4 	.word	0x200000f4
 80007f4:	20000078 	.word	0x20000078
 80007f8:	200002d0 	.word	0x200002d0
 80007fc:	20000088 	.word	0x20000088
 8000800:	200002ca 	.word	0x200002ca

08000804 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fef5 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	005a      	lsls	r2, r3, #1
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f8c8 	bl	80039b8 <malloc>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <BLE_command+0x90>)
 800082e:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000834:	e007      	b.n	8000846 <BLE_command+0x42>
		   contatore++;
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000842:	4293      	cmp	r3, r2
 8000844:	dc07      	bgt.n	8000856 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000846:	2140      	movs	r1, #64	@ 0x40
 8000848:	4813      	ldr	r0, [pc, #76]	@ (8000898 <BLE_command+0x94>)
 800084a:	f001 fc97 	bl	800217c <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f0      	beq.n	8000836 <BLE_command+0x32>
 8000854:	e000      	b.n	8000858 <BLE_command+0x54>
			   break;
 8000856:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <BLE_command+0x90>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	005a      	lsls	r2, r3, #1
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4619      	mov	r1, r3
 8000866:	f7ff fe1d 	bl	80004a4 <fetchBleEvent>
 800086a:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d107      	bne.n	8000882 <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <BLE_command+0x90>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe9c 	bl	80005b8 <checkEventResp>
 8000880:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000882:	200a      	movs	r0, #10
 8000884:	f001 f99a 	bl	8001bbc <HAL_Delay>


	return response;
 8000888:	697b      	ldr	r3, [r7, #20]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002cc 	.word	0x200002cc
 8000898:	48001000 	.word	0x48001000

0800089c <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <addService+0x60>)
 80008aa:	2210      	movs	r2, #16
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 fbd5 	bl	800405e <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <addService+0x64>)
 80008ba:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008bc:	2301      	movs	r3, #1
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2307      	movs	r3, #7
 80008c2:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <addService+0x68>)
 80008c4:	2117      	movs	r1, #23
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <addService+0x64>)
 80008c8:	f7ff ff9c 	bl	8000804 <BLE_command>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10a      	bne.n	80008e8 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <addService+0x6c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	79da      	ldrb	r2, [r3, #7]
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <addService+0x6c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	7a12      	ldrb	r2, [r2, #8]
 80008e6:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <addService+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f86b 	bl	80039c8 <free>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000095 	.word	0x20000095
 8000900:	20000090 	.word	0x20000090
 8000904:	200000a8 	.word	0x200000a8
 8000908:	200002cc 	.word	0x200002cc

0800090c <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af02      	add	r7, sp, #8
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <addCharacteristic+0x74>)
 800091c:	2210      	movs	r2, #16
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fb9c 	bl	800405e <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <addCharacteristic+0x78>)
 800092c:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	785a      	ldrb	r2, [r3, #1]
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <addCharacteristic+0x78>)
 8000934:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000936:	4a13      	ldr	r2, [pc, #76]	@ (8000984 <addCharacteristic+0x78>)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 800093c:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <addCharacteristic+0x78>)
 800093e:	7e3b      	ldrb	r3, [r7, #24]
 8000940:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000942:	2301      	movs	r3, #1
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2307      	movs	r3, #7
 8000948:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <addCharacteristic+0x7c>)
 800094a:	211e      	movs	r1, #30
 800094c:	480d      	ldr	r0, [pc, #52]	@ (8000984 <addCharacteristic+0x78>)
 800094e:	f7ff ff59 	bl	8000804 <BLE_command>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <addCharacteristic+0x80>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	79da      	ldrb	r2, [r3, #7]
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <addCharacteristic+0x80>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	3301      	adds	r3, #1
 800096a:	7a12      	ldrb	r2, [r2, #8]
 800096c:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <addCharacteristic+0x80>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f003 f828 	bl	80039c8 <free>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000b7 	.word	0x200000b7
 8000984:	200000b0 	.word	0x200000b0
 8000988:	200000d0 	.word	0x200000d0
 800098c:	200002cc 	.word	0x200002cc

08000990 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3306      	adds	r3, #6
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <updateCharValue+0x9c>)
 80009a8:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <updateCharValue+0x9c>)
 80009b0:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	785a      	ldrb	r2, [r3, #1]
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <updateCharValue+0x9c>)
 80009b8:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <updateCharValue+0x9c>)
 80009c0:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <updateCharValue+0x9c>)
 80009c8:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <updateCharValue+0x9c>)
 80009d0:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <updateCharValue+0x9c>)
 80009d8:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	330a      	adds	r3, #10
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 ffea 	bl	80039b8 <malloc>
 80009e4:	4603      	mov	r3, r0
 80009e6:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 80009e8:	220a      	movs	r2, #10
 80009ea:	4910      	ldr	r1, [pc, #64]	@ (8000a2c <updateCharValue+0x9c>)
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	f003 fb36 	bl	800405e <memcpy>
	memcpy(commandComplete+10,data,size);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	330a      	adds	r3, #10
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	6a39      	ldr	r1, [r7, #32]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fb2f 	bl	800405e <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f103 010a 	add.w	r1, r3, #10
 8000a06:	2300      	movs	r3, #0
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <updateCharValue+0xa0>)
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff fef8 	bl	8000804 <BLE_command>

	free(commandComplete);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f002 ffd7 	bl	80039c8 <free>
	free(rxEvent);
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <updateCharValue+0xa4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 ffd2 	bl	80039c8 <free>
}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	200000d0 	.word	0x200000d0
 8000a34:	200002cc 	.word	0x200002cc

08000a38 <i2c_init>:

#include "i2c.h"
#define I2C_SPEED 400000
#define I2C_TIMEOUT 1000000
void i2c_init() {
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	// trying to configure noise filters then enable timer for I2C by setting the PE bit of the register
	// wanna change the baud rate to 400 khz
	// configure the pins on the MCU so they are connected to the correct I2C peripheral rather than operating as GPIO pins

	// Enable GPIOB clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <i2c_init+0x80>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <i2c_init+0x80>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// enable i2c2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <i2c_init+0x80>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <i2c_init+0x80>)
 8000a4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set PB10 and PB11 to Alternate Function mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11); // Clear mode bits
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <i2c_init+0x84>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <i2c_init+0x84>)
 8000a5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000a5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1); // Set to Alternate Function mode
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <i2c_init+0x84>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <i2c_init+0x84>)
 8000a66:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000a6a:	6013      	str	r3, [r2, #0]

	// Set PB10 and PB11 to Open-Drain Output
	GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <i2c_init+0x84>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <i2c_init+0x84>)
 8000a72:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000a76:	6053      	str	r3, [r2, #4]

	// Enable Pull-Up resistors for PB10 and PB11
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11); // Clear
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <i2c_init+0x84>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <i2c_init+0x84>)
 8000a7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000a82:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0); // Enable pull-ups
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <i2c_init+0x84>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	@ (8000abc <i2c_init+0x84>)
 8000a8a:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000a8e:	60d3      	str	r3, [r2, #12]

	// Configure PB10 and PB11 to use Alternate Function 4 (AF4) for I2C2
	//GPIOB->AFRH &= ~((0xF << GPIO_AFRH_AFSEL10_Pos) | (0xF << GPIO_AFRH_AFSEL11_Pos)); // Clear AFR bits
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL10_Pos) | (4 << GPIO_AFRH_AFSEL11_Pos));     // Set AF4 for PB10, PB11
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <i2c_init+0x84>)
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <i2c_init+0x84>)
 8000a96:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000a9a:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C2->TIMINGR = 0x10909CEC;	// sets up timing for communication, that values is for 100khz
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <i2c_init+0x88>)
 8000a9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <i2c_init+0x8c>)
 8000aa0:	611a      	str	r2, [r3, #16]
	I2C2->CR1 |= I2C_CR1_PE; // Enable I2C2
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <i2c_init+0x88>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <i2c_init+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6013      	str	r3, [r2, #0]


}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	10909cec 	.word	0x10909cec

08000ac8 <i2c_transaction>:
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	603a      	str	r2, [r7, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	71bb      	strb	r3, [r7, #6]
 8000ada:	4613      	mov	r3, r2
 8000adc:	717b      	strb	r3, [r7, #5]
	volatile uint32_t timeout;

	    // Clear any existing errors
	    I2C2->ICR = I2C_ICR_NACKCF | I2C_ICR_STOPCF | I2C_ICR_BERRCF;
 8000ade:	4b6e      	ldr	r3, [pc, #440]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000ae0:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000ae4:	61da      	str	r2, [r3, #28]

	    printf("Starting I2C transaction - ISR: 0x%lx, CR2: 0x%lx\n", I2C2->ISR, I2C2->CR2);
 8000ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a6b      	ldr	r2, [pc, #428]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000aec:	6852      	ldr	r2, [r2, #4]
 8000aee:	4619      	mov	r1, r3
 8000af0:	486a      	ldr	r0, [pc, #424]	@ (8000c9c <i2c_transaction+0x1d4>)
 8000af2:	f003 f8e1 	bl	8003cb8 <iprintf>

	    if (dir == 0) {  // Writing data
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d179      	bne.n	8000bf0 <i2c_transaction+0x128>
	        // Configure the transfer
	        I2C2->CR2 = 0; // Clear CR2 first
 8000afc:	4b66      	ldr	r3, [pc, #408]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
	        I2C2->CR2 = (address << 1) | (len << 16) | I2C_CR2_START;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	005a      	lsls	r2, r3, #1
 8000b06:	797b      	ldrb	r3, [r7, #5]
 8000b08:	041b      	lsls	r3, r3, #16
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	4a62      	ldr	r2, [pc, #392]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b12:	6053      	str	r3, [r2, #4]

	        printf("Write CR2 configured: 0x%lx\n", I2C2->CR2);
 8000b14:	4b60      	ldr	r3, [pc, #384]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4861      	ldr	r0, [pc, #388]	@ (8000ca0 <i2c_transaction+0x1d8>)
 8000b1c:	f003 f8cc 	bl	8003cb8 <iprintf>

	        for (uint8_t i = 0; i < len; i++) {
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e043      	b.n	8000bae <i2c_transaction+0xe6>
	            timeout = I2C_TIMEOUT;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca4 <i2c_transaction+0x1dc>)
 8000b28:	60bb      	str	r3, [r7, #8]
	            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000b2a:	e028      	b.n	8000b7e <i2c_transaction+0xb6>
	                if (I2C2->ISR & I2C_ISR_NACKF) {
 8000b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00d      	beq.n	8000b54 <i2c_transaction+0x8c>
	                    printf("Error: NACK received. ISR=0x%lx\n", I2C2->ISR);
 8000b38:	4b57      	ldr	r3, [pc, #348]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	485a      	ldr	r0, [pc, #360]	@ (8000ca8 <i2c_transaction+0x1e0>)
 8000b40:	f003 f8ba 	bl	8003cb8 <iprintf>
	                    I2C2->CR2 |= I2C_CR2_STOP;
 8000b44:	4b54      	ldr	r3, [pc, #336]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4a53      	ldr	r2, [pc, #332]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4e:	6053      	str	r3, [r2, #4]
	                    return 6;
 8000b50:	2306      	movs	r3, #6
 8000b52:	e09c      	b.n	8000c8e <i2c_transaction+0x1c6>
	                }

	                if (--timeout == 0) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10f      	bne.n	8000b7e <i2c_transaction+0xb6>
	                    printf("Error 1: TXIS timeout. ISR=0x%lx, CR2=0x%lx\n",
	                           I2C2->ISR, I2C2->CR2);
 8000b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a4d      	ldr	r2, [pc, #308]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b64:	6852      	ldr	r2, [r2, #4]
	                    printf("Error 1: TXIS timeout. ISR=0x%lx, CR2=0x%lx\n",
 8000b66:	4619      	mov	r1, r3
 8000b68:	4850      	ldr	r0, [pc, #320]	@ (8000cac <i2c_transaction+0x1e4>)
 8000b6a:	f003 f8a5 	bl	8003cb8 <iprintf>
	                    I2C2->CR2 |= I2C_CR2_STOP;
 8000b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a49      	ldr	r2, [pc, #292]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6053      	str	r3, [r2, #4]
	                    return 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e087      	b.n	8000c8e <i2c_transaction+0x1c6>
	            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000b7e:	4b46      	ldr	r3, [pc, #280]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0d0      	beq.n	8000b2c <i2c_transaction+0x64>
	                }
	            }
	            I2C2->TXDR = data[i];
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000b94:	629a      	str	r2, [r3, #40]	@ 0x28
	            printf("Wrote byte %d: 0x%02x\n", i, data[i]);
 8000b96:	7bf9      	ldrb	r1, [r7, #15]
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4843      	ldr	r0, [pc, #268]	@ (8000cb0 <i2c_transaction+0x1e8>)
 8000ba4:	f003 f888 	bl	8003cb8 <iprintf>
	        for (uint8_t i = 0; i < len; i++) {
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3b7      	bcc.n	8000b26 <i2c_transaction+0x5e>
	        }

	        timeout = I2C_TIMEOUT;
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca4 <i2c_transaction+0x1dc>)
 8000bb8:	60bb      	str	r3, [r7, #8]
	        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8000bba:	e00c      	b.n	8000bd6 <i2c_transaction+0x10e>
	            if (--timeout == 0) {
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d107      	bne.n	8000bd6 <i2c_transaction+0x10e>
	                printf("Error 2: TC timeout. ISR=0x%lx\n", I2C2->ISR);
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4839      	ldr	r0, [pc, #228]	@ (8000cb4 <i2c_transaction+0x1ec>)
 8000bce:	f003 f873 	bl	8003cb8 <iprintf>
	                return 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e05b      	b.n	8000c8e <i2c_transaction+0x1c6>
	        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0ec      	beq.n	8000bbc <i2c_transaction+0xf4>
	            }
	        }

	        I2C2->CR2 |= I2C_CR2_STOP;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bec:	6053      	str	r3, [r2, #4]
 8000bee:	e04d      	b.n	8000c8c <i2c_transaction+0x1c4>
	    }
	else {	// 1 for reading data
		I2C2->CR2 = ((address << 1) & I2C_CR2_SADD_Msk) | I2C_CR2_RD_WRN; // Set the device address and indicate a read
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf8:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfe:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START; // Set how many bytes we’re reading and start the communication
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	041b      	lsls	r3, r3, #16
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	4a23      	ldr	r2, [pc, #140]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c10:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
 8000c16:	e01c      	b.n	8000c52 <i2c_transaction+0x18a>
			timeout = I2C_TIMEOUT;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <i2c_transaction+0x1dc>)
 8000c1a:	60bb      	str	r3, [r7, #8]
			while (!(I2C2->ISR & I2C_ISR_RXNE)) { // Wait until data is received
 8000c1c:	e009      	b.n	8000c32 <i2c_transaction+0x16a>
				if (--timeout == 0) {
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <i2c_transaction+0x16a>
					printf("error 3");
 8000c28:	4823      	ldr	r0, [pc, #140]	@ (8000cb8 <i2c_transaction+0x1f0>)
 8000c2a:	f003 f845 	bl	8003cb8 <iprintf>
					return 3; // If we wait too long, return an error
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e02d      	b.n	8000c8e <i2c_transaction+0x1c6>
			while (!(I2C2->ISR & I2C_ISR_RXNE)) { // Wait until data is received
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0ef      	beq.n	8000c1e <i2c_transaction+0x156>
				}
			}
			data[i] = I2C2->RXDR; // Store the received data
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2ca      	uxtb	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	73bb      	strb	r3, [r7, #14]
 8000c52:	7bba      	ldrb	r2, [r7, #14]
 8000c54:	797b      	ldrb	r3, [r7, #5]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3de      	bcc.n	8000c18 <i2c_transaction+0x150>
		}

		timeout = I2C_TIMEOUT;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <i2c_transaction+0x1dc>)
 8000c5c:	60bb      	str	r3, [r7, #8]
		while (!(I2C2->ISR & I2C_ISR_TC)) { // Wait until the transfer is complete
 8000c5e:	e009      	b.n	8000c74 <i2c_transaction+0x1ac>
			if (--timeout == 0){
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d104      	bne.n	8000c74 <i2c_transaction+0x1ac>
				printf("error 4");
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <i2c_transaction+0x1f4>)
 8000c6c:	f003 f824 	bl	8003cb8 <iprintf>
				return 4; // If we wait too long, return an error
 8000c70:	2304      	movs	r3, #4
 8000c72:	e00c      	b.n	8000c8e <i2c_transaction+0x1c6>
		while (!(I2C2->ISR & I2C_ISR_TC)) { // Wait until the transfer is complete
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0ef      	beq.n	8000c60 <i2c_transaction+0x198>
			}
		}

		I2C2->CR2 |= I2C_CR2_STOP; // Send a stop condition to end the communication
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <i2c_transaction+0x1d0>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8a:	6053      	str	r3, [r2, #4]
	}

	return 0; // If we got here, everything worked!
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40005800 	.word	0x40005800
 8000c9c:	08004938 	.word	0x08004938
 8000ca0:	0800496c 	.word	0x0800496c
 8000ca4:	000f4240 	.word	0x000f4240
 8000ca8:	0800498c 	.word	0x0800498c
 8000cac:	080049b0 	.word	0x080049b0
 8000cb0:	080049e0 	.word	0x080049e0
 8000cb4:	080049f8 	.word	0x080049f8
 8000cb8:	08004a18 	.word	0x08004a18
 8000cbc:	08004a20 	.word	0x08004a20

08000cc0 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	/* Enable the clock for GPIOA and GPIOB */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // Enable clock for GPIOA
 8000cc4:	4b32      	ldr	r3, [pc, #200]	@ (8000d90 <leds_init+0xd0>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a31      	ldr	r2, [pc, #196]	@ (8000d90 <leds_init+0xd0>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable clock for GPIOB
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <leds_init+0xd0>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8000d90 <leds_init+0xd0>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure PA5 as an output by clearing all bits and setting the mode */
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000cdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ce6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000cea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000cec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000cfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d06:	f023 0320 	bic.w	r3, r3, #32
 8000d0a:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d1a:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d26:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d2a:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d36:	f023 0320 	bic.w	r3, r3, #32
 8000d3a:	6153      	str	r3, [r2, #20]

	GPIOB->MODER &= ~GPIO_MODER_MODE14;     // Clear mode bits
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <leds_init+0xd4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <leds_init+0xd4>)
 8000d42:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d46:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE14_0;    // Set PB14 as output
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <leds_init+0xd4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <leds_init+0xd4>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;     // Push-pull output
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <leds_init+0xd4>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <leds_init+0xd4>)
 8000d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d5e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;     // No pull-up/pull-down
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <leds_init+0xd4>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <leds_init+0xd4>)
 8000d66:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d6a:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos); // Low speed mode
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <leds_init+0xd4>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <leds_init+0xd4>)
 8000d72:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000d76:	6093      	str	r3, [r2, #8]
	GPIOB->ODR &= ~GPIO_ODR_OD14;           // Turn off LED2 (PB14)
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <leds_init+0xd4>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <leds_init+0xd4>)
 8000d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d82:	6153      	str	r3, [r2, #20]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000400 	.word	0x48000400

08000d98 <leds_set>:

void leds_set(uint8_t led)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  // TODO implement this
	if((led & 0xFF) == 0x01){
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <leds_set+0x22>
		GPIOA->ODR |= GPIO_ODR_OD5; // Set PA5 to turn on LED1
 8000da8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~GPIO_ODR_OD5; // Set PA5 to turn off LED1
	}
	else if(((led & 0xFF) == 0x04)){
		GPIOB->ODR &= ~GPIO_ODR_OD14; // Clear PB14 to turn off LED2
	}
}
 8000db8:	e01e      	b.n	8000df8 <leds_set+0x60>
	else if((led & 0xFF) == 0x02){
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d106      	bne.n	8000dce <leds_set+0x36>
		GPIOB->ODR |= GPIO_ODR_OD14;  // Set PB14 to turn on LED2
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <leds_set+0x6c>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <leds_set+0x6c>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dca:	6153      	str	r3, [r2, #20]
}
 8000dcc:	e014      	b.n	8000df8 <leds_set+0x60>
	else if((led & 0xFF) == 0x03){
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d108      	bne.n	8000de6 <leds_set+0x4e>
		GPIOA->ODR &= ~GPIO_ODR_OD5; // Set PA5 to turn off LED1
 8000dd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dde:	f023 0320 	bic.w	r3, r3, #32
 8000de2:	6153      	str	r3, [r2, #20]
}
 8000de4:	e008      	b.n	8000df8 <leds_set+0x60>
	else if(((led & 0xFF) == 0x04)){
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d105      	bne.n	8000df8 <leds_set+0x60>
		GPIOB->ODR &= ~GPIO_ODR_OD14; // Clear PB14 to turn off LED2
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <leds_set+0x6c>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <leds_set+0x6c>)
 8000df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000df6:	6153      	str	r3, [r2, #20]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	48000400 	.word	0x48000400

08000e08 <lsm6dsl_init>:
    }

    printf("LSM6DSL Initialized Successfully!\n");
}
*/
void lsm6dsl_init() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
    uint8_t who_am_i = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
    uint8_t reg = LSM6DSL_WHO_AM_I;
 8000e12:	230f      	movs	r3, #15
 8000e14:	73bb      	strb	r3, [r7, #14]

    // Add a small delay before starting
//    for (volatile int i = 0; i < 100000; i++);

    // Verify the device by reading WHO_AM_I
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, &reg, 1) != 0) {
 8000e16:	f107 020e 	add.w	r2, r7, #14
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	206a      	movs	r0, #106	@ 0x6a
 8000e20:	f7ff fe52 	bl	8000ac8 <i2c_transaction>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <lsm6dsl_init+0x2a>
        printf("Error: Failed to send WHO_AM_I register address!\n");
 8000e2a:	482d      	ldr	r0, [pc, #180]	@ (8000ee0 <lsm6dsl_init+0xd8>)
 8000e2c:	f002 ffac 	bl	8003d88 <puts>
        return;
 8000e30:	e052      	b.n	8000ed8 <lsm6dsl_init+0xd0>
    }

    if (i2c_transaction(LSM6DSL_ADDRESS, 1, &who_am_i, 1) != 0) {
 8000e32:	f107 020f 	add.w	r2, r7, #15
 8000e36:	2301      	movs	r3, #1
 8000e38:	2101      	movs	r1, #1
 8000e3a:	206a      	movs	r0, #106	@ 0x6a
 8000e3c:	f7ff fe44 	bl	8000ac8 <i2c_transaction>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <lsm6dsl_init+0x46>
        printf("Error: Failed to read WHO_AM_I register!\n");
 8000e46:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <lsm6dsl_init+0xdc>)
 8000e48:	f002 ff9e 	bl	8003d88 <puts>
        return;
 8000e4c:	e044      	b.n	8000ed8 <lsm6dsl_init+0xd0>
    }

    printf("LSM6DSL WHO_AM_I: 0x%02X\n", who_am_i);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4825      	ldr	r0, [pc, #148]	@ (8000ee8 <lsm6dsl_init+0xe0>)
 8000e54:	f002 ff30 	bl	8003cb8 <iprintf>
    if (who_am_i != 0x6A) {
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b6a      	cmp	r3, #106	@ 0x6a
 8000e5c:	d003      	beq.n	8000e66 <lsm6dsl_init+0x5e>
        printf("Error: LSM6DSL not detected!\n");
 8000e5e:	4823      	ldr	r0, [pc, #140]	@ (8000eec <lsm6dsl_init+0xe4>)
 8000e60:	f002 ff92 	bl	8003d88 <puts>
        return;
 8000e64:	e038      	b.n	8000ed8 <lsm6dsl_init+0xd0>
    }

    // Add a small delay
    for (volatile int i = 0; i < 100000; i++);
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	e002      	b.n	8000e72 <lsm6dsl_init+0x6a>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <lsm6dsl_init+0xe8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	ddf8      	ble.n	8000e6c <lsm6dsl_init+0x64>

    // Configure accelerometer first - ODR = 104 Hz (0x40), ±2g (0x00)
    uint8_t accel_config[2] = {LSM6DSL_CTRL1_XL, 0x40};
 8000e7a:	f244 0310 	movw	r3, #16400	@ 0x4010
 8000e7e:	81bb      	strh	r3, [r7, #12]
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, accel_config, 2) != 0) {
 8000e80:	f107 020c 	add.w	r2, r7, #12
 8000e84:	2302      	movs	r3, #2
 8000e86:	2100      	movs	r1, #0
 8000e88:	206a      	movs	r0, #106	@ 0x6a
 8000e8a:	f7ff fe1d 	bl	8000ac8 <i2c_transaction>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <lsm6dsl_init+0x94>
        printf("Error: Failed to configure accelerometer\n");
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <lsm6dsl_init+0xec>)
 8000e96:	f002 ff77 	bl	8003d88 <puts>
        return;
 8000e9a:	e01d      	b.n	8000ed8 <lsm6dsl_init+0xd0>
    }

    // Add a small delay
    for (volatile int i = 0; i < 100000; i++);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	e002      	b.n	8000ea8 <lsm6dsl_init+0xa0>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	4a11      	ldr	r2, [pc, #68]	@ (8000ef0 <lsm6dsl_init+0xe8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	ddf8      	ble.n	8000ea2 <lsm6dsl_init+0x9a>

    // Enable BDU and IF_INC
    uint8_t ctrl3_config[2] = {LSM6DSL_CTRL3_C, 0x44};
 8000eb0:	f244 4312 	movw	r3, #17426	@ 0x4412
 8000eb4:	813b      	strh	r3, [r7, #8]
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, ctrl3_config, 2) != 0) {
 8000eb6:	f107 0208 	add.w	r2, r7, #8
 8000eba:	2302      	movs	r3, #2
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	206a      	movs	r0, #106	@ 0x6a
 8000ec0:	f7ff fe02 	bl	8000ac8 <i2c_transaction>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <lsm6dsl_init+0xca>
        printf("Error: Failed to configure CTRL3_C\n");
 8000eca:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <lsm6dsl_init+0xf0>)
 8000ecc:	f002 ff5c 	bl	8003d88 <puts>
        return;
 8000ed0:	e002      	b.n	8000ed8 <lsm6dsl_init+0xd0>
    }

    printf("LSM6DSL Initialized Successfully!\n");
 8000ed2:	480a      	ldr	r0, [pc, #40]	@ (8000efc <lsm6dsl_init+0xf4>)
 8000ed4:	f002 ff58 	bl	8003d88 <puts>
}
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08004a28 	.word	0x08004a28
 8000ee4:	08004a5c 	.word	0x08004a5c
 8000ee8:	08004a88 	.word	0x08004a88
 8000eec:	08004aa4 	.word	0x08004aa4
 8000ef0:	0001869f 	.word	0x0001869f
 8000ef4:	08004ac4 	.word	0x08004ac4
 8000ef8:	08004af0 	.word	0x08004af0
 8000efc:	08004b14 	.word	0x08004b14

08000f00 <lsm6dsl_read_xyz>:


// Read acceleration data from X, Y, Z axes
void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    uint8_t reg = LSM6DSL_OUTX_L_XL;
 8000f0c:	2328      	movs	r3, #40	@ 0x28
 8000f0e:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[6];

    // Set register address
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, &reg, 1) != 0) {
 8000f10:	f107 0217 	add.w	r2, r7, #23
 8000f14:	2301      	movs	r3, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	206a      	movs	r0, #106	@ 0x6a
 8000f1a:	f7ff fdd5 	bl	8000ac8 <i2c_transaction>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <lsm6dsl_read_xyz+0x2c>
        printf("Error: Failed to set register address for reading!\n");
 8000f24:	4832      	ldr	r0, [pc, #200]	@ (8000ff0 <lsm6dsl_read_xyz+0xf0>)
 8000f26:	f002 ff2f 	bl	8003d88 <puts>
        return;
 8000f2a:	e05e      	b.n	8000fea <lsm6dsl_read_xyz+0xea>
    }

    // Read all 6 bytes in a single transaction
    if (i2c_transaction(LSM6DSL_ADDRESS, 1, raw_data, 6) != 0) {
 8000f2c:	f107 0210 	add.w	r2, r7, #16
 8000f30:	2306      	movs	r3, #6
 8000f32:	2101      	movs	r1, #1
 8000f34:	206a      	movs	r0, #106	@ 0x6a
 8000f36:	f7ff fdc7 	bl	8000ac8 <i2c_transaction>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <lsm6dsl_read_xyz+0x48>
        printf("Error: Failed to read acceleration data!\n");
 8000f40:	482c      	ldr	r0, [pc, #176]	@ (8000ff4 <lsm6dsl_read_xyz+0xf4>)
 8000f42:	f002 ff21 	bl	8003d88 <puts>
        return;
 8000f46:	e050      	b.n	8000fea <lsm6dsl_read_xyz+0xea>
    }

    // Combine bytes and convert to signed 16-bit integers
    *x = (int16_t)((raw_data[1] << 8) | raw_data[0]);
 8000f48:	7c7b      	ldrb	r3, [r7, #17]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	7c3b      	ldrb	r3, [r7, #16]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((raw_data[3] << 8) | raw_data[2]);
 8000f5a:	7cfb      	ldrb	r3, [r7, #19]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	7cbb      	ldrb	r3, [r7, #18]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((raw_data[5] << 8) | raw_data[4]);
 8000f6c:	7d7b      	ldrb	r3, [r7, #21]
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	7d3b      	ldrb	r3, [r7, #20]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	801a      	strh	r2, [r3, #0]

    // Convert to mg (milli-g) values
    // With ±2g full scale, 1 mg = 0.061 mg/LSB
    *x = (*x * 61) / 1000;  // Convert to mg
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <lsm6dsl_read_xyz+0xf8>)
 8000f92:	fb82 1203 	smull	r1, r2, r2, r3
 8000f96:	1192      	asrs	r2, r2, #6
 8000f98:	17db      	asrs	r3, r3, #31
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	801a      	strh	r2, [r3, #0]
    *y = (*y * 61) / 1000;  // Convert to mg
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4613      	mov	r3, r2
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <lsm6dsl_read_xyz+0xf8>)
 8000fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fba:	1192      	asrs	r2, r2, #6
 8000fbc:	17db      	asrs	r3, r3, #31
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	801a      	strh	r2, [r3, #0]
    *z = (*z * 61) / 1000;  // Convert to mg
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4613      	mov	r3, r2
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <lsm6dsl_read_xyz+0xf8>)
 8000fda:	fb82 1203 	smull	r1, r2, r2, r3
 8000fde:	1192      	asrs	r2, r2, #6
 8000fe0:	17db      	asrs	r3, r3, #31
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	801a      	strh	r2, [r3, #0]
}
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	08004b38 	.word	0x08004b38
 8000ff4:	08004b6c 	.word	0x08004b6c
 8000ff8:	10624dd3 	.word	0x10624dd3

08000ffc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001004:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001008:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001018:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800101c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	e000      	b.n	8001028 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001026:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001028:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001032:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_write>:
volatile uint32_t count = 0;

//volatile uint32_t  = 0;

// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x2a>
        ITM_SendChar(*ptr++);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ffc7 	bl	8000ffc <ITM_SendChar>
    for (i = 0; i < len; i++) {
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x16>
    }
    return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
    // Check if the update interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF) {
 800108c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <TIM2_IRQHandler+0x2c>
        // Clear the update interrupt flag and perform actions
        TIM2->SR &= ~TIM_SR_UIF;
 800109a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6113      	str	r3, [r2, #16]
        updated_count++;
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <TIM2_IRQHandler+0x38>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a03      	ldr	r2, [pc, #12]	@ (80010c0 <TIM2_IRQHandler+0x38>)
 80010b2:	6013      	str	r3, [r2, #0]
    }
};
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000338 	.word	0x20000338

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b09a      	sub	sp, #104	@ 0x68
 80010c8:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f000 fd02 	bl	8001ad2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f9b1 	bl	8001434 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f000 fa33 	bl	800153c <MX_GPIO_Init>
  MX_SPI3_Init();
 80010d6:	f000 f9f3 	bl	80014c0 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f001 f862 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f000 fd67 	bl	8001bbc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f001 f858 	bl	80021ac <HAL_GPIO_WritePin>

  ble_init();
 80010fc:	f7ff f8b8 	bl	8000270 <ble_init>

  HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 fd5b 	bl	8001bbc <HAL_Delay>


  leds_init();
 8001106:	f7ff fddb 	bl	8000cc0 <leds_init>
  timer_init(TIM2);
 800110a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800110e:	f000 fc53 	bl	80019b8 <timer_init>
  timer_set_ms(TIM2, 10000);//50 ms
 8001112:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001116:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800111a:	f000 fc8f 	bl	8001a3c <timer_set_ms>
  int timer = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int i = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	653b      	str	r3, [r7, #80]	@ 0x50
  int j = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  i2c_init();
 800112a:	f7ff fc85 	bl	8000a38 <i2c_init>
  for (volatile int i = 0; i < 500000; i++);
 800112e:	2300      	movs	r3, #0
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001132:	e002      	b.n	800113a <main+0x76>
 8001134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001136:	3301      	adds	r3, #1
 8001138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800113a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800113c:	4ab4      	ldr	r2, [pc, #720]	@ (8001410 <main+0x34c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	ddf8      	ble.n	8001134 <main+0x70>
  lsm6dsl_init();
 8001142:	f7ff fe61 	bl	8000e08 <lsm6dsl_init>
  int16_t x, y, z;
  int16_t lastX, lastY, lastZ;
  const int16_t thresh = 30;
 8001146:	231e      	movs	r3, #30
 8001148:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

  leds_set(0x03);
 800114c:	2003      	movs	r0, #3
 800114e:	f7ff fe23 	bl	8000d98 <leds_set>
  leds_set(0x04);
 8001152:	2004      	movs	r0, #4
 8001154:	f7ff fe20 	bl	8000d98 <leds_set>
  uint8_t nonDiscoverable = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  while (1){
	  if(updated_count < 6){	// 50 ms fits 1200 times in 1 minute
 800115e:	4bad      	ldr	r3, [pc, #692]	@ (8001414 <main+0x350>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b05      	cmp	r3, #5
 8001164:	d86b      	bhi.n	800123e <main+0x17a>
		lsm6dsl_read_xyz(&x, &y, &z);  // Read accelerometer data for X, Y, Z axes
 8001166:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800116a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800116e:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fec4 	bl	8000f00 <lsm6dsl_read_xyz>
		// Display the acceleration values (in raw data form)
		printf("Acceleration X: %d, Y: %d, Z: %d\n", x, y, z);
 8001178:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800117c:	4619      	mov	r1, r3
 800117e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001182:	461a      	mov	r2, r3
 8001184:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001188:	48a3      	ldr	r0, [pc, #652]	@ (8001418 <main+0x354>)
 800118a:	f002 fd95 	bl	8003cb8 <iprintf>

		if(x < lastX - thresh || x > lastX + thresh){
 800118e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001192:	4619      	mov	r1, r3
 8001194:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8001198:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	4299      	cmp	r1, r3
 80011a0:	db09      	blt.n	80011b6 <main+0xf2>
 80011a2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80011a6:	4619      	mov	r1, r3
 80011a8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 80011ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011b0:	4413      	add	r3, r2
 80011b2:	4299      	cmp	r1, r3
 80011b4:	dd06      	ble.n	80011c4 <main+0x100>
			lastX = x;
 80011b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80011ba:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			updated_count = 0;
 80011be:	4b95      	ldr	r3, [pc, #596]	@ (8001414 <main+0x350>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		}
		if(y < lastY - thresh || y > lastY + thresh){
 80011c4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80011c8:	4619      	mov	r1, r3
 80011ca:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	@ 0x58
 80011ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	4299      	cmp	r1, r3
 80011d6:	db09      	blt.n	80011ec <main+0x128>
 80011d8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80011dc:	4619      	mov	r1, r3
 80011de:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	@ 0x58
 80011e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011e6:	4413      	add	r3, r2
 80011e8:	4299      	cmp	r1, r3
 80011ea:	dd06      	ble.n	80011fa <main+0x136>
			lastY = y;
 80011ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80011f0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
			updated_count = 0;
 80011f4:	4b87      	ldr	r3, [pc, #540]	@ (8001414 <main+0x350>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
		}
		if(z < lastZ - thresh || z > lastZ + thresh){
 80011fa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80011fe:	4619      	mov	r1, r3
 8001200:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 8001204:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	4299      	cmp	r1, r3
 800120c:	db09      	blt.n	8001222 <main+0x15e>
 800120e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001212:	4619      	mov	r1, r3
 8001214:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 8001218:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800121c:	4413      	add	r3, r2
 800121e:	4299      	cmp	r1, r3
 8001220:	dd06      	ble.n	8001230 <main+0x16c>
			lastZ = z;
 8001222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001226:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
			updated_count = 0;
 800122a:	4b7a      	ldr	r3, [pc, #488]	@ (8001414 <main+0x350>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
		}
		printf("count %d\n", updated_count);
 8001230:	4b78      	ldr	r3, [pc, #480]	@ (8001414 <main+0x350>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	4879      	ldr	r0, [pc, #484]	@ (800141c <main+0x358>)
 8001238:	f002 fd3e 	bl	8003cb8 <iprintf>
 800123c:	e78f      	b.n	800115e <main+0x9a>
	  }
	  else{
		  if(count != updated_count){
 800123e:	4b78      	ldr	r3, [pc, #480]	@ (8001420 <main+0x35c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b74      	ldr	r3, [pc, #464]	@ (8001414 <main+0x350>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d089      	beq.n	800115e <main+0x9a>

			  count = updated_count;
 800124a:	4b72      	ldr	r3, [pc, #456]	@ (8001414 <main+0x350>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a74      	ldr	r2, [pc, #464]	@ (8001420 <main+0x35c>)
 8001250:	6013      	str	r3, [r2, #0]
			  timer++;
 8001252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001254:	3301      	adds	r3, #1
 8001256:	65fb      	str	r3, [r7, #92]	@ 0x5c

			  if(timer == 6){
 8001258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800125a:	2b06      	cmp	r3, #6
 800125c:	d101      	bne.n	8001262 <main+0x19e>
				  timer = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	65fb      	str	r3, [r7, #92]	@ 0x5c
			  }

			  lsm6dsl_read_xyz(&x, &y, &z);  // Read accelerometer data for X, Y, Z axes
 8001262:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8001266:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800126a:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe46 	bl	8000f00 <lsm6dsl_read_xyz>

			  if(!(x < lastX - thresh || x > lastX + thresh)){
 8001274:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001278:	4619      	mov	r1, r3
 800127a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800127e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	4299      	cmp	r1, r3
 8001286:	db39      	blt.n	80012fc <main+0x238>
 8001288:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800128c:	4619      	mov	r1, r3
 800128e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8001292:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001296:	4413      	add	r3, r2
 8001298:	4299      	cmp	r1, r3
 800129a:	dc2f      	bgt.n	80012fc <main+0x238>
				  lastX = x;
 800129c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80012a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
//				  leds_set(0x03);
//				  leds_set(0x04);
				  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80012a4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d109      	bne.n	80012c0 <main+0x1fc>
 80012ac:	2140      	movs	r1, #64	@ 0x40
 80012ae:	485d      	ldr	r0, [pc, #372]	@ (8001424 <main+0x360>)
 80012b0:	f000 ff64 	bl	800217c <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <main+0x1fc>
					  catchBLE();
 80012ba:	f7ff f9ef 	bl	800069c <catchBLE>
 80012be:	e018      	b.n	80012f2 <main+0x22e>
				  }else{
					  HAL_Delay(1000);
 80012c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c4:	f000 fc7a 	bl	8001bbc <HAL_Delay>
					  // Send a string to the NORDIC UART service, remember to not include the newline
					  unsigned char test_str[] = "youlostit BLE test";
 80012c8:	4b57      	ldr	r3, [pc, #348]	@ (8001428 <main+0x364>)
 80012ca:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80012ce:	461d      	mov	r5, r3
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	8022      	strh	r2, [r4, #0]
 80012da:	3402      	adds	r4, #2
 80012dc:	0c1b      	lsrs	r3, r3, #16
 80012de:	7023      	strb	r3, [r4, #0]
					  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 80012e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2312      	movs	r3, #18
 80012e8:	2200      	movs	r2, #0
 80012ea:	4950      	ldr	r1, [pc, #320]	@ (800142c <main+0x368>)
 80012ec:	4850      	ldr	r0, [pc, #320]	@ (8001430 <main+0x36c>)
 80012ee:	f7ff fb4f 	bl	8000990 <updateCharValue>
				  }
				  updated_count = 0;
 80012f2:	4b48      	ldr	r3, [pc, #288]	@ (8001414 <main+0x350>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
				  timer = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			  }
			  if(!(y < lastY - thresh || y > lastY + thresh)){
 80012fc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001300:	4619      	mov	r1, r3
 8001302:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	@ 0x58
 8001306:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4299      	cmp	r1, r3
 800130e:	db39      	blt.n	8001384 <main+0x2c0>
 8001310:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001314:	4619      	mov	r1, r3
 8001316:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	@ 0x58
 800131a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800131e:	4413      	add	r3, r2
 8001320:	4299      	cmp	r1, r3
 8001322:	dc2f      	bgt.n	8001384 <main+0x2c0>
				  lastY = y;
 8001324:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001328:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
//				  leds_set(0x03);
//				  leds_set(0x04);
				  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800132c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <main+0x284>
 8001334:	2140      	movs	r1, #64	@ 0x40
 8001336:	483b      	ldr	r0, [pc, #236]	@ (8001424 <main+0x360>)
 8001338:	f000 ff20 	bl	800217c <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <main+0x284>
					  catchBLE();
 8001342:	f7ff f9ab 	bl	800069c <catchBLE>
 8001346:	e018      	b.n	800137a <main+0x2b6>
				  }else{
					  HAL_Delay(1000);
 8001348:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800134c:	f000 fc36 	bl	8001bbc <HAL_Delay>
					  // Send a string to the NORDIC UART service, remember to not include the newline
					  unsigned char test_str[] = "youlostit BLE test";
 8001350:	4b35      	ldr	r3, [pc, #212]	@ (8001428 <main+0x364>)
 8001352:	f107 0414 	add.w	r4, r7, #20
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	8022      	strh	r2, [r4, #0]
 8001362:	3402      	adds	r4, #2
 8001364:	0c1b      	lsrs	r3, r3, #16
 8001366:	7023      	strb	r3, [r4, #0]
					  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2312      	movs	r3, #18
 8001370:	2200      	movs	r2, #0
 8001372:	492e      	ldr	r1, [pc, #184]	@ (800142c <main+0x368>)
 8001374:	482e      	ldr	r0, [pc, #184]	@ (8001430 <main+0x36c>)
 8001376:	f7ff fb0b 	bl	8000990 <updateCharValue>
				  }
				  updated_count = 0;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <main+0x350>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
				  timer = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	65fb      	str	r3, [r7, #92]	@ 0x5c
			  }
			  if(!(z < lastZ - thresh || z > lastZ + thresh)){
 8001384:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001388:	4619      	mov	r1, r3
 800138a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800138e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4299      	cmp	r1, r3
 8001396:	f6ff aee2 	blt.w	800115e <main+0x9a>
 800139a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800139e:	4619      	mov	r1, r3
 80013a0:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 80013a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80013a8:	4413      	add	r3, r2
 80013aa:	4299      	cmp	r1, r3
 80013ac:	f73f aed7 	bgt.w	800115e <main+0x9a>
				  lastZ = z;
 80013b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80013b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
//				  leds_set(0x03);
//				  leds_set(0x04);
				  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80013b8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <main+0x310>
 80013c0:	2140      	movs	r1, #64	@ 0x40
 80013c2:	4818      	ldr	r0, [pc, #96]	@ (8001424 <main+0x360>)
 80013c4:	f000 feda 	bl	800217c <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <main+0x310>
					  catchBLE();
 80013ce:	f7ff f965 	bl	800069c <catchBLE>
 80013d2:	e016      	b.n	8001402 <main+0x33e>
				  }else{
					  HAL_Delay(1000);
 80013d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d8:	f000 fbf0 	bl	8001bbc <HAL_Delay>
					  // Send a string to the NORDIC UART service, remember to not include the newline
					  unsigned char test_str[] = "youlostit BLE test";
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <main+0x364>)
 80013de:	463c      	mov	r4, r7
 80013e0:	461d      	mov	r5, r3
 80013e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	8022      	strh	r2, [r4, #0]
 80013ec:	3402      	adds	r4, #2
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	7023      	strb	r3, [r4, #0]
					  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 80013f2:	463b      	mov	r3, r7
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2312      	movs	r3, #18
 80013f8:	2200      	movs	r2, #0
 80013fa:	490c      	ldr	r1, [pc, #48]	@ (800142c <main+0x368>)
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <main+0x36c>)
 80013fe:	f7ff fac7 	bl	8000990 <updateCharValue>
				  }
				  updated_count = 0;
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <main+0x350>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
				  timer = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  if(updated_count < 6){	// 50 ms fits 1200 times in 1 minute
 800140c:	e6a7      	b.n	800115e <main+0x9a>
 800140e:	bf00      	nop
 8001410:	0007a11f 	.word	0x0007a11f
 8001414:	20000338 	.word	0x20000338
 8001418:	08004b98 	.word	0x08004b98
 800141c:	08004bbc 	.word	0x08004bbc
 8001420:	2000033c 	.word	0x2000033c
 8001424:	48001000 	.word	0x48001000
 8001428:	08004bc8 	.word	0x08004bc8
 800142c:	200002c8 	.word	0x200002c8
 8001430:	200002c0 	.word	0x200002c0

08001434 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b096      	sub	sp, #88	@ 0x58
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2244      	movs	r2, #68	@ 0x44
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fd80 	bl	8003f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001456:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800145a:	f000 fef1 	bl	8002240 <HAL_PWREx_ControlVoltageScaling>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001464:	f000 f902 	bl	800166c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001468:	2310      	movs	r3, #16
 800146a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001474:	2370      	movs	r3, #112	@ 0x70
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f000 ff33 	bl	80022ec <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800148c:	f000 f8ee 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fafb 	bl	8002aa4 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014b4:	f000 f8da 	bl	800166c <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3758      	adds	r7, #88	@ 0x58
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <MX_SPI3_Init+0x78>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_SPI3_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_SPI3_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_SPI3_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_SPI3_Init+0x74>)
 800150e:	2207      	movs	r2, #7
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_SPI3_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_SPI3_Init+0x74>)
 800151a:	2208      	movs	r2, #8
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_SPI3_Init+0x74>)
 8001520:	f001 fcac 	bl	8002e7c <HAL_SPI_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f89f 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200002d4 	.word	0x200002d4
 8001538:	40003c00 	.word	0x40003c00

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b40      	ldr	r3, [pc, #256]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <MX_GPIO_Init+0x124>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4a3c      	ldr	r2, [pc, #240]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4b3a      	ldr	r3, [pc, #232]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a36      	ldr	r2, [pc, #216]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <MX_GPIO_Init+0x124>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a30      	ldr	r2, [pc, #192]	@ (8001660 <MX_GPIO_Init+0x124>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <MX_GPIO_Init+0x124>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <MX_GPIO_Init+0x124>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001660 <MX_GPIO_Init+0x124>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <MX_GPIO_Init+0x124>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2120      	movs	r1, #32
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f000 fdeb 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015dc:	4821      	ldr	r0, [pc, #132]	@ (8001664 <MX_GPIO_Init+0x128>)
 80015de:	f000 fde5 	bl	80021ac <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f000 fdde 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80015f0:	2340      	movs	r3, #64	@ 0x40
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4818      	ldr	r0, [pc, #96]	@ (8001668 <MX_GPIO_Init+0x12c>)
 8001606:	f000 fc0f 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800160a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f000 fbff 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800162a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4808      	ldr	r0, [pc, #32]	@ (8001664 <MX_GPIO_Init+0x128>)
 8001644:	f000 fbf0 	bl	8001e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2017      	movs	r0, #23
 800164e:	f000 fbb4 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001652:	2017      	movs	r0, #23
 8001654:	f000 fbcd 	bl	8001df2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	48000c00 	.word	0x48000c00
 8001668:	48001000 	.word	0x48001000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <HAL_MspInit+0x44>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <HAL_MspInit+0x44>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6613      	str	r3, [r2, #96]	@ 0x60
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_MspInit+0x44>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_MspInit+0x44>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <HAL_MspInit+0x44>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_MspInit+0x44>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a17      	ldr	r2, [pc, #92]	@ (800173c <HAL_SPI_MspInit+0x7c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d128      	bne.n	8001734 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_SPI_MspInit+0x80>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001712:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001724:	2306      	movs	r3, #6
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_SPI_MspInit+0x84>)
 8001730:	f000 fb7a 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40003c00 	.word	0x40003c00
 8001740:	40021000 	.word	0x40021000
 8001744:	48000800 	.word	0x48000800

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <UsageFault_Handler+0x4>

08001770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 f9ed 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <EXTI9_5_IRQHandler+0x14>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80017b2:	2040      	movs	r0, #64	@ 0x40
 80017b4:	f000 fd12 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002d0 	.word	0x200002d0

080017c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e00a      	b.n	80017e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017d2:	f3af 8000 	nop.w
 80017d6:	4601      	mov	r1, r0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf0      	blt.n	80017d2 <_read+0x12>
	}

return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <_sbrk+0x50>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x16>
		heap_end = &end;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <_sbrk+0x50>)
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <_sbrk+0x54>)
 8001810:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <_sbrk+0x50>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <_sbrk+0x50>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	466a      	mov	r2, sp
 8001822:	4293      	cmp	r3, r2
 8001824:	d907      	bls.n	8001836 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001826:	f002 fbed 	bl	8004004 <__errno>
 800182a:	4603      	mov	r3, r0
 800182c:	220c      	movs	r2, #12
 800182e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	e006      	b.n	8001844 <_sbrk+0x48>
	}

	heap_end += incr;
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <_sbrk+0x50>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a03      	ldr	r2, [pc, #12]	@ (800184c <_sbrk+0x50>)
 8001840:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000340 	.word	0x20000340
 8001850:	20000498 	.word	0x20000498

08001854 <_close>:

int _close(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800187c:	605a      	str	r2, [r3, #4]
	return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_isatty>:

int _isatty(int file)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
	return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <SystemInit+0x64>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a16      	ldr	r2, [pc, #88]	@ (8001920 <SystemInit+0x64>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <SystemInit+0x68>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a13      	ldr	r2, [pc, #76]	@ (8001924 <SystemInit+0x68>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <SystemInit+0x68>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <SystemInit+0x68>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <SystemInit+0x68>)
 80018e8:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018ec:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <SystemInit+0x68>)
 80018f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <SystemInit+0x68>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a09      	ldr	r2, [pc, #36]	@ (8001924 <SystemInit+0x68>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001904:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <SystemInit+0x68>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <SystemInit+0x64>)
 800190e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001912:	609a      	str	r2, [r3, #8]
#endif
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	40021000 	.word	0x40021000

08001928 <__NVIC_EnableIRQ>:
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	@ (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	// Enable clock for TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <timer_init+0x64>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <timer_init+0x64>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable the timer
    timer->CR1 &= ~TIM_CR1_CEN;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 0201 	bic.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	601a      	str	r2, [r3, #0]

    // Reset counter and status register
    timer->CNT = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
    timer->SR = 0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]

    // Set auto-reload value for 50 ms (assuming 4 MHz clock)
    timer->ARR = 0xFFFF;   // 50 ms period (1 kHz clock -> 50 ticks)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable update interrupt
    timer->DIER |= TIM_DIER_UIE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 80019f8:	201c      	movs	r0, #28
 80019fa:	f7ff ff95 	bl	8001928 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);
 80019fe:	2101      	movs	r1, #1
 8001a00:	201c      	movs	r0, #28
 8001a02:	f7ff ffaf 	bl	8001964 <__NVIC_SetPriority>

    // Enable the timer
    timer->CR1 |= TIM_CR1_CEN;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  // TODO implement this
	timer->CNT = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
  // TODO implement this
	uint32_t timer_clock = 4000000; // Timer clock after prescaler
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <timer_set_ms+0x3c>)
 8001a4a:	60fb      	str	r3, [r7, #12]
	uint32_t period_ticks = (timer_clock / 1000) * period_ms; // Calculate period in ticks
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <timer_set_ms+0x40>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	60bb      	str	r3, [r7, #8]
	timer->ARR = period_ticks - 1; // Set auto-reload value
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer_reset(TIM2);
 8001a66:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001a6a:	f7ff ffd9 	bl	8001a20 <timer_reset>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	003d0900 	.word	0x003d0900
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff ff1a 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	@ (8001ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <LoopForever+0xe>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001acc <LoopForever+0x16>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f002 faaf 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab2:	f7ff fb07 	bl	80010c4 <main>

08001ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001ac4:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 8001ac8:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001acc:	20000494 	.word	0x20000494

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>

08001ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f961 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f80e 	bl	8001b04 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e001      	b.n	8001af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af4:	f7ff fdc0 	bl	8001678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <HAL_InitTick+0x70>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_InitTick+0x6c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f96d 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d809      	bhi.n	8001b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f937 	bl	8001dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_InitTick+0x74>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e004      	b.n	8001b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e001      	b.n	8001b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000138 	.word	0x20000138
 8001b74:	20000130 	.word	0x20000130
 8001b78:	20000134 	.word	0x20000134

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000138 	.word	0x20000138
 8001ba0:	20000344 	.word	0x20000344

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000344 	.word	0x20000344

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000138 	.word	0x20000138

08001c04 <__NVIC_SetPriorityGrouping>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	@ (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	e17f      	b.n	8002138 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8171 	beq.w	8002132 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x40>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d118      	bne.n	8001f08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001edc:	2201      	movs	r2, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	f003 0201 	and.w	r2, r3, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d017      	beq.n	8001f44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80ac 	beq.w	8002132 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	4b5f      	ldr	r3, [pc, #380]	@ (8002158 <HAL_GPIO_Init+0x330>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fde:	4a5e      	ldr	r2, [pc, #376]	@ (8002158 <HAL_GPIO_Init+0x330>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <HAL_GPIO_Init+0x330>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800215c <HAL_GPIO_Init+0x334>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800201c:	d025      	beq.n	800206a <HAL_GPIO_Init+0x242>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	@ (8002160 <HAL_GPIO_Init+0x338>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <HAL_GPIO_Init+0x23e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4e      	ldr	r2, [pc, #312]	@ (8002164 <HAL_GPIO_Init+0x33c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x23a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4d      	ldr	r2, [pc, #308]	@ (8002168 <HAL_GPIO_Init+0x340>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x236>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_GPIO_Init+0x344>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x232>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4b      	ldr	r2, [pc, #300]	@ (8002170 <HAL_GPIO_Init+0x348>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x22e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_GPIO_Init+0x34c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x22a>
 800204e:	2306      	movs	r3, #6
 8002050:	e00c      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002052:	2307      	movs	r3, #7
 8002054:	e00a      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002056:	2305      	movs	r3, #5
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x244>
 800205a:	2304      	movs	r3, #4
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x244>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x244>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x244>
 800206a:	2300      	movs	r3, #0
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800207c:	4937      	ldr	r1, [pc, #220]	@ (800215c <HAL_GPIO_Init+0x334>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208a:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <HAL_GPIO_Init+0x350>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ae:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d8:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <HAL_GPIO_Init+0x350>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002102:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <HAL_GPIO_Init+0x350>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_GPIO_Init+0x350>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800212c:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <HAL_GPIO_Init+0x350>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	f47f ae78 	bne.w	8001e38 <HAL_GPIO_Init+0x10>
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	48001000 	.word	0x48001000
 8002170:	48001400 	.word	0x48001400
 8002174:	48001800 	.word	0x48001800
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f806 	bl	800220c <HAL_GPIO_EXTI_Callback>
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <HAL_PWREx_GetVoltageRange+0x18>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800224e:	d130      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002250:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800225c:	d038      	beq.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226e:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2232      	movs	r2, #50	@ 0x32
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002284:	e002      	b.n	800228c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3b01      	subs	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228c:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002298:	d102      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f2      	bne.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ac:	d110      	bne.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e00f      	b.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022be:	d007      	beq.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c0:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022c8:	4a05      	ldr	r2, [pc, #20]	@ (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000
 80022e4:	20000130 	.word	0x20000130
 80022e8:	431bde83 	.word	0x431bde83

080022ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e3ca      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fe:	4b97      	ldr	r3, [pc, #604]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002308:	4b94      	ldr	r3, [pc, #592]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80e4 	beq.w	80024e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_RCC_OscConfig+0x4a>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b0c      	cmp	r3, #12
 800232a:	f040 808b 	bne.w	8002444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b01      	cmp	r3, #1
 8002332:	f040 8087 	bne.w	8002444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002336:	4b89      	ldr	r3, [pc, #548]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e3a2      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1a      	ldr	r2, [r3, #32]
 8002352:	4b82      	ldr	r3, [pc, #520]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_RCC_OscConfig+0x7c>
 800235e:	4b7f      	ldr	r3, [pc, #508]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002366:	e005      	b.n	8002374 <HAL_RCC_OscConfig+0x88>
 8002368:	4b7c      	ldr	r3, [pc, #496]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002374:	4293      	cmp	r3, r2
 8002376:	d223      	bcs.n	80023c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fd1d 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e383      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238c:	4b73      	ldr	r3, [pc, #460]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a72      	ldr	r2, [pc, #456]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b70      	ldr	r3, [pc, #448]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	496d      	ldr	r1, [pc, #436]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023aa:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	4968      	ldr	r1, [pc, #416]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	e025      	b.n	800240c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c0:	4b66      	ldr	r3, [pc, #408]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a65      	ldr	r2, [pc, #404]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b63      	ldr	r3, [pc, #396]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4960      	ldr	r1, [pc, #384]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023de:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	495b      	ldr	r1, [pc, #364]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fcdd 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e343      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240c:	f000 fc4a 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b52      	ldr	r3, [pc, #328]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	4950      	ldr	r1, [pc, #320]	@ (8002560 <HAL_RCC_OscConfig+0x274>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	4a4e      	ldr	r2, [pc, #312]	@ (8002564 <HAL_RCC_OscConfig+0x278>)
 800242a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800242c:	4b4e      	ldr	r3, [pc, #312]	@ (8002568 <HAL_RCC_OscConfig+0x27c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fb67 	bl	8001b04 <HAL_InitTick>
 8002436:	4603      	mov	r3, r0
 8002438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d052      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	e327      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d032      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800244c:	4b43      	ldr	r3, [pc, #268]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a42      	ldr	r2, [pc, #264]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002458:	f7ff fba4 	bl	8001ba4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002460:	f7ff fba0 	bl	8001ba4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e310      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002472:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247e:	4b37      	ldr	r3, [pc, #220]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a36      	ldr	r2, [pc, #216]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b34      	ldr	r3, [pc, #208]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4931      	ldr	r1, [pc, #196]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249c:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	492c      	ldr	r1, [pc, #176]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e01a      	b.n	80024e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a29      	ldr	r2, [pc, #164]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024be:	f7ff fb71 	bl	8001ba4 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c6:	f7ff fb6d 	bl	8001ba4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e2dd      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d8:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x1da>
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d074      	beq.n	80025de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x21a>
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d10e      	bne.n	800251e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d10b      	bne.n	800251e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d064      	beq.n	80025dc <HAL_RCC_OscConfig+0x2f0>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d160      	bne.n	80025dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e2ba      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x24a>
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0b      	ldr	r2, [pc, #44]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e026      	b.n	8002584 <HAL_RCC_OscConfig+0x298>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800253e:	d115      	bne.n	800256c <HAL_RCC_OscConfig+0x280>
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a05      	ldr	r2, [pc, #20]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a02      	ldr	r2, [pc, #8]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x298>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	08004bdc 	.word	0x08004bdc
 8002564:	20000130 	.word	0x20000130
 8002568:	20000134 	.word	0x20000134
 800256c:	4ba0      	ldr	r3, [pc, #640]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a9f      	ldr	r2, [pc, #636]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b9d      	ldr	r3, [pc, #628]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a9c      	ldr	r2, [pc, #624]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fb0a 	bl	8001ba4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff fb06 	bl	8001ba4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e276      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	4b92      	ldr	r3, [pc, #584]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x2a8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff faf6 	bl	8001ba4 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff faf2 	bl	8001ba4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e262      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x2d0>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d060      	beq.n	80026ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_OscConfig+0x310>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	d119      	bne.n	800262a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d116      	bne.n	800262a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	4b7c      	ldr	r3, [pc, #496]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x328>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e23f      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b76      	ldr	r3, [pc, #472]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	4973      	ldr	r1, [pc, #460]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	e040      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d023      	beq.n	800267a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002632:	4b6f      	ldr	r3, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7ff fab1 	bl	8001ba4 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002646:	f7ff faad 	bl	8001ba4 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e21d      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	4b65      	ldr	r3, [pc, #404]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b62      	ldr	r3, [pc, #392]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	495f      	ldr	r1, [pc, #380]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	e018      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5c      	ldr	r2, [pc, #368]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7ff fa8d 	bl	8001ba4 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7ff fa89 	bl	8001ba4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1f9      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d03c      	beq.n	8002732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01c      	beq.n	80026fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c0:	4b4b      	ldr	r3, [pc, #300]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c6:	4a4a      	ldr	r2, [pc, #296]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7ff fa68 	bl	8001ba4 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7ff fa64 	bl	8001ba4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1d4      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <HAL_RCC_OscConfig+0x3ec>
 80026f8:	e01b      	b.n	8002732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002700:	4a3b      	ldr	r2, [pc, #236]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff fa4b 	bl	8001ba4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7ff fa47 	bl	8001ba4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1b7      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	4b32      	ldr	r3, [pc, #200]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ef      	bne.n	8002712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a6 	beq.w	800288c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	@ 0x58
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d118      	bne.n	80027aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002778:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002784:	f7ff fa0e 	bl	8001ba4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7ff fa0a 	bl	8001ba4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e17a      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4d8>
 80027b2:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c2:	e029      	b.n	8002818 <HAL_RCC_OscConfig+0x52c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d115      	bne.n	80027f8 <HAL_RCC_OscConfig+0x50c>
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a07      	ldr	r2, [pc, #28]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	4a03      	ldr	r2, [pc, #12]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x52c>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a9b      	ldr	r2, [pc, #620]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002808:	4b98      	ldr	r3, [pc, #608]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	4a97      	ldr	r2, [pc, #604]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7ff f9c0 	bl	8001ba4 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7ff f9bc 	bl	8001ba4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e12a      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ed      	beq.n	8002828 <HAL_RCC_OscConfig+0x53c>
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7ff f9a9 	bl	8001ba4 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7ff f9a5 	bl	8001ba4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e113      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ed      	bne.n	8002856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b7a      	ldr	r3, [pc, #488]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	4a79      	ldr	r2, [pc, #484]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80fe 	beq.w	8002a92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 80d0 	bne.w	8002a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028a0:	4b72      	ldr	r3, [pc, #456]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d130      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	3b01      	subs	r3, #1
 80028c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d127      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d11f      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028e0:	2a07      	cmp	r2, #7
 80028e2:	bf14      	ite	ne
 80028e4:	2201      	movne	r2, #1
 80028e6:	2200      	moveq	r2, #0
 80028e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d113      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d109      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	3b01      	subs	r3, #1
 8002910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d06e      	beq.n	80029f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d069      	beq.n	80029f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002928:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0ad      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002938:	4b4c      	ldr	r3, [pc, #304]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7ff f92e 	bl	8001ba4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff f92a 	bl	8001ba4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e09a      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296a:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800297a:	3a01      	subs	r2, #1
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002984:	0212      	lsls	r2, r2, #8
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800298c:	0852      	lsrs	r2, r2, #1
 800298e:	3a01      	subs	r2, #1
 8002990:	0552      	lsls	r2, r2, #21
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002998:	0852      	lsrs	r2, r2, #1
 800299a:	3a01      	subs	r2, #1
 800299c:	0652      	lsls	r2, r2, #25
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029a4:	0912      	lsrs	r2, r2, #4
 80029a6:	0452      	lsls	r2, r2, #17
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4930      	ldr	r1, [pc, #192]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029b0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c8:	f7ff f8ec 	bl	8001ba4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d0:	f7ff f8e8 	bl	8001ba4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e058      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ee:	e050      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e04f      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d148      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a19      	ldr	r2, [pc, #100]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a0c:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a16      	ldr	r2, [pc, #88]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a18:	f7ff f8c4 	bl	8001ba4 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7ff f8c0 	bl	8001ba4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e030      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x734>
 8002a3e:	e028      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d023      	beq.n	8002a8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7ff f8a7 	bl	8001ba4 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	e00c      	b.n	8002a74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7ff f8a3 	bl	8001ba4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d905      	bls.n	8002a74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_OscConfig+0x7b0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ec      	bne.n	8002a5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_RCC_OscConfig+0x7b0>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	4905      	ldr	r1, [pc, #20]	@ (8002a9c <HAL_RCC_OscConfig+0x7b0>)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b4>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
 8002a8c:	e001      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	feeefffc 	.word	0xfeeefffc

08002aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0e7      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b75      	ldr	r3, [pc, #468]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b72      	ldr	r3, [pc, #456]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4970      	ldr	r1, [pc, #448]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0cf      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b66      	ldr	r3, [pc, #408]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d908      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4960      	ldr	r1, [pc, #384]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04c      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0a6      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	4b54      	ldr	r3, [pc, #336]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d115      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e09a      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e08e      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e086      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b46      	ldr	r3, [pc, #280]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4943      	ldr	r1, [pc, #268]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7ff f80a 	bl	8001ba4 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7ff f806 	bl	8001ba4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e06e      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b3a      	ldr	r3, [pc, #232]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4b31      	ldr	r3, [pc, #196]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d208      	bcs.n	8002bea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	492b      	ldr	r1, [pc, #172]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d210      	bcs.n	8002c1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0207 	bic.w	r2, r3, #7
 8002c00:	4923      	ldr	r1, [pc, #140]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c08:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e036      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4918      	ldr	r1, [pc, #96]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c44:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4910      	ldr	r1, [pc, #64]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c58:	f000 f824 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	490b      	ldr	r1, [pc, #44]	@ (8002c98 <HAL_RCC_ClockConfig+0x1f4>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	4a09      	ldr	r2, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1f8>)
 8002c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ff41 	bl	8001b04 <HAL_InitTick>
 8002c82:	4603      	mov	r3, r0
 8002c84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c86:	7afb      	ldrb	r3, [r7, #11]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08004bdc 	.word	0x08004bdc
 8002c9c:	20000130 	.word	0x20000130
 8002ca0:	20000134 	.word	0x20000134

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d121      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d11e      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cd8:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d00:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e004      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d28:	4b23      	ldr	r3, [pc, #140]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d134      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d32:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d003      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0xac>
 8002d48:	e005      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d4c:	617b      	str	r3, [r7, #20]
      break;
 8002d4e:	e005      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d50:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d52:	617b      	str	r3, [r7, #20]
      break;
 8002d54:	e002      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	617b      	str	r3, [r7, #20]
      break;
 8002d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	3301      	adds	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	fb03 f202 	mul.w	r2, r3, r2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d82:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	0e5b      	lsrs	r3, r3, #25
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	@ 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08004bec 	.word	0x08004bec
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd4:	f7ff fa26 	bl	8002224 <HAL_PWREx_GetVoltageRange>
 8002dd8:	6178      	str	r0, [r7, #20]
 8002dda:	e014      	b.n	8002e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ddc:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df4:	f7ff fa16 	bl	8002224 <HAL_PWREx_GetVoltageRange>
 8002df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e0c:	d10b      	bne.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b80      	cmp	r3, #128	@ 0x80
 8002e12:	d919      	bls.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e18:	d902      	bls.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e013      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e20:	2301      	movs	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e010      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	@ 0x80
 8002e2a:	d902      	bls.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e00a      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	d102      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e38:	2302      	movs	r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e004      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b70      	cmp	r3, #112	@ 0x70
 8002e42:	d101      	bne.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 0207 	bic.w	r2, r3, #7
 8002e50:	4909      	ldr	r1, [pc, #36]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d001      	beq.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40022000 	.word	0x40022000

08002e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e095      	b.n	8002fba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e9e:	d009      	beq.n	8002eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
 8002ea6:	e005      	b.n	8002eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe fbf6 	bl	80016c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ef4:	d902      	bls.n	8002efc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e002      	b.n	8002f02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f0a:	d007      	beq.n	8002f1c <HAL_SPI_Init+0xa0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5e:	ea42 0103 	orr.w	r1, r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	f003 0204 	and.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f98:	ea42 0103 	orr.w	r1, r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b088      	sub	sp, #32
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_SPI_Transmit+0x22>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e15f      	b.n	80032a4 <HAL_SPI_Transmit+0x2e2>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fec:	f7fe fdda 	bl	8001ba4 <HAL_GetTick>
 8002ff0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003006:	e148      	b.n	800329a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Transmit+0x52>
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003018:	e13f      	b.n	800329a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2203      	movs	r2, #3
 800301e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003064:	d10f      	bne.n	8003086 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003084:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d007      	beq.n	80030a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030ac:	d94f      	bls.n	800314e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_SPI_Transmit+0xfa>
 80030b6:	8afb      	ldrh	r3, [r7, #22]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d142      	bne.n	8003142 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030e0:	e02f      	b.n	8003142 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d112      	bne.n	8003116 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	1c9a      	adds	r2, r3, #2
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003114:	e015      	b.n	8003142 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003116:	f7fe fd45 	bl	8001ba4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d803      	bhi.n	800312e <HAL_SPI_Transmit+0x16c>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d102      	bne.n	8003134 <HAL_SPI_Transmit+0x172>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003140:	e0ab      	b.n	800329a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ca      	bne.n	80030e2 <HAL_SPI_Transmit+0x120>
 800314c:	e080      	b.n	8003250 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_SPI_Transmit+0x19a>
 8003156:	8afb      	ldrh	r3, [r7, #22]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d174      	bne.n	8003246 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d912      	bls.n	800318c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b02      	subs	r3, #2
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800318a:	e05c      	b.n	8003246 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031b2:	e048      	b.n	8003246 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d12b      	bne.n	800321a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d912      	bls.n	80031f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b02      	subs	r3, #2
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031f0:	e029      	b.n	8003246 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003218:	e015      	b.n	8003246 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800321a:	f7fe fcc3 	bl	8001ba4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d803      	bhi.n	8003232 <HAL_SPI_Transmit+0x270>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d102      	bne.n	8003238 <HAL_SPI_Transmit+0x276>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003244:	e029      	b.n	800329a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1b1      	bne.n	80031b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	6839      	ldr	r1, [r7, #0]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fb69 	bl	800392c <SPI_EndRxTxTransaction>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e003      	b.n	800329a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	@ 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032ba:	2301      	movs	r3, #1
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x26>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e20a      	b.n	80036e8 <HAL_SPI_TransmitReceive+0x43c>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032da:	f7fe fc63 	bl	8001ba4 <HAL_GetTick>
 80032de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032f6:	7efb      	ldrb	r3, [r7, #27]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d00e      	beq.n	800331a <HAL_SPI_TransmitReceive+0x6e>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003302:	d106      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x66>
 800330c:	7efb      	ldrb	r3, [r7, #27]
 800330e:	2b04      	cmp	r3, #4
 8003310:	d003      	beq.n	800331a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003312:	2302      	movs	r3, #2
 8003314:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003318:	e1e0      	b.n	80036dc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_SPI_TransmitReceive+0x80>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_SPI_TransmitReceive+0x80>
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003332:	e1d3      	b.n	80036dc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b04      	cmp	r3, #4
 800333e:	d003      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2205      	movs	r2, #5
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	887a      	ldrh	r2, [r7, #2]
 800336e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800338a:	d802      	bhi.n	8003392 <HAL_SPI_TransmitReceive+0xe6>
 800338c:	8a3b      	ldrh	r3, [r7, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d908      	bls.n	80033a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e007      	b.n	80033b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033be:	2b40      	cmp	r3, #64	@ 0x40
 80033c0:	d007      	beq.n	80033d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033da:	f240 8081 	bls.w	80034e0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x140>
 80033e6:	8a7b      	ldrh	r3, [r7, #18]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d16d      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003410:	e05a      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d11b      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x1ac>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x1ac>
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	2b01      	cmp	r3, #1
 800342e:	d113      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d11c      	bne.n	80034a0 <HAL_SPI_TransmitReceive+0x1f4>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	b292      	uxth	r2, r2
 800347e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034a0:	f7fe fb80 	bl	8001ba4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d80b      	bhi.n	80034c8 <HAL_SPI_TransmitReceive+0x21c>
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d007      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034c6:	e109      	b.n	80036dc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d19f      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x166>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d199      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x166>
 80034de:	e0e3      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x244>
 80034e8:	8a7b      	ldrh	r3, [r7, #18]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	f040 80cf 	bne.w	800368e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d912      	bls.n	8003520 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	1c9a      	adds	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b02      	subs	r3, #2
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800351e:	e0b6      	b.n	800368e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003546:	e0a2      	b.n	800368e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d134      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x314>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02f      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x314>
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	d12c      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d912      	bls.n	8003596 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b02      	subs	r3, #2
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003594:	e012      	b.n	80035bc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d148      	bne.n	8003660 <HAL_SPI_TransmitReceive+0x3b4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d042      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d923      	bls.n	800362e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	b292      	uxth	r2, r2
 80035f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b02      	subs	r3, #2
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d81f      	bhi.n	800365c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	e016      	b.n	800365c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f103 020c 	add.w	r2, r3, #12
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365c:	2301      	movs	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003660:	f7fe faa0 	bl	8001ba4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366c:	429a      	cmp	r2, r3
 800366e:	d803      	bhi.n	8003678 <HAL_SPI_TransmitReceive+0x3cc>
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d102      	bne.n	800367e <HAL_SPI_TransmitReceive+0x3d2>
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800368c:	e026      	b.n	80036dc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f af57 	bne.w	8003548 <HAL_SPI_TransmitReceive+0x29c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f47f af50 	bne.w	8003548 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f93d 	bl	800392c <SPI_EndRxTxTransaction>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d2:	e003      	b.n	80036dc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3728      	adds	r7, #40	@ 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003700:	f7fe fa50 	bl	8001ba4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	4413      	add	r3, r2
 800370e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003710:	f7fe fa48 	bl	8001ba4 <HAL_GetTick>
 8003714:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003716:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	015b      	lsls	r3, r3, #5
 800371c:	0d1b      	lsrs	r3, r3, #20
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003726:	e054      	b.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d050      	beq.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003730:	f7fe fa38 	bl	8001ba4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	429a      	cmp	r2, r3
 800373e:	d902      	bls.n	8003746 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d13d      	bne.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800375e:	d111      	bne.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003768:	d004      	beq.n	8003774 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003772:	d107      	bne.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378c:	d10f      	bne.n	80037ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e017      	b.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d19b      	bne.n	8003728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000130 	.word	0x20000130

08003800 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003812:	f7fe f9c7 	bl	8001ba4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	4413      	add	r3, r2
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003822:	f7fe f9bf 	bl	8001ba4 <HAL_GetTick>
 8003826:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003830:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00da      	lsls	r2, r3, #3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	0d1b      	lsrs	r3, r3, #20
 8003840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003848:	e060      	b.n	800390c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003850:	d107      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003860:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d050      	beq.n	800390c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800386a:	f7fe f99b 	bl	8001ba4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003876:	429a      	cmp	r2, r3
 8003878:	d902      	bls.n	8003880 <SPI_WaitFifoStateUntilTimeout+0x80>
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d13d      	bne.n	80038fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800388e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003898:	d111      	bne.n	80038be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a2:	d004      	beq.n	80038ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ac:	d107      	bne.n	80038be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c6:	d10f      	bne.n	80038e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e010      	b.n	800391e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3b01      	subs	r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d196      	bne.n	800384a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3728      	adds	r7, #40	@ 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000130 	.word	0x20000130

0800392c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff ff5b 	bl	8003800 <SPI_WaitFifoStateUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e027      	b.n	80039b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	2180      	movs	r1, #128	@ 0x80
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff fec0 	bl	80036f0 <SPI_WaitFlagStateUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e014      	b.n	80039b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff ff34 	bl	8003800 <SPI_WaitFifoStateUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e000      	b.n	80039b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <malloc>:
 80039b8:	4b02      	ldr	r3, [pc, #8]	@ (80039c4 <malloc+0xc>)
 80039ba:	4601      	mov	r1, r0
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f000 b82d 	b.w	8003a1c <_malloc_r>
 80039c2:	bf00      	nop
 80039c4:	20000148 	.word	0x20000148

080039c8 <free>:
 80039c8:	4b02      	ldr	r3, [pc, #8]	@ (80039d4 <free+0xc>)
 80039ca:	4601      	mov	r1, r0
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f000 bb55 	b.w	800407c <_free_r>
 80039d2:	bf00      	nop
 80039d4:	20000148 	.word	0x20000148

080039d8 <sbrk_aligned>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4e0f      	ldr	r6, [pc, #60]	@ (8003a18 <sbrk_aligned+0x40>)
 80039dc:	460c      	mov	r4, r1
 80039de:	6831      	ldr	r1, [r6, #0]
 80039e0:	4605      	mov	r5, r0
 80039e2:	b911      	cbnz	r1, 80039ea <sbrk_aligned+0x12>
 80039e4:	f000 faec 	bl	8003fc0 <_sbrk_r>
 80039e8:	6030      	str	r0, [r6, #0]
 80039ea:	4621      	mov	r1, r4
 80039ec:	4628      	mov	r0, r5
 80039ee:	f000 fae7 	bl	8003fc0 <_sbrk_r>
 80039f2:	1c43      	adds	r3, r0, #1
 80039f4:	d103      	bne.n	80039fe <sbrk_aligned+0x26>
 80039f6:	f04f 34ff 	mov.w	r4, #4294967295
 80039fa:	4620      	mov	r0, r4
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
 80039fe:	1cc4      	adds	r4, r0, #3
 8003a00:	f024 0403 	bic.w	r4, r4, #3
 8003a04:	42a0      	cmp	r0, r4
 8003a06:	d0f8      	beq.n	80039fa <sbrk_aligned+0x22>
 8003a08:	1a21      	subs	r1, r4, r0
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 fad8 	bl	8003fc0 <_sbrk_r>
 8003a10:	3001      	adds	r0, #1
 8003a12:	d1f2      	bne.n	80039fa <sbrk_aligned+0x22>
 8003a14:	e7ef      	b.n	80039f6 <sbrk_aligned+0x1e>
 8003a16:	bf00      	nop
 8003a18:	20000348 	.word	0x20000348

08003a1c <_malloc_r>:
 8003a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a20:	1ccd      	adds	r5, r1, #3
 8003a22:	f025 0503 	bic.w	r5, r5, #3
 8003a26:	3508      	adds	r5, #8
 8003a28:	2d0c      	cmp	r5, #12
 8003a2a:	bf38      	it	cc
 8003a2c:	250c      	movcc	r5, #12
 8003a2e:	2d00      	cmp	r5, #0
 8003a30:	4606      	mov	r6, r0
 8003a32:	db01      	blt.n	8003a38 <_malloc_r+0x1c>
 8003a34:	42a9      	cmp	r1, r5
 8003a36:	d904      	bls.n	8003a42 <_malloc_r+0x26>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	6033      	str	r3, [r6, #0]
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b18 <_malloc_r+0xfc>
 8003a46:	f000 f869 	bl	8003b1c <__malloc_lock>
 8003a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a4e:	461c      	mov	r4, r3
 8003a50:	bb44      	cbnz	r4, 8003aa4 <_malloc_r+0x88>
 8003a52:	4629      	mov	r1, r5
 8003a54:	4630      	mov	r0, r6
 8003a56:	f7ff ffbf 	bl	80039d8 <sbrk_aligned>
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	d158      	bne.n	8003b12 <_malloc_r+0xf6>
 8003a60:	f8d8 4000 	ldr.w	r4, [r8]
 8003a64:	4627      	mov	r7, r4
 8003a66:	2f00      	cmp	r7, #0
 8003a68:	d143      	bne.n	8003af2 <_malloc_r+0xd6>
 8003a6a:	2c00      	cmp	r4, #0
 8003a6c:	d04b      	beq.n	8003b06 <_malloc_r+0xea>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	4639      	mov	r1, r7
 8003a72:	4630      	mov	r0, r6
 8003a74:	eb04 0903 	add.w	r9, r4, r3
 8003a78:	f000 faa2 	bl	8003fc0 <_sbrk_r>
 8003a7c:	4581      	cmp	r9, r0
 8003a7e:	d142      	bne.n	8003b06 <_malloc_r+0xea>
 8003a80:	6821      	ldr	r1, [r4, #0]
 8003a82:	1a6d      	subs	r5, r5, r1
 8003a84:	4629      	mov	r1, r5
 8003a86:	4630      	mov	r0, r6
 8003a88:	f7ff ffa6 	bl	80039d8 <sbrk_aligned>
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d03a      	beq.n	8003b06 <_malloc_r+0xea>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	442b      	add	r3, r5
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	bb62      	cbnz	r2, 8003af8 <_malloc_r+0xdc>
 8003a9e:	f8c8 7000 	str.w	r7, [r8]
 8003aa2:	e00f      	b.n	8003ac4 <_malloc_r+0xa8>
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	1b52      	subs	r2, r2, r5
 8003aa8:	d420      	bmi.n	8003aec <_malloc_r+0xd0>
 8003aaa:	2a0b      	cmp	r2, #11
 8003aac:	d917      	bls.n	8003ade <_malloc_r+0xc2>
 8003aae:	1961      	adds	r1, r4, r5
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	6025      	str	r5, [r4, #0]
 8003ab4:	bf18      	it	ne
 8003ab6:	6059      	strne	r1, [r3, #4]
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	bf08      	it	eq
 8003abc:	f8c8 1000 	streq.w	r1, [r8]
 8003ac0:	5162      	str	r2, [r4, r5]
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 f82f 	bl	8003b28 <__malloc_unlock>
 8003aca:	f104 000b 	add.w	r0, r4, #11
 8003ace:	1d23      	adds	r3, r4, #4
 8003ad0:	f020 0007 	bic.w	r0, r0, #7
 8003ad4:	1ac2      	subs	r2, r0, r3
 8003ad6:	bf1c      	itt	ne
 8003ad8:	1a1b      	subne	r3, r3, r0
 8003ada:	50a3      	strne	r3, [r4, r2]
 8003adc:	e7af      	b.n	8003a3e <_malloc_r+0x22>
 8003ade:	6862      	ldr	r2, [r4, #4]
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	bf0c      	ite	eq
 8003ae4:	f8c8 2000 	streq.w	r2, [r8]
 8003ae8:	605a      	strne	r2, [r3, #4]
 8003aea:	e7eb      	b.n	8003ac4 <_malloc_r+0xa8>
 8003aec:	4623      	mov	r3, r4
 8003aee:	6864      	ldr	r4, [r4, #4]
 8003af0:	e7ae      	b.n	8003a50 <_malloc_r+0x34>
 8003af2:	463c      	mov	r4, r7
 8003af4:	687f      	ldr	r7, [r7, #4]
 8003af6:	e7b6      	b.n	8003a66 <_malloc_r+0x4a>
 8003af8:	461a      	mov	r2, r3
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d1fb      	bne.n	8003af8 <_malloc_r+0xdc>
 8003b00:	2300      	movs	r3, #0
 8003b02:	6053      	str	r3, [r2, #4]
 8003b04:	e7de      	b.n	8003ac4 <_malloc_r+0xa8>
 8003b06:	230c      	movs	r3, #12
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 f80c 	bl	8003b28 <__malloc_unlock>
 8003b10:	e794      	b.n	8003a3c <_malloc_r+0x20>
 8003b12:	6005      	str	r5, [r0, #0]
 8003b14:	e7d6      	b.n	8003ac4 <_malloc_r+0xa8>
 8003b16:	bf00      	nop
 8003b18:	2000034c 	.word	0x2000034c

08003b1c <__malloc_lock>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	@ (8003b24 <__malloc_lock+0x8>)
 8003b1e:	f000 ba9c 	b.w	800405a <__retarget_lock_acquire_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000490 	.word	0x20000490

08003b28 <__malloc_unlock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	@ (8003b30 <__malloc_unlock+0x8>)
 8003b2a:	f000 ba97 	b.w	800405c <__retarget_lock_release_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000490 	.word	0x20000490

08003b34 <std>:
 8003b34:	2300      	movs	r3, #0
 8003b36:	b510      	push	{r4, lr}
 8003b38:	4604      	mov	r4, r0
 8003b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b42:	6083      	str	r3, [r0, #8]
 8003b44:	8181      	strh	r1, [r0, #12]
 8003b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b48:	81c2      	strh	r2, [r0, #14]
 8003b4a:	6183      	str	r3, [r0, #24]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	2208      	movs	r2, #8
 8003b50:	305c      	adds	r0, #92	@ 0x5c
 8003b52:	f000 f9f9 	bl	8003f48 <memset>
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <std+0x58>)
 8003b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <std+0x5c>)
 8003b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <std+0x60>)
 8003b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <std+0x64>)
 8003b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <std+0x68>)
 8003b68:	6224      	str	r4, [r4, #32]
 8003b6a:	429c      	cmp	r4, r3
 8003b6c:	d006      	beq.n	8003b7c <std+0x48>
 8003b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b72:	4294      	cmp	r4, r2
 8003b74:	d002      	beq.n	8003b7c <std+0x48>
 8003b76:	33d0      	adds	r3, #208	@ 0xd0
 8003b78:	429c      	cmp	r4, r3
 8003b7a:	d105      	bne.n	8003b88 <std+0x54>
 8003b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b84:	f000 ba68 	b.w	8004058 <__retarget_lock_init_recursive>
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	bf00      	nop
 8003b8c:	08003d99 	.word	0x08003d99
 8003b90:	08003dbb 	.word	0x08003dbb
 8003b94:	08003df3 	.word	0x08003df3
 8003b98:	08003e17 	.word	0x08003e17
 8003b9c:	20000350 	.word	0x20000350

08003ba0 <stdio_exit_handler>:
 8003ba0:	4a02      	ldr	r2, [pc, #8]	@ (8003bac <stdio_exit_handler+0xc>)
 8003ba2:	4903      	ldr	r1, [pc, #12]	@ (8003bb0 <stdio_exit_handler+0x10>)
 8003ba4:	4803      	ldr	r0, [pc, #12]	@ (8003bb4 <stdio_exit_handler+0x14>)
 8003ba6:	f000 b869 	b.w	8003c7c <_fwalk_sglue>
 8003baa:	bf00      	nop
 8003bac:	2000013c 	.word	0x2000013c
 8003bb0:	080047b9 	.word	0x080047b9
 8003bb4:	2000014c 	.word	0x2000014c

08003bb8 <cleanup_stdio>:
 8003bb8:	6841      	ldr	r1, [r0, #4]
 8003bba:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <cleanup_stdio+0x34>)
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	b510      	push	{r4, lr}
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	d001      	beq.n	8003bc8 <cleanup_stdio+0x10>
 8003bc4:	f000 fdf8 	bl	80047b8 <_fflush_r>
 8003bc8:	68a1      	ldr	r1, [r4, #8]
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <cleanup_stdio+0x38>)
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <cleanup_stdio+0x1e>
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 fdf1 	bl	80047b8 <_fflush_r>
 8003bd6:	68e1      	ldr	r1, [r4, #12]
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <cleanup_stdio+0x3c>)
 8003bda:	4299      	cmp	r1, r3
 8003bdc:	d004      	beq.n	8003be8 <cleanup_stdio+0x30>
 8003bde:	4620      	mov	r0, r4
 8003be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be4:	f000 bde8 	b.w	80047b8 <_fflush_r>
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	bf00      	nop
 8003bec:	20000350 	.word	0x20000350
 8003bf0:	200003b8 	.word	0x200003b8
 8003bf4:	20000420 	.word	0x20000420

08003bf8 <global_stdio_init.part.0>:
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <global_stdio_init.part.0+0x30>)
 8003bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8003c2c <global_stdio_init.part.0+0x34>)
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <global_stdio_init.part.0+0x38>)
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	4620      	mov	r0, r4
 8003c04:	2200      	movs	r2, #0
 8003c06:	2104      	movs	r1, #4
 8003c08:	f7ff ff94 	bl	8003b34 <std>
 8003c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c10:	2201      	movs	r2, #1
 8003c12:	2109      	movs	r1, #9
 8003c14:	f7ff ff8e 	bl	8003b34 <std>
 8003c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c22:	2112      	movs	r1, #18
 8003c24:	f7ff bf86 	b.w	8003b34 <std>
 8003c28:	20000488 	.word	0x20000488
 8003c2c:	20000350 	.word	0x20000350
 8003c30:	08003ba1 	.word	0x08003ba1

08003c34 <__sfp_lock_acquire>:
 8003c34:	4801      	ldr	r0, [pc, #4]	@ (8003c3c <__sfp_lock_acquire+0x8>)
 8003c36:	f000 ba10 	b.w	800405a <__retarget_lock_acquire_recursive>
 8003c3a:	bf00      	nop
 8003c3c:	20000491 	.word	0x20000491

08003c40 <__sfp_lock_release>:
 8003c40:	4801      	ldr	r0, [pc, #4]	@ (8003c48 <__sfp_lock_release+0x8>)
 8003c42:	f000 ba0b 	b.w	800405c <__retarget_lock_release_recursive>
 8003c46:	bf00      	nop
 8003c48:	20000491 	.word	0x20000491

08003c4c <__sinit>:
 8003c4c:	b510      	push	{r4, lr}
 8003c4e:	4604      	mov	r4, r0
 8003c50:	f7ff fff0 	bl	8003c34 <__sfp_lock_acquire>
 8003c54:	6a23      	ldr	r3, [r4, #32]
 8003c56:	b11b      	cbz	r3, 8003c60 <__sinit+0x14>
 8003c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c5c:	f7ff bff0 	b.w	8003c40 <__sfp_lock_release>
 8003c60:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <__sinit+0x28>)
 8003c62:	6223      	str	r3, [r4, #32]
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__sinit+0x2c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f5      	bne.n	8003c58 <__sinit+0xc>
 8003c6c:	f7ff ffc4 	bl	8003bf8 <global_stdio_init.part.0>
 8003c70:	e7f2      	b.n	8003c58 <__sinit+0xc>
 8003c72:	bf00      	nop
 8003c74:	08003bb9 	.word	0x08003bb9
 8003c78:	20000488 	.word	0x20000488

08003c7c <_fwalk_sglue>:
 8003c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c80:	4607      	mov	r7, r0
 8003c82:	4688      	mov	r8, r1
 8003c84:	4614      	mov	r4, r2
 8003c86:	2600      	movs	r6, #0
 8003c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8003c90:	d505      	bpl.n	8003c9e <_fwalk_sglue+0x22>
 8003c92:	6824      	ldr	r4, [r4, #0]
 8003c94:	2c00      	cmp	r4, #0
 8003c96:	d1f7      	bne.n	8003c88 <_fwalk_sglue+0xc>
 8003c98:	4630      	mov	r0, r6
 8003c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d907      	bls.n	8003cb4 <_fwalk_sglue+0x38>
 8003ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	d003      	beq.n	8003cb4 <_fwalk_sglue+0x38>
 8003cac:	4629      	mov	r1, r5
 8003cae:	4638      	mov	r0, r7
 8003cb0:	47c0      	blx	r8
 8003cb2:	4306      	orrs	r6, r0
 8003cb4:	3568      	adds	r5, #104	@ 0x68
 8003cb6:	e7e9      	b.n	8003c8c <_fwalk_sglue+0x10>

08003cb8 <iprintf>:
 8003cb8:	b40f      	push	{r0, r1, r2, r3}
 8003cba:	b507      	push	{r0, r1, r2, lr}
 8003cbc:	4906      	ldr	r1, [pc, #24]	@ (8003cd8 <iprintf+0x20>)
 8003cbe:	ab04      	add	r3, sp, #16
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc6:	6881      	ldr	r1, [r0, #8]
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	f000 fa4b 	bl	8004164 <_vfiprintf_r>
 8003cce:	b003      	add	sp, #12
 8003cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd4:	b004      	add	sp, #16
 8003cd6:	4770      	bx	lr
 8003cd8:	20000148 	.word	0x20000148

08003cdc <_puts_r>:
 8003cdc:	6a03      	ldr	r3, [r0, #32]
 8003cde:	b570      	push	{r4, r5, r6, lr}
 8003ce0:	6884      	ldr	r4, [r0, #8]
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	b90b      	cbnz	r3, 8003cec <_puts_r+0x10>
 8003ce8:	f7ff ffb0 	bl	8003c4c <__sinit>
 8003cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	d405      	bmi.n	8003cfe <_puts_r+0x22>
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	0598      	lsls	r0, r3, #22
 8003cf6:	d402      	bmi.n	8003cfe <_puts_r+0x22>
 8003cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cfa:	f000 f9ae 	bl	800405a <__retarget_lock_acquire_recursive>
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	0719      	lsls	r1, r3, #28
 8003d02:	d502      	bpl.n	8003d0a <_puts_r+0x2e>
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d135      	bne.n	8003d76 <_puts_r+0x9a>
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f000 f8c5 	bl	8003e9c <__swsetup_r>
 8003d12:	b380      	cbz	r0, 8003d76 <_puts_r+0x9a>
 8003d14:	f04f 35ff 	mov.w	r5, #4294967295
 8003d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d1a:	07da      	lsls	r2, r3, #31
 8003d1c:	d405      	bmi.n	8003d2a <_puts_r+0x4e>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	059b      	lsls	r3, r3, #22
 8003d22:	d402      	bmi.n	8003d2a <_puts_r+0x4e>
 8003d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d26:	f000 f999 	bl	800405c <__retarget_lock_release_recursive>
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da04      	bge.n	8003d3c <_puts_r+0x60>
 8003d32:	69a2      	ldr	r2, [r4, #24]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dc17      	bgt.n	8003d68 <_puts_r+0x8c>
 8003d38:	290a      	cmp	r1, #10
 8003d3a:	d015      	beq.n	8003d68 <_puts_r+0x8c>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	6022      	str	r2, [r4, #0]
 8003d42:	7019      	strb	r1, [r3, #0]
 8003d44:	68a3      	ldr	r3, [r4, #8]
 8003d46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60a3      	str	r3, [r4, #8]
 8003d4e:	2900      	cmp	r1, #0
 8003d50:	d1ed      	bne.n	8003d2e <_puts_r+0x52>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da11      	bge.n	8003d7a <_puts_r+0x9e>
 8003d56:	4622      	mov	r2, r4
 8003d58:	210a      	movs	r1, #10
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 f85f 	bl	8003e1e <__swbuf_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d0d7      	beq.n	8003d14 <_puts_r+0x38>
 8003d64:	250a      	movs	r5, #10
 8003d66:	e7d7      	b.n	8003d18 <_puts_r+0x3c>
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f857 	bl	8003e1e <__swbuf_r>
 8003d70:	3001      	adds	r0, #1
 8003d72:	d1e7      	bne.n	8003d44 <_puts_r+0x68>
 8003d74:	e7ce      	b.n	8003d14 <_puts_r+0x38>
 8003d76:	3e01      	subs	r6, #1
 8003d78:	e7e4      	b.n	8003d44 <_puts_r+0x68>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	6022      	str	r2, [r4, #0]
 8003d80:	220a      	movs	r2, #10
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e7ee      	b.n	8003d64 <_puts_r+0x88>
	...

08003d88 <puts>:
 8003d88:	4b02      	ldr	r3, [pc, #8]	@ (8003d94 <puts+0xc>)
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	f7ff bfa5 	b.w	8003cdc <_puts_r>
 8003d92:	bf00      	nop
 8003d94:	20000148 	.word	0x20000148

08003d98 <__sread>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da0:	f000 f8fc 	bl	8003f9c <_read_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	bfab      	itete	ge
 8003da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003daa:	89a3      	ldrhlt	r3, [r4, #12]
 8003dac:	181b      	addge	r3, r3, r0
 8003dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003db2:	bfac      	ite	ge
 8003db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003db6:	81a3      	strhlt	r3, [r4, #12]
 8003db8:	bd10      	pop	{r4, pc}

08003dba <__swrite>:
 8003dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	898b      	ldrh	r3, [r1, #12]
 8003dc2:	05db      	lsls	r3, r3, #23
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4616      	mov	r6, r2
 8003dca:	d505      	bpl.n	8003dd8 <__swrite+0x1e>
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f000 f8d0 	bl	8003f78 <_lseek_r>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	4632      	mov	r2, r6
 8003de6:	463b      	mov	r3, r7
 8003de8:	4628      	mov	r0, r5
 8003dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dee:	f000 b8f7 	b.w	8003fe0 <_write_r>

08003df2 <__sseek>:
 8003df2:	b510      	push	{r4, lr}
 8003df4:	460c      	mov	r4, r1
 8003df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfa:	f000 f8bd 	bl	8003f78 <_lseek_r>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	bf15      	itete	ne
 8003e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e0e:	81a3      	strheq	r3, [r4, #12]
 8003e10:	bf18      	it	ne
 8003e12:	81a3      	strhne	r3, [r4, #12]
 8003e14:	bd10      	pop	{r4, pc}

08003e16 <__sclose>:
 8003e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1a:	f000 b89d 	b.w	8003f58 <_close_r>

08003e1e <__swbuf_r>:
 8003e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e20:	460e      	mov	r6, r1
 8003e22:	4614      	mov	r4, r2
 8003e24:	4605      	mov	r5, r0
 8003e26:	b118      	cbz	r0, 8003e30 <__swbuf_r+0x12>
 8003e28:	6a03      	ldr	r3, [r0, #32]
 8003e2a:	b90b      	cbnz	r3, 8003e30 <__swbuf_r+0x12>
 8003e2c:	f7ff ff0e 	bl	8003c4c <__sinit>
 8003e30:	69a3      	ldr	r3, [r4, #24]
 8003e32:	60a3      	str	r3, [r4, #8]
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	071a      	lsls	r2, r3, #28
 8003e38:	d501      	bpl.n	8003e3e <__swbuf_r+0x20>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	b943      	cbnz	r3, 8003e50 <__swbuf_r+0x32>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	f000 f82b 	bl	8003e9c <__swsetup_r>
 8003e46:	b118      	cbz	r0, 8003e50 <__swbuf_r+0x32>
 8003e48:	f04f 37ff 	mov.w	r7, #4294967295
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	6922      	ldr	r2, [r4, #16]
 8003e54:	1a98      	subs	r0, r3, r2
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	b2f6      	uxtb	r6, r6
 8003e5a:	4283      	cmp	r3, r0
 8003e5c:	4637      	mov	r7, r6
 8003e5e:	dc05      	bgt.n	8003e6c <__swbuf_r+0x4e>
 8003e60:	4621      	mov	r1, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 fca8 	bl	80047b8 <_fflush_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1ed      	bne.n	8003e48 <__swbuf_r+0x2a>
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	60a3      	str	r3, [r4, #8]
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	6022      	str	r2, [r4, #0]
 8003e78:	701e      	strb	r6, [r3, #0]
 8003e7a:	6962      	ldr	r2, [r4, #20]
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d004      	beq.n	8003e8c <__swbuf_r+0x6e>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	07db      	lsls	r3, r3, #31
 8003e86:	d5e1      	bpl.n	8003e4c <__swbuf_r+0x2e>
 8003e88:	2e0a      	cmp	r6, #10
 8003e8a:	d1df      	bne.n	8003e4c <__swbuf_r+0x2e>
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 fc92 	bl	80047b8 <_fflush_r>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d0d9      	beq.n	8003e4c <__swbuf_r+0x2e>
 8003e98:	e7d6      	b.n	8003e48 <__swbuf_r+0x2a>
	...

08003e9c <__swsetup_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4b29      	ldr	r3, [pc, #164]	@ (8003f44 <__swsetup_r+0xa8>)
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	b118      	cbz	r0, 8003eb0 <__swsetup_r+0x14>
 8003ea8:	6a03      	ldr	r3, [r0, #32]
 8003eaa:	b90b      	cbnz	r3, 8003eb0 <__swsetup_r+0x14>
 8003eac:	f7ff fece 	bl	8003c4c <__sinit>
 8003eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb4:	0719      	lsls	r1, r3, #28
 8003eb6:	d422      	bmi.n	8003efe <__swsetup_r+0x62>
 8003eb8:	06da      	lsls	r2, r3, #27
 8003eba:	d407      	bmi.n	8003ecc <__swsetup_r+0x30>
 8003ebc:	2209      	movs	r2, #9
 8003ebe:	602a      	str	r2, [r5, #0]
 8003ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	e033      	b.n	8003f34 <__swsetup_r+0x98>
 8003ecc:	0758      	lsls	r0, r3, #29
 8003ece:	d512      	bpl.n	8003ef6 <__swsetup_r+0x5a>
 8003ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ed2:	b141      	cbz	r1, 8003ee6 <__swsetup_r+0x4a>
 8003ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ed8:	4299      	cmp	r1, r3
 8003eda:	d002      	beq.n	8003ee2 <__swsetup_r+0x46>
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f8cd 	bl	800407c <_free_r>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6063      	str	r3, [r4, #4]
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f043 0308 	orr.w	r3, r3, #8
 8003efc:	81a3      	strh	r3, [r4, #12]
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	b94b      	cbnz	r3, 8003f16 <__swsetup_r+0x7a>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f0c:	d003      	beq.n	8003f16 <__swsetup_r+0x7a>
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 fc9f 	bl	8004854 <__smakebuf_r>
 8003f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f1a:	f013 0201 	ands.w	r2, r3, #1
 8003f1e:	d00a      	beq.n	8003f36 <__swsetup_r+0x9a>
 8003f20:	2200      	movs	r2, #0
 8003f22:	60a2      	str	r2, [r4, #8]
 8003f24:	6962      	ldr	r2, [r4, #20]
 8003f26:	4252      	negs	r2, r2
 8003f28:	61a2      	str	r2, [r4, #24]
 8003f2a:	6922      	ldr	r2, [r4, #16]
 8003f2c:	b942      	cbnz	r2, 8003f40 <__swsetup_r+0xa4>
 8003f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f32:	d1c5      	bne.n	8003ec0 <__swsetup_r+0x24>
 8003f34:	bd38      	pop	{r3, r4, r5, pc}
 8003f36:	0799      	lsls	r1, r3, #30
 8003f38:	bf58      	it	pl
 8003f3a:	6962      	ldrpl	r2, [r4, #20]
 8003f3c:	60a2      	str	r2, [r4, #8]
 8003f3e:	e7f4      	b.n	8003f2a <__swsetup_r+0x8e>
 8003f40:	2000      	movs	r0, #0
 8003f42:	e7f7      	b.n	8003f34 <__swsetup_r+0x98>
 8003f44:	20000148 	.word	0x20000148

08003f48 <memset>:
 8003f48:	4402      	add	r2, r0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	f803 1b01 	strb.w	r1, [r3], #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <_close_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d06      	ldr	r5, [pc, #24]	@ (8003f74 <_close_r+0x1c>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	f7fd fc76 	bl	8001854 <_close>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_close_r+0x1a>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_close_r+0x1a>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	2000048c 	.word	0x2000048c

08003f78 <_lseek_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d07      	ldr	r5, [pc, #28]	@ (8003f98 <_lseek_r+0x20>)
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	4608      	mov	r0, r1
 8003f80:	4611      	mov	r1, r2
 8003f82:	2200      	movs	r2, #0
 8003f84:	602a      	str	r2, [r5, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f7fd fc8b 	bl	80018a2 <_lseek>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_lseek_r+0x1e>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_lseek_r+0x1e>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	2000048c 	.word	0x2000048c

08003f9c <_read_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	@ (8003fbc <_read_r+0x20>)
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	602a      	str	r2, [r5, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7fd fc08 	bl	80017c0 <_read>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_read_r+0x1e>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_read_r+0x1e>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	2000048c 	.word	0x2000048c

08003fc0 <_sbrk_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	@ (8003fdc <_sbrk_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7fd fc16 	bl	80017fc <_sbrk>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_sbrk_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_sbrk_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	2000048c 	.word	0x2000048c

08003fe0 <_write_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	@ (8004000 <_write_r+0x20>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fd f82b 	bl	800104a <_write>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_write_r+0x1e>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_write_r+0x1e>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	2000048c 	.word	0x2000048c

08004004 <__errno>:
 8004004:	4b01      	ldr	r3, [pc, #4]	@ (800400c <__errno+0x8>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000148 	.word	0x20000148

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	@ (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	@ (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	@ (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	@ (8004054 <__libc_init_array+0x44>)
 8004024:	f000 fc74 	bl	8004910 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004c58 	.word	0x08004c58
 800404c:	08004c58 	.word	0x08004c58
 8004050:	08004c58 	.word	0x08004c58
 8004054:	08004c5c 	.word	0x08004c5c

08004058 <__retarget_lock_init_recursive>:
 8004058:	4770      	bx	lr

0800405a <__retarget_lock_acquire_recursive>:
 800405a:	4770      	bx	lr

0800405c <__retarget_lock_release_recursive>:
 800405c:	4770      	bx	lr

0800405e <memcpy>:
 800405e:	440a      	add	r2, r1
 8004060:	4291      	cmp	r1, r2
 8004062:	f100 33ff 	add.w	r3, r0, #4294967295
 8004066:	d100      	bne.n	800406a <memcpy+0xc>
 8004068:	4770      	bx	lr
 800406a:	b510      	push	{r4, lr}
 800406c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004070:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004074:	4291      	cmp	r1, r2
 8004076:	d1f9      	bne.n	800406c <memcpy+0xe>
 8004078:	bd10      	pop	{r4, pc}
	...

0800407c <_free_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4605      	mov	r5, r0
 8004080:	2900      	cmp	r1, #0
 8004082:	d041      	beq.n	8004108 <_free_r+0x8c>
 8004084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004088:	1f0c      	subs	r4, r1, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfb8      	it	lt
 800408e:	18e4      	addlt	r4, r4, r3
 8004090:	f7ff fd44 	bl	8003b1c <__malloc_lock>
 8004094:	4a1d      	ldr	r2, [pc, #116]	@ (800410c <_free_r+0x90>)
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	b933      	cbnz	r3, 80040a8 <_free_r+0x2c>
 800409a:	6063      	str	r3, [r4, #4]
 800409c:	6014      	str	r4, [r2, #0]
 800409e:	4628      	mov	r0, r5
 80040a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a4:	f7ff bd40 	b.w	8003b28 <__malloc_unlock>
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	d908      	bls.n	80040be <_free_r+0x42>
 80040ac:	6820      	ldr	r0, [r4, #0]
 80040ae:	1821      	adds	r1, r4, r0
 80040b0:	428b      	cmp	r3, r1
 80040b2:	bf01      	itttt	eq
 80040b4:	6819      	ldreq	r1, [r3, #0]
 80040b6:	685b      	ldreq	r3, [r3, #4]
 80040b8:	1809      	addeq	r1, r1, r0
 80040ba:	6021      	streq	r1, [r4, #0]
 80040bc:	e7ed      	b.n	800409a <_free_r+0x1e>
 80040be:	461a      	mov	r2, r3
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b10b      	cbz	r3, 80040c8 <_free_r+0x4c>
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d9fa      	bls.n	80040be <_free_r+0x42>
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	1850      	adds	r0, r2, r1
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d10b      	bne.n	80040e8 <_free_r+0x6c>
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	4401      	add	r1, r0
 80040d4:	1850      	adds	r0, r2, r1
 80040d6:	4283      	cmp	r3, r0
 80040d8:	6011      	str	r1, [r2, #0]
 80040da:	d1e0      	bne.n	800409e <_free_r+0x22>
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	6053      	str	r3, [r2, #4]
 80040e2:	4408      	add	r0, r1
 80040e4:	6010      	str	r0, [r2, #0]
 80040e6:	e7da      	b.n	800409e <_free_r+0x22>
 80040e8:	d902      	bls.n	80040f0 <_free_r+0x74>
 80040ea:	230c      	movs	r3, #12
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	e7d6      	b.n	800409e <_free_r+0x22>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	1821      	adds	r1, r4, r0
 80040f4:	428b      	cmp	r3, r1
 80040f6:	bf04      	itt	eq
 80040f8:	6819      	ldreq	r1, [r3, #0]
 80040fa:	685b      	ldreq	r3, [r3, #4]
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	bf04      	itt	eq
 8004100:	1809      	addeq	r1, r1, r0
 8004102:	6021      	streq	r1, [r4, #0]
 8004104:	6054      	str	r4, [r2, #4]
 8004106:	e7ca      	b.n	800409e <_free_r+0x22>
 8004108:	bd38      	pop	{r3, r4, r5, pc}
 800410a:	bf00      	nop
 800410c:	2000034c 	.word	0x2000034c

08004110 <__sfputc_r>:
 8004110:	6893      	ldr	r3, [r2, #8]
 8004112:	3b01      	subs	r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	b410      	push	{r4}
 8004118:	6093      	str	r3, [r2, #8]
 800411a:	da08      	bge.n	800412e <__sfputc_r+0x1e>
 800411c:	6994      	ldr	r4, [r2, #24]
 800411e:	42a3      	cmp	r3, r4
 8004120:	db01      	blt.n	8004126 <__sfputc_r+0x16>
 8004122:	290a      	cmp	r1, #10
 8004124:	d103      	bne.n	800412e <__sfputc_r+0x1e>
 8004126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800412a:	f7ff be78 	b.w	8003e1e <__swbuf_r>
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	1c58      	adds	r0, r3, #1
 8004132:	6010      	str	r0, [r2, #0]
 8004134:	7019      	strb	r1, [r3, #0]
 8004136:	4608      	mov	r0, r1
 8004138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800413c:	4770      	bx	lr

0800413e <__sfputs_r>:
 800413e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004140:	4606      	mov	r6, r0
 8004142:	460f      	mov	r7, r1
 8004144:	4614      	mov	r4, r2
 8004146:	18d5      	adds	r5, r2, r3
 8004148:	42ac      	cmp	r4, r5
 800414a:	d101      	bne.n	8004150 <__sfputs_r+0x12>
 800414c:	2000      	movs	r0, #0
 800414e:	e007      	b.n	8004160 <__sfputs_r+0x22>
 8004150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004154:	463a      	mov	r2, r7
 8004156:	4630      	mov	r0, r6
 8004158:	f7ff ffda 	bl	8004110 <__sfputc_r>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d1f3      	bne.n	8004148 <__sfputs_r+0xa>
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004164 <_vfiprintf_r>:
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	460d      	mov	r5, r1
 800416a:	b09d      	sub	sp, #116	@ 0x74
 800416c:	4614      	mov	r4, r2
 800416e:	4698      	mov	r8, r3
 8004170:	4606      	mov	r6, r0
 8004172:	b118      	cbz	r0, 800417c <_vfiprintf_r+0x18>
 8004174:	6a03      	ldr	r3, [r0, #32]
 8004176:	b90b      	cbnz	r3, 800417c <_vfiprintf_r+0x18>
 8004178:	f7ff fd68 	bl	8003c4c <__sinit>
 800417c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800417e:	07d9      	lsls	r1, r3, #31
 8004180:	d405      	bmi.n	800418e <_vfiprintf_r+0x2a>
 8004182:	89ab      	ldrh	r3, [r5, #12]
 8004184:	059a      	lsls	r2, r3, #22
 8004186:	d402      	bmi.n	800418e <_vfiprintf_r+0x2a>
 8004188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800418a:	f7ff ff66 	bl	800405a <__retarget_lock_acquire_recursive>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	071b      	lsls	r3, r3, #28
 8004192:	d501      	bpl.n	8004198 <_vfiprintf_r+0x34>
 8004194:	692b      	ldr	r3, [r5, #16]
 8004196:	b99b      	cbnz	r3, 80041c0 <_vfiprintf_r+0x5c>
 8004198:	4629      	mov	r1, r5
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff fe7e 	bl	8003e9c <__swsetup_r>
 80041a0:	b170      	cbz	r0, 80041c0 <_vfiprintf_r+0x5c>
 80041a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041a4:	07dc      	lsls	r4, r3, #31
 80041a6:	d504      	bpl.n	80041b2 <_vfiprintf_r+0x4e>
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	b01d      	add	sp, #116	@ 0x74
 80041ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b2:	89ab      	ldrh	r3, [r5, #12]
 80041b4:	0598      	lsls	r0, r3, #22
 80041b6:	d4f7      	bmi.n	80041a8 <_vfiprintf_r+0x44>
 80041b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041ba:	f7ff ff4f 	bl	800405c <__retarget_lock_release_recursive>
 80041be:	e7f3      	b.n	80041a8 <_vfiprintf_r+0x44>
 80041c0:	2300      	movs	r3, #0
 80041c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041c4:	2320      	movs	r3, #32
 80041c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ce:	2330      	movs	r3, #48	@ 0x30
 80041d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004380 <_vfiprintf_r+0x21c>
 80041d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041d8:	f04f 0901 	mov.w	r9, #1
 80041dc:	4623      	mov	r3, r4
 80041de:	469a      	mov	sl, r3
 80041e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041e4:	b10a      	cbz	r2, 80041ea <_vfiprintf_r+0x86>
 80041e6:	2a25      	cmp	r2, #37	@ 0x25
 80041e8:	d1f9      	bne.n	80041de <_vfiprintf_r+0x7a>
 80041ea:	ebba 0b04 	subs.w	fp, sl, r4
 80041ee:	d00b      	beq.n	8004208 <_vfiprintf_r+0xa4>
 80041f0:	465b      	mov	r3, fp
 80041f2:	4622      	mov	r2, r4
 80041f4:	4629      	mov	r1, r5
 80041f6:	4630      	mov	r0, r6
 80041f8:	f7ff ffa1 	bl	800413e <__sfputs_r>
 80041fc:	3001      	adds	r0, #1
 80041fe:	f000 80a7 	beq.w	8004350 <_vfiprintf_r+0x1ec>
 8004202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004204:	445a      	add	r2, fp
 8004206:	9209      	str	r2, [sp, #36]	@ 0x24
 8004208:	f89a 3000 	ldrb.w	r3, [sl]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 809f 	beq.w	8004350 <_vfiprintf_r+0x1ec>
 8004212:	2300      	movs	r3, #0
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800421c:	f10a 0a01 	add.w	sl, sl, #1
 8004220:	9304      	str	r3, [sp, #16]
 8004222:	9307      	str	r3, [sp, #28]
 8004224:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004228:	931a      	str	r3, [sp, #104]	@ 0x68
 800422a:	4654      	mov	r4, sl
 800422c:	2205      	movs	r2, #5
 800422e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004232:	4853      	ldr	r0, [pc, #332]	@ (8004380 <_vfiprintf_r+0x21c>)
 8004234:	f7fb ffcc 	bl	80001d0 <memchr>
 8004238:	9a04      	ldr	r2, [sp, #16]
 800423a:	b9d8      	cbnz	r0, 8004274 <_vfiprintf_r+0x110>
 800423c:	06d1      	lsls	r1, r2, #27
 800423e:	bf44      	itt	mi
 8004240:	2320      	movmi	r3, #32
 8004242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004246:	0713      	lsls	r3, r2, #28
 8004248:	bf44      	itt	mi
 800424a:	232b      	movmi	r3, #43	@ 0x2b
 800424c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004250:	f89a 3000 	ldrb.w	r3, [sl]
 8004254:	2b2a      	cmp	r3, #42	@ 0x2a
 8004256:	d015      	beq.n	8004284 <_vfiprintf_r+0x120>
 8004258:	9a07      	ldr	r2, [sp, #28]
 800425a:	4654      	mov	r4, sl
 800425c:	2000      	movs	r0, #0
 800425e:	f04f 0c0a 	mov.w	ip, #10
 8004262:	4621      	mov	r1, r4
 8004264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004268:	3b30      	subs	r3, #48	@ 0x30
 800426a:	2b09      	cmp	r3, #9
 800426c:	d94b      	bls.n	8004306 <_vfiprintf_r+0x1a2>
 800426e:	b1b0      	cbz	r0, 800429e <_vfiprintf_r+0x13a>
 8004270:	9207      	str	r2, [sp, #28]
 8004272:	e014      	b.n	800429e <_vfiprintf_r+0x13a>
 8004274:	eba0 0308 	sub.w	r3, r0, r8
 8004278:	fa09 f303 	lsl.w	r3, r9, r3
 800427c:	4313      	orrs	r3, r2
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	46a2      	mov	sl, r4
 8004282:	e7d2      	b.n	800422a <_vfiprintf_r+0xc6>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	1d19      	adds	r1, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9103      	str	r1, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfbb      	ittet	lt
 8004290:	425b      	neglt	r3, r3
 8004292:	f042 0202 	orrlt.w	r2, r2, #2
 8004296:	9307      	strge	r3, [sp, #28]
 8004298:	9307      	strlt	r3, [sp, #28]
 800429a:	bfb8      	it	lt
 800429c:	9204      	strlt	r2, [sp, #16]
 800429e:	7823      	ldrb	r3, [r4, #0]
 80042a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80042a2:	d10a      	bne.n	80042ba <_vfiprintf_r+0x156>
 80042a4:	7863      	ldrb	r3, [r4, #1]
 80042a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a8:	d132      	bne.n	8004310 <_vfiprintf_r+0x1ac>
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	1d1a      	adds	r2, r3, #4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	9203      	str	r2, [sp, #12]
 80042b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042b6:	3402      	adds	r4, #2
 80042b8:	9305      	str	r3, [sp, #20]
 80042ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004390 <_vfiprintf_r+0x22c>
 80042be:	7821      	ldrb	r1, [r4, #0]
 80042c0:	2203      	movs	r2, #3
 80042c2:	4650      	mov	r0, sl
 80042c4:	f7fb ff84 	bl	80001d0 <memchr>
 80042c8:	b138      	cbz	r0, 80042da <_vfiprintf_r+0x176>
 80042ca:	9b04      	ldr	r3, [sp, #16]
 80042cc:	eba0 000a 	sub.w	r0, r0, sl
 80042d0:	2240      	movs	r2, #64	@ 0x40
 80042d2:	4082      	lsls	r2, r0
 80042d4:	4313      	orrs	r3, r2
 80042d6:	3401      	adds	r4, #1
 80042d8:	9304      	str	r3, [sp, #16]
 80042da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042de:	4829      	ldr	r0, [pc, #164]	@ (8004384 <_vfiprintf_r+0x220>)
 80042e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042e4:	2206      	movs	r2, #6
 80042e6:	f7fb ff73 	bl	80001d0 <memchr>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d03f      	beq.n	800436e <_vfiprintf_r+0x20a>
 80042ee:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <_vfiprintf_r+0x224>)
 80042f0:	bb1b      	cbnz	r3, 800433a <_vfiprintf_r+0x1d6>
 80042f2:	9b03      	ldr	r3, [sp, #12]
 80042f4:	3307      	adds	r3, #7
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	3308      	adds	r3, #8
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004300:	443b      	add	r3, r7
 8004302:	9309      	str	r3, [sp, #36]	@ 0x24
 8004304:	e76a      	b.n	80041dc <_vfiprintf_r+0x78>
 8004306:	fb0c 3202 	mla	r2, ip, r2, r3
 800430a:	460c      	mov	r4, r1
 800430c:	2001      	movs	r0, #1
 800430e:	e7a8      	b.n	8004262 <_vfiprintf_r+0xfe>
 8004310:	2300      	movs	r3, #0
 8004312:	3401      	adds	r4, #1
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	4619      	mov	r1, r3
 8004318:	f04f 0c0a 	mov.w	ip, #10
 800431c:	4620      	mov	r0, r4
 800431e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004322:	3a30      	subs	r2, #48	@ 0x30
 8004324:	2a09      	cmp	r2, #9
 8004326:	d903      	bls.n	8004330 <_vfiprintf_r+0x1cc>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0c6      	beq.n	80042ba <_vfiprintf_r+0x156>
 800432c:	9105      	str	r1, [sp, #20]
 800432e:	e7c4      	b.n	80042ba <_vfiprintf_r+0x156>
 8004330:	fb0c 2101 	mla	r1, ip, r1, r2
 8004334:	4604      	mov	r4, r0
 8004336:	2301      	movs	r3, #1
 8004338:	e7f0      	b.n	800431c <_vfiprintf_r+0x1b8>
 800433a:	ab03      	add	r3, sp, #12
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	462a      	mov	r2, r5
 8004340:	4b12      	ldr	r3, [pc, #72]	@ (800438c <_vfiprintf_r+0x228>)
 8004342:	a904      	add	r1, sp, #16
 8004344:	4630      	mov	r0, r6
 8004346:	f3af 8000 	nop.w
 800434a:	4607      	mov	r7, r0
 800434c:	1c78      	adds	r0, r7, #1
 800434e:	d1d6      	bne.n	80042fe <_vfiprintf_r+0x19a>
 8004350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004352:	07d9      	lsls	r1, r3, #31
 8004354:	d405      	bmi.n	8004362 <_vfiprintf_r+0x1fe>
 8004356:	89ab      	ldrh	r3, [r5, #12]
 8004358:	059a      	lsls	r2, r3, #22
 800435a:	d402      	bmi.n	8004362 <_vfiprintf_r+0x1fe>
 800435c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800435e:	f7ff fe7d 	bl	800405c <__retarget_lock_release_recursive>
 8004362:	89ab      	ldrh	r3, [r5, #12]
 8004364:	065b      	lsls	r3, r3, #25
 8004366:	f53f af1f 	bmi.w	80041a8 <_vfiprintf_r+0x44>
 800436a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800436c:	e71e      	b.n	80041ac <_vfiprintf_r+0x48>
 800436e:	ab03      	add	r3, sp, #12
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	462a      	mov	r2, r5
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <_vfiprintf_r+0x228>)
 8004376:	a904      	add	r1, sp, #16
 8004378:	4630      	mov	r0, r6
 800437a:	f000 f879 	bl	8004470 <_printf_i>
 800437e:	e7e4      	b.n	800434a <_vfiprintf_r+0x1e6>
 8004380:	08004c1c 	.word	0x08004c1c
 8004384:	08004c26 	.word	0x08004c26
 8004388:	00000000 	.word	0x00000000
 800438c:	0800413f 	.word	0x0800413f
 8004390:	08004c22 	.word	0x08004c22

08004394 <_printf_common>:
 8004394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	4616      	mov	r6, r2
 800439a:	4698      	mov	r8, r3
 800439c:	688a      	ldr	r2, [r1, #8]
 800439e:	690b      	ldr	r3, [r1, #16]
 80043a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bfb8      	it	lt
 80043a8:	4613      	movlt	r3, r2
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043b0:	4607      	mov	r7, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	b10a      	cbz	r2, 80043ba <_printf_common+0x26>
 80043b6:	3301      	adds	r3, #1
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	0699      	lsls	r1, r3, #26
 80043be:	bf42      	ittt	mi
 80043c0:	6833      	ldrmi	r3, [r6, #0]
 80043c2:	3302      	addmi	r3, #2
 80043c4:	6033      	strmi	r3, [r6, #0]
 80043c6:	6825      	ldr	r5, [r4, #0]
 80043c8:	f015 0506 	ands.w	r5, r5, #6
 80043cc:	d106      	bne.n	80043dc <_printf_common+0x48>
 80043ce:	f104 0a19 	add.w	sl, r4, #25
 80043d2:	68e3      	ldr	r3, [r4, #12]
 80043d4:	6832      	ldr	r2, [r6, #0]
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	42ab      	cmp	r3, r5
 80043da:	dc26      	bgt.n	800442a <_printf_common+0x96>
 80043dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	3b00      	subs	r3, #0
 80043e4:	bf18      	it	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	0692      	lsls	r2, r2, #26
 80043ea:	d42b      	bmi.n	8004444 <_printf_common+0xb0>
 80043ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043f0:	4641      	mov	r1, r8
 80043f2:	4638      	mov	r0, r7
 80043f4:	47c8      	blx	r9
 80043f6:	3001      	adds	r0, #1
 80043f8:	d01e      	beq.n	8004438 <_printf_common+0xa4>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	6922      	ldr	r2, [r4, #16]
 80043fe:	f003 0306 	and.w	r3, r3, #6
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf02      	ittt	eq
 8004406:	68e5      	ldreq	r5, [r4, #12]
 8004408:	6833      	ldreq	r3, [r6, #0]
 800440a:	1aed      	subeq	r5, r5, r3
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	bf0c      	ite	eq
 8004410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004414:	2500      	movne	r5, #0
 8004416:	4293      	cmp	r3, r2
 8004418:	bfc4      	itt	gt
 800441a:	1a9b      	subgt	r3, r3, r2
 800441c:	18ed      	addgt	r5, r5, r3
 800441e:	2600      	movs	r6, #0
 8004420:	341a      	adds	r4, #26
 8004422:	42b5      	cmp	r5, r6
 8004424:	d11a      	bne.n	800445c <_printf_common+0xc8>
 8004426:	2000      	movs	r0, #0
 8004428:	e008      	b.n	800443c <_printf_common+0xa8>
 800442a:	2301      	movs	r3, #1
 800442c:	4652      	mov	r2, sl
 800442e:	4641      	mov	r1, r8
 8004430:	4638      	mov	r0, r7
 8004432:	47c8      	blx	r9
 8004434:	3001      	adds	r0, #1
 8004436:	d103      	bne.n	8004440 <_printf_common+0xac>
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004440:	3501      	adds	r5, #1
 8004442:	e7c6      	b.n	80043d2 <_printf_common+0x3e>
 8004444:	18e1      	adds	r1, r4, r3
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	2030      	movs	r0, #48	@ 0x30
 800444a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800444e:	4422      	add	r2, r4
 8004450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004458:	3302      	adds	r3, #2
 800445a:	e7c7      	b.n	80043ec <_printf_common+0x58>
 800445c:	2301      	movs	r3, #1
 800445e:	4622      	mov	r2, r4
 8004460:	4641      	mov	r1, r8
 8004462:	4638      	mov	r0, r7
 8004464:	47c8      	blx	r9
 8004466:	3001      	adds	r0, #1
 8004468:	d0e6      	beq.n	8004438 <_printf_common+0xa4>
 800446a:	3601      	adds	r6, #1
 800446c:	e7d9      	b.n	8004422 <_printf_common+0x8e>
	...

08004470 <_printf_i>:
 8004470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	7e0f      	ldrb	r7, [r1, #24]
 8004476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004478:	2f78      	cmp	r7, #120	@ 0x78
 800447a:	4691      	mov	r9, r2
 800447c:	4680      	mov	r8, r0
 800447e:	460c      	mov	r4, r1
 8004480:	469a      	mov	sl, r3
 8004482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004486:	d807      	bhi.n	8004498 <_printf_i+0x28>
 8004488:	2f62      	cmp	r7, #98	@ 0x62
 800448a:	d80a      	bhi.n	80044a2 <_printf_i+0x32>
 800448c:	2f00      	cmp	r7, #0
 800448e:	f000 80d2 	beq.w	8004636 <_printf_i+0x1c6>
 8004492:	2f58      	cmp	r7, #88	@ 0x58
 8004494:	f000 80b9 	beq.w	800460a <_printf_i+0x19a>
 8004498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800449c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044a0:	e03a      	b.n	8004518 <_printf_i+0xa8>
 80044a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044a6:	2b15      	cmp	r3, #21
 80044a8:	d8f6      	bhi.n	8004498 <_printf_i+0x28>
 80044aa:	a101      	add	r1, pc, #4	@ (adr r1, 80044b0 <_printf_i+0x40>)
 80044ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b0:	08004509 	.word	0x08004509
 80044b4:	0800451d 	.word	0x0800451d
 80044b8:	08004499 	.word	0x08004499
 80044bc:	08004499 	.word	0x08004499
 80044c0:	08004499 	.word	0x08004499
 80044c4:	08004499 	.word	0x08004499
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004499 	.word	0x08004499
 80044d0:	08004499 	.word	0x08004499
 80044d4:	08004499 	.word	0x08004499
 80044d8:	08004499 	.word	0x08004499
 80044dc:	0800461d 	.word	0x0800461d
 80044e0:	08004547 	.word	0x08004547
 80044e4:	080045d7 	.word	0x080045d7
 80044e8:	08004499 	.word	0x08004499
 80044ec:	08004499 	.word	0x08004499
 80044f0:	0800463f 	.word	0x0800463f
 80044f4:	08004499 	.word	0x08004499
 80044f8:	08004547 	.word	0x08004547
 80044fc:	08004499 	.word	0x08004499
 8004500:	08004499 	.word	0x08004499
 8004504:	080045df 	.word	0x080045df
 8004508:	6833      	ldr	r3, [r6, #0]
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6032      	str	r2, [r6, #0]
 8004510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004518:	2301      	movs	r3, #1
 800451a:	e09d      	b.n	8004658 <_printf_i+0x1e8>
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	1d19      	adds	r1, r3, #4
 8004522:	6031      	str	r1, [r6, #0]
 8004524:	0606      	lsls	r6, r0, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xbc>
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	e003      	b.n	8004534 <_printf_i+0xc4>
 800452c:	0645      	lsls	r5, r0, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xb8>
 8004530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004534:	2d00      	cmp	r5, #0
 8004536:	da03      	bge.n	8004540 <_printf_i+0xd0>
 8004538:	232d      	movs	r3, #45	@ 0x2d
 800453a:	426d      	negs	r5, r5
 800453c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004540:	4859      	ldr	r0, [pc, #356]	@ (80046a8 <_printf_i+0x238>)
 8004542:	230a      	movs	r3, #10
 8004544:	e011      	b.n	800456a <_printf_i+0xfa>
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	0608      	lsls	r0, r1, #24
 800454c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004550:	d402      	bmi.n	8004558 <_printf_i+0xe8>
 8004552:	0649      	lsls	r1, r1, #25
 8004554:	bf48      	it	mi
 8004556:	b2ad      	uxthmi	r5, r5
 8004558:	2f6f      	cmp	r7, #111	@ 0x6f
 800455a:	4853      	ldr	r0, [pc, #332]	@ (80046a8 <_printf_i+0x238>)
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	bf14      	ite	ne
 8004560:	230a      	movne	r3, #10
 8004562:	2308      	moveq	r3, #8
 8004564:	2100      	movs	r1, #0
 8004566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800456a:	6866      	ldr	r6, [r4, #4]
 800456c:	60a6      	str	r6, [r4, #8]
 800456e:	2e00      	cmp	r6, #0
 8004570:	bfa2      	ittt	ge
 8004572:	6821      	ldrge	r1, [r4, #0]
 8004574:	f021 0104 	bicge.w	r1, r1, #4
 8004578:	6021      	strge	r1, [r4, #0]
 800457a:	b90d      	cbnz	r5, 8004580 <_printf_i+0x110>
 800457c:	2e00      	cmp	r6, #0
 800457e:	d04b      	beq.n	8004618 <_printf_i+0x1a8>
 8004580:	4616      	mov	r6, r2
 8004582:	fbb5 f1f3 	udiv	r1, r5, r3
 8004586:	fb03 5711 	mls	r7, r3, r1, r5
 800458a:	5dc7      	ldrb	r7, [r0, r7]
 800458c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004590:	462f      	mov	r7, r5
 8004592:	42bb      	cmp	r3, r7
 8004594:	460d      	mov	r5, r1
 8004596:	d9f4      	bls.n	8004582 <_printf_i+0x112>
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10b      	bne.n	80045b4 <_printf_i+0x144>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	07df      	lsls	r7, r3, #31
 80045a0:	d508      	bpl.n	80045b4 <_printf_i+0x144>
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	6861      	ldr	r1, [r4, #4]
 80045a6:	4299      	cmp	r1, r3
 80045a8:	bfde      	ittt	le
 80045aa:	2330      	movle	r3, #48	@ 0x30
 80045ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045b4:	1b92      	subs	r2, r2, r6
 80045b6:	6122      	str	r2, [r4, #16]
 80045b8:	f8cd a000 	str.w	sl, [sp]
 80045bc:	464b      	mov	r3, r9
 80045be:	aa03      	add	r2, sp, #12
 80045c0:	4621      	mov	r1, r4
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fee6 	bl	8004394 <_printf_common>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d14a      	bne.n	8004662 <_printf_i+0x1f2>
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	b004      	add	sp, #16
 80045d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	4833      	ldr	r0, [pc, #204]	@ (80046ac <_printf_i+0x23c>)
 80045e0:	2778      	movs	r7, #120	@ 0x78
 80045e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6831      	ldr	r1, [r6, #0]
 80045ea:	061f      	lsls	r7, r3, #24
 80045ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80045f0:	d402      	bmi.n	80045f8 <_printf_i+0x188>
 80045f2:	065f      	lsls	r7, r3, #25
 80045f4:	bf48      	it	mi
 80045f6:	b2ad      	uxthmi	r5, r5
 80045f8:	6031      	str	r1, [r6, #0]
 80045fa:	07d9      	lsls	r1, r3, #31
 80045fc:	bf44      	itt	mi
 80045fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004602:	6023      	strmi	r3, [r4, #0]
 8004604:	b11d      	cbz	r5, 800460e <_printf_i+0x19e>
 8004606:	2310      	movs	r3, #16
 8004608:	e7ac      	b.n	8004564 <_printf_i+0xf4>
 800460a:	4827      	ldr	r0, [pc, #156]	@ (80046a8 <_printf_i+0x238>)
 800460c:	e7e9      	b.n	80045e2 <_printf_i+0x172>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f023 0320 	bic.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	e7f6      	b.n	8004606 <_printf_i+0x196>
 8004618:	4616      	mov	r6, r2
 800461a:	e7bd      	b.n	8004598 <_printf_i+0x128>
 800461c:	6833      	ldr	r3, [r6, #0]
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	6961      	ldr	r1, [r4, #20]
 8004622:	1d18      	adds	r0, r3, #4
 8004624:	6030      	str	r0, [r6, #0]
 8004626:	062e      	lsls	r6, r5, #24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	d501      	bpl.n	8004630 <_printf_i+0x1c0>
 800462c:	6019      	str	r1, [r3, #0]
 800462e:	e002      	b.n	8004636 <_printf_i+0x1c6>
 8004630:	0668      	lsls	r0, r5, #25
 8004632:	d5fb      	bpl.n	800462c <_printf_i+0x1bc>
 8004634:	8019      	strh	r1, [r3, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	4616      	mov	r6, r2
 800463c:	e7bc      	b.n	80045b8 <_printf_i+0x148>
 800463e:	6833      	ldr	r3, [r6, #0]
 8004640:	1d1a      	adds	r2, r3, #4
 8004642:	6032      	str	r2, [r6, #0]
 8004644:	681e      	ldr	r6, [r3, #0]
 8004646:	6862      	ldr	r2, [r4, #4]
 8004648:	2100      	movs	r1, #0
 800464a:	4630      	mov	r0, r6
 800464c:	f7fb fdc0 	bl	80001d0 <memchr>
 8004650:	b108      	cbz	r0, 8004656 <_printf_i+0x1e6>
 8004652:	1b80      	subs	r0, r0, r6
 8004654:	6060      	str	r0, [r4, #4]
 8004656:	6863      	ldr	r3, [r4, #4]
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	2300      	movs	r3, #0
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004660:	e7aa      	b.n	80045b8 <_printf_i+0x148>
 8004662:	6923      	ldr	r3, [r4, #16]
 8004664:	4632      	mov	r2, r6
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	47d0      	blx	sl
 800466c:	3001      	adds	r0, #1
 800466e:	d0ad      	beq.n	80045cc <_printf_i+0x15c>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	079b      	lsls	r3, r3, #30
 8004674:	d413      	bmi.n	800469e <_printf_i+0x22e>
 8004676:	68e0      	ldr	r0, [r4, #12]
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	4298      	cmp	r0, r3
 800467c:	bfb8      	it	lt
 800467e:	4618      	movlt	r0, r3
 8004680:	e7a6      	b.n	80045d0 <_printf_i+0x160>
 8004682:	2301      	movs	r3, #1
 8004684:	4632      	mov	r2, r6
 8004686:	4649      	mov	r1, r9
 8004688:	4640      	mov	r0, r8
 800468a:	47d0      	blx	sl
 800468c:	3001      	adds	r0, #1
 800468e:	d09d      	beq.n	80045cc <_printf_i+0x15c>
 8004690:	3501      	adds	r5, #1
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	9903      	ldr	r1, [sp, #12]
 8004696:	1a5b      	subs	r3, r3, r1
 8004698:	42ab      	cmp	r3, r5
 800469a:	dcf2      	bgt.n	8004682 <_printf_i+0x212>
 800469c:	e7eb      	b.n	8004676 <_printf_i+0x206>
 800469e:	2500      	movs	r5, #0
 80046a0:	f104 0619 	add.w	r6, r4, #25
 80046a4:	e7f5      	b.n	8004692 <_printf_i+0x222>
 80046a6:	bf00      	nop
 80046a8:	08004c2d 	.word	0x08004c2d
 80046ac:	08004c3e 	.word	0x08004c3e

080046b0 <__sflush_r>:
 80046b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b8:	0716      	lsls	r6, r2, #28
 80046ba:	4605      	mov	r5, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	d454      	bmi.n	800476a <__sflush_r+0xba>
 80046c0:	684b      	ldr	r3, [r1, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	dc02      	bgt.n	80046cc <__sflush_r+0x1c>
 80046c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dd48      	ble.n	800475e <__sflush_r+0xae>
 80046cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d045      	beq.n	800475e <__sflush_r+0xae>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046d8:	682f      	ldr	r7, [r5, #0]
 80046da:	6a21      	ldr	r1, [r4, #32]
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	d030      	beq.n	8004742 <__sflush_r+0x92>
 80046e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	0759      	lsls	r1, r3, #29
 80046e6:	d505      	bpl.n	80046f4 <__sflush_r+0x44>
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	1ad2      	subs	r2, r2, r3
 80046ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046ee:	b10b      	cbz	r3, 80046f4 <__sflush_r+0x44>
 80046f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046f8:	6a21      	ldr	r1, [r4, #32]
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b0      	blx	r6
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	d106      	bne.n	8004712 <__sflush_r+0x62>
 8004704:	6829      	ldr	r1, [r5, #0]
 8004706:	291d      	cmp	r1, #29
 8004708:	d82b      	bhi.n	8004762 <__sflush_r+0xb2>
 800470a:	4a2a      	ldr	r2, [pc, #168]	@ (80047b4 <__sflush_r+0x104>)
 800470c:	410a      	asrs	r2, r1
 800470e:	07d6      	lsls	r6, r2, #31
 8004710:	d427      	bmi.n	8004762 <__sflush_r+0xb2>
 8004712:	2200      	movs	r2, #0
 8004714:	6062      	str	r2, [r4, #4]
 8004716:	04d9      	lsls	r1, r3, #19
 8004718:	6922      	ldr	r2, [r4, #16]
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	d504      	bpl.n	8004728 <__sflush_r+0x78>
 800471e:	1c42      	adds	r2, r0, #1
 8004720:	d101      	bne.n	8004726 <__sflush_r+0x76>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	b903      	cbnz	r3, 8004728 <__sflush_r+0x78>
 8004726:	6560      	str	r0, [r4, #84]	@ 0x54
 8004728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800472a:	602f      	str	r7, [r5, #0]
 800472c:	b1b9      	cbz	r1, 800475e <__sflush_r+0xae>
 800472e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004732:	4299      	cmp	r1, r3
 8004734:	d002      	beq.n	800473c <__sflush_r+0x8c>
 8004736:	4628      	mov	r0, r5
 8004738:	f7ff fca0 	bl	800407c <_free_r>
 800473c:	2300      	movs	r3, #0
 800473e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004740:	e00d      	b.n	800475e <__sflush_r+0xae>
 8004742:	2301      	movs	r3, #1
 8004744:	4628      	mov	r0, r5
 8004746:	47b0      	blx	r6
 8004748:	4602      	mov	r2, r0
 800474a:	1c50      	adds	r0, r2, #1
 800474c:	d1c9      	bne.n	80046e2 <__sflush_r+0x32>
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0c6      	beq.n	80046e2 <__sflush_r+0x32>
 8004754:	2b1d      	cmp	r3, #29
 8004756:	d001      	beq.n	800475c <__sflush_r+0xac>
 8004758:	2b16      	cmp	r3, #22
 800475a:	d11e      	bne.n	800479a <__sflush_r+0xea>
 800475c:	602f      	str	r7, [r5, #0]
 800475e:	2000      	movs	r0, #0
 8004760:	e022      	b.n	80047a8 <__sflush_r+0xf8>
 8004762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004766:	b21b      	sxth	r3, r3
 8004768:	e01b      	b.n	80047a2 <__sflush_r+0xf2>
 800476a:	690f      	ldr	r7, [r1, #16]
 800476c:	2f00      	cmp	r7, #0
 800476e:	d0f6      	beq.n	800475e <__sflush_r+0xae>
 8004770:	0793      	lsls	r3, r2, #30
 8004772:	680e      	ldr	r6, [r1, #0]
 8004774:	bf08      	it	eq
 8004776:	694b      	ldreq	r3, [r1, #20]
 8004778:	600f      	str	r7, [r1, #0]
 800477a:	bf18      	it	ne
 800477c:	2300      	movne	r3, #0
 800477e:	eba6 0807 	sub.w	r8, r6, r7
 8004782:	608b      	str	r3, [r1, #8]
 8004784:	f1b8 0f00 	cmp.w	r8, #0
 8004788:	dde9      	ble.n	800475e <__sflush_r+0xae>
 800478a:	6a21      	ldr	r1, [r4, #32]
 800478c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800478e:	4643      	mov	r3, r8
 8004790:	463a      	mov	r2, r7
 8004792:	4628      	mov	r0, r5
 8004794:	47b0      	blx	r6
 8004796:	2800      	cmp	r0, #0
 8004798:	dc08      	bgt.n	80047ac <__sflush_r+0xfc>
 800479a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ac:	4407      	add	r7, r0
 80047ae:	eba8 0800 	sub.w	r8, r8, r0
 80047b2:	e7e7      	b.n	8004784 <__sflush_r+0xd4>
 80047b4:	dfbffffe 	.word	0xdfbffffe

080047b8 <_fflush_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	690b      	ldr	r3, [r1, #16]
 80047bc:	4605      	mov	r5, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	b913      	cbnz	r3, 80047c8 <_fflush_r+0x10>
 80047c2:	2500      	movs	r5, #0
 80047c4:	4628      	mov	r0, r5
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	b118      	cbz	r0, 80047d2 <_fflush_r+0x1a>
 80047ca:	6a03      	ldr	r3, [r0, #32]
 80047cc:	b90b      	cbnz	r3, 80047d2 <_fflush_r+0x1a>
 80047ce:	f7ff fa3d 	bl	8003c4c <__sinit>
 80047d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f3      	beq.n	80047c2 <_fflush_r+0xa>
 80047da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047dc:	07d0      	lsls	r0, r2, #31
 80047de:	d404      	bmi.n	80047ea <_fflush_r+0x32>
 80047e0:	0599      	lsls	r1, r3, #22
 80047e2:	d402      	bmi.n	80047ea <_fflush_r+0x32>
 80047e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047e6:	f7ff fc38 	bl	800405a <__retarget_lock_acquire_recursive>
 80047ea:	4628      	mov	r0, r5
 80047ec:	4621      	mov	r1, r4
 80047ee:	f7ff ff5f 	bl	80046b0 <__sflush_r>
 80047f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047f4:	07da      	lsls	r2, r3, #31
 80047f6:	4605      	mov	r5, r0
 80047f8:	d4e4      	bmi.n	80047c4 <_fflush_r+0xc>
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	059b      	lsls	r3, r3, #22
 80047fe:	d4e1      	bmi.n	80047c4 <_fflush_r+0xc>
 8004800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004802:	f7ff fc2b 	bl	800405c <__retarget_lock_release_recursive>
 8004806:	e7dd      	b.n	80047c4 <_fflush_r+0xc>

08004808 <__swhatbuf_r>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	460c      	mov	r4, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	2900      	cmp	r1, #0
 8004812:	b096      	sub	sp, #88	@ 0x58
 8004814:	4615      	mov	r5, r2
 8004816:	461e      	mov	r6, r3
 8004818:	da0d      	bge.n	8004836 <__swhatbuf_r+0x2e>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	bf14      	ite	ne
 8004826:	2340      	movne	r3, #64	@ 0x40
 8004828:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800482c:	2000      	movs	r0, #0
 800482e:	6031      	str	r1, [r6, #0]
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	b016      	add	sp, #88	@ 0x58
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	466a      	mov	r2, sp
 8004838:	f000 f848 	bl	80048cc <_fstat_r>
 800483c:	2800      	cmp	r0, #0
 800483e:	dbec      	blt.n	800481a <__swhatbuf_r+0x12>
 8004840:	9901      	ldr	r1, [sp, #4]
 8004842:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004846:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800484a:	4259      	negs	r1, r3
 800484c:	4159      	adcs	r1, r3
 800484e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004852:	e7eb      	b.n	800482c <__swhatbuf_r+0x24>

08004854 <__smakebuf_r>:
 8004854:	898b      	ldrh	r3, [r1, #12]
 8004856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004858:	079d      	lsls	r5, r3, #30
 800485a:	4606      	mov	r6, r0
 800485c:	460c      	mov	r4, r1
 800485e:	d507      	bpl.n	8004870 <__smakebuf_r+0x1c>
 8004860:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	6123      	str	r3, [r4, #16]
 8004868:	2301      	movs	r3, #1
 800486a:	6163      	str	r3, [r4, #20]
 800486c:	b003      	add	sp, #12
 800486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004870:	ab01      	add	r3, sp, #4
 8004872:	466a      	mov	r2, sp
 8004874:	f7ff ffc8 	bl	8004808 <__swhatbuf_r>
 8004878:	9f00      	ldr	r7, [sp, #0]
 800487a:	4605      	mov	r5, r0
 800487c:	4639      	mov	r1, r7
 800487e:	4630      	mov	r0, r6
 8004880:	f7ff f8cc 	bl	8003a1c <_malloc_r>
 8004884:	b948      	cbnz	r0, 800489a <__smakebuf_r+0x46>
 8004886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488a:	059a      	lsls	r2, r3, #22
 800488c:	d4ee      	bmi.n	800486c <__smakebuf_r+0x18>
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	f043 0302 	orr.w	r3, r3, #2
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	e7e2      	b.n	8004860 <__smakebuf_r+0xc>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	6020      	str	r0, [r4, #0]
 800489e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	9b01      	ldr	r3, [sp, #4]
 80048a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048aa:	b15b      	cbz	r3, 80048c4 <__smakebuf_r+0x70>
 80048ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f81d 	bl	80048f0 <_isatty_r>
 80048b6:	b128      	cbz	r0, 80048c4 <__smakebuf_r+0x70>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	431d      	orrs	r5, r3
 80048c8:	81a5      	strh	r5, [r4, #12]
 80048ca:	e7cf      	b.n	800486c <__smakebuf_r+0x18>

080048cc <_fstat_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d07      	ldr	r5, [pc, #28]	@ (80048ec <_fstat_r+0x20>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	602b      	str	r3, [r5, #0]
 80048da:	f7fc ffc7 	bl	800186c <_fstat>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d102      	bne.n	80048e8 <_fstat_r+0x1c>
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	b103      	cbz	r3, 80048e8 <_fstat_r+0x1c>
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	bd38      	pop	{r3, r4, r5, pc}
 80048ea:	bf00      	nop
 80048ec:	2000048c 	.word	0x2000048c

080048f0 <_isatty_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d06      	ldr	r5, [pc, #24]	@ (800490c <_isatty_r+0x1c>)
 80048f4:	2300      	movs	r3, #0
 80048f6:	4604      	mov	r4, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	602b      	str	r3, [r5, #0]
 80048fc:	f7fc ffc6 	bl	800188c <_isatty>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_isatty_r+0x1a>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_isatty_r+0x1a>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	2000048c 	.word	0x2000048c

08004910 <_init>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	bf00      	nop
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr

0800491c <_fini>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	bf00      	nop
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr
