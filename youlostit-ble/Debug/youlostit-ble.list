
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00007198  2**0
                  CONTENTS
  4 .ARM          00000008  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  00007198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08005064  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000198  080051fc  00007198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080051fc  00007498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9c2  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002084  00000000  00000000  00011b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00013c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000732  00000000  00000000  000145c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002759d  00000000  00000000  00014cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b64a  00000000  00000000  0003c297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0eb8  00000000  00000000  000478e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  001387dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0013b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000198 	.word	0x20000198
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ce4 	.word	0x08004ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	08004ce4 	.word	0x08004ce4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fba4 	bl	80039d4 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fc7e 	bl	8001bd8 <HAL_Delay>
	free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fb7f 	bl	80039e4 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa8f 	bl	8000814 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fb68 	bl	80039e4 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa78 	bl	8000814 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fb3c 	bl	80039e4 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb12 	bl	80009a0 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fb28 	bl	80039e4 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa38 	bl	8000814 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fb11 	bl	80039e4 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa21 	bl	8000814 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fafa 	bl	80039e4 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa0a 	bl	8000814 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fae3 	bl	80039e4 <free>

	//This will start the advertisment,
	setConnectable();
 800041e:	f000 f979 	bl	8000714 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa40 	bl	80008ac <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa70 	bl	800091c <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa68 	bl	800091c <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800044c:	bf00      	nop
}
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002cc 	.word	0x200002cc
 8000458:	200002d0 	.word	0x200002d0
 800045c:	20000000 	.word	0x20000000
 8000460:	200002ca 	.word	0x200002ca
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001b4 	.word	0x200001b4
 8000478:	200001b8 	.word	0x200001b8
 800047c:	200001bc 	.word	0x200001bc
 8000480:	200000f4 	.word	0x200000f4
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002c0 	.word	0x200002c0
 80004a0:	200000fc 	.word	0x200000fc
 80004a4:	200002c8 	.word	0x200002c8
 80004a8:	2000011c 	.word	0x2000011c
 80004ac:	200002c4 	.word	0x200002c4
 80004b0:	2000010c 	.word	0x2000010c

080004b4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fe61 	bl	8002198 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fb7b 	bl	8001bd8 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fe6d 	bl	80021c8 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fee3 	bl	80032c8 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fe5d 	bl	80021c8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fb62 	bl	8001bd8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fe54 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 feca 	bl	80032c8 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	  dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 feab 	bl	80032c8 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fe1e 	bl	80021c8 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fe13 	bl	80021c8 <HAL_GPIO_WritePin>
        return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
  }else{
  return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08004cfc 	.word	0x08004cfc
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002d4 	.word	0x200002d4
 80005c4:	200002d0 	.word	0x200002d0

080005c8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fdc7 	bl	80021c8 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fe3d 	bl	80032c8 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fcb8 	bl	8002fde <HAL_SPI_Transmit>
		result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	  }else{
		result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fda1 	bl	80021c8 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>

}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004d04 	.word	0x08004d04
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002d4 	.word	0x200002d4
 80006a8:	200002d0 	.word	0x200002d0

080006ac <catchBLE>:

void catchBLE(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80006b2:	217f      	movs	r1, #127	@ 0x7f
 80006b4:	4813      	ldr	r0, [pc, #76]	@ (8000704 <catchBLE+0x58>)
 80006b6:	f7ff fefd 	bl	80004b4 <fetchBleEvent>
 80006ba:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d11b      	bne.n	80006fa <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c2:	2203      	movs	r2, #3
 80006c4:	4910      	ldr	r1, [pc, #64]	@ (8000708 <catchBLE+0x5c>)
 80006c6:	480f      	ldr	r0, [pc, #60]	@ (8000704 <catchBLE+0x58>)
 80006c8:	f7ff ff7e 	bl	80005c8 <checkEventResp>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 80006d2:	f000 f81f 	bl	8000714 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d6:	2205      	movs	r2, #5
 80006d8:	490c      	ldr	r1, [pc, #48]	@ (800070c <catchBLE+0x60>)
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <catchBLE+0x58>)
 80006dc:	f7ff ff74 	bl	80005c8 <checkEventResp>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d109      	bne.n	80006fa <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <catchBLE+0x58>)
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <catchBLE+0x64>)
 80006ee:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <catchBLE+0x58>)
 80006f2:	799b      	ldrb	r3, [r3, #6]
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <catchBLE+0x64>)
 80006f8:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001c0 	.word	0x200001c0
 8000708:	200000e8 	.word	0x200000e8
 800070c:	200000ec 	.word	0x200000ec
 8000710:	2000012c 	.word	0x2000012c

08000714 <setConnectable>:

void setConnectable(){
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800071a:	200c      	movs	r0, #12
 800071c:	f003 f95a 	bl	80039d4 <malloc>
 8000720:	4603      	mov	r3, r0
 8000722:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <setConnectable+0xec>)
 8000728:	6810      	ldr	r0, [r2, #0]
 800072a:	6018      	str	r0, [r3, #0]
 800072c:	8891      	ldrh	r1, [r2, #4]
 800072e:	7992      	ldrb	r2, [r2, #6]
 8000730:	8099      	strh	r1, [r3, #4]
 8000732:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3308      	adds	r3, #8
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3309      	adds	r3, #9
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	330a      	adds	r3, #10
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	330b      	adds	r3, #11
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3307      	adds	r3, #7
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <setConnectable+0xf0>)
 800075e:	2208      	movs	r2, #8
 8000760:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <setConnectable+0xf0>)
 8000764:	2215      	movs	r2, #21
 8000766:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000768:	2019      	movs	r0, #25
 800076a:	f003 f933 	bl	80039d4 <malloc>
 800076e:	4603      	mov	r3, r0
 8000770:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <setConnectable+0xf0>)
 8000776:	461c      	mov	r4, r3
 8000778:	4613      	mov	r3, r2
 800077a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800077c:	6020      	str	r0, [r4, #0]
 800077e:	6061      	str	r1, [r4, #4]
 8000780:	60a2      	str	r2, [r4, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	330d      	adds	r3, #13
 800078a:	220c      	movs	r2, #12
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fca7 	bl	80040e2 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000794:	2119      	movs	r1, #25
 8000796:	68b8      	ldr	r0, [r7, #8]
 8000798:	f7ff ff3c 	bl	8000614 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 800079c:	2007      	movs	r0, #7
 800079e:	f003 f919 	bl	80039d4 <malloc>
 80007a2:	4603      	mov	r3, r0
 80007a4:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 80007a6:	bf00      	nop
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <setConnectable+0xf4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0fb      	beq.n	80007a8 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 80007b0:	2107      	movs	r1, #7
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fe7e 	bl	80004b4 <fetchBleEvent>
 80007b8:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10f      	bne.n	80007e0 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007c0:	2207      	movs	r2, #7
 80007c2:	4912      	ldr	r1, [pc, #72]	@ (800080c <setConnectable+0xf8>)
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff feff 	bl	80005c8 <checkEventResp>
 80007ca:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <setConnectable+0xfc>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <setConnectable+0xfc>)
 80007de:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f003 f8ff 	bl	80039e4 <free>
	   free(discoverableCommand);
 80007e6:	68b8      	ldr	r0, [r7, #8]
 80007e8:	f003 f8fc 	bl	80039e4 <free>
	   free(localname);
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f003 f8f9 	bl	80039e4 <free>
	   HAL_Delay(10);
 80007f2:	200a      	movs	r0, #10
 80007f4:	f001 f9f0 	bl	8001bd8 <HAL_Delay>
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	200000f4 	.word	0x200000f4
 8000804:	20000078 	.word	0x20000078
 8000808:	200002d0 	.word	0x200002d0
 800080c:	20000088 	.word	0x20000088
 8000810:	200002ca 	.word	0x200002ca

08000814 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f7ff fef5 	bl	8000614 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800082a:	6a3b      	ldr	r3, [r7, #32]
 800082c:	005a      	lsls	r2, r3, #1
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	4413      	add	r3, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f003 f8ce 	bl	80039d4 <malloc>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <BLE_command+0x90>)
 800083e:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000844:	e007      	b.n	8000856 <BLE_command+0x42>
		   contatore++;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	3301      	adds	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000852:	4293      	cmp	r3, r2
 8000854:	dc07      	bgt.n	8000866 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000856:	2140      	movs	r1, #64	@ 0x40
 8000858:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <BLE_command+0x94>)
 800085a:	f001 fc9d 	bl	8002198 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0f0      	beq.n	8000846 <BLE_command+0x32>
 8000864:	e000      	b.n	8000868 <BLE_command+0x54>
			   break;
 8000866:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <BLE_command+0x90>)
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	005a      	lsls	r2, r3, #1
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4619      	mov	r1, r3
 8000876:	f7ff fe1d 	bl	80004b4 <fetchBleEvent>
 800087a:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d107      	bne.n	8000892 <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <BLE_command+0x90>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe9c 	bl	80005c8 <checkEventResp>
 8000890:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f001 f9a0 	bl	8001bd8 <HAL_Delay>


	return response;
 8000898:	697b      	ldr	r3, [r7, #20]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200002cc 	.word	0x200002cc
 80008a8:	48001000 	.word	0x48001000

080008ac <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <addService+0x60>)
 80008ba:	2210      	movs	r2, #16
 80008bc:	68f9      	ldr	r1, [r7, #12]
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fc0f 	bl	80040e2 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <addService+0x64>)
 80008ca:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008cc:	2301      	movs	r3, #1
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2307      	movs	r3, #7
 80008d2:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <addService+0x68>)
 80008d4:	2117      	movs	r1, #23
 80008d6:	480e      	ldr	r0, [pc, #56]	@ (8000910 <addService+0x64>)
 80008d8:	f7ff ff9c 	bl	8000814 <BLE_command>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10a      	bne.n	80008f8 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <addService+0x6c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	79da      	ldrb	r2, [r3, #7]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <addService+0x6c>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	7a12      	ldrb	r2, [r2, #8]
 80008f6:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <addService+0x6c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 f871 	bl	80039e4 <free>
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000095 	.word	0x20000095
 8000910:	20000090 	.word	0x20000090
 8000914:	200000a8 	.word	0x200000a8
 8000918:	200002cc 	.word	0x200002cc

0800091c <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af02      	add	r7, sp, #8
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <addCharacteristic+0x74>)
 800092c:	2210      	movs	r2, #16
 800092e:	68f9      	ldr	r1, [r7, #12]
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fbd6 	bl	80040e2 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <addCharacteristic+0x78>)
 800093c:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	785a      	ldrb	r2, [r3, #1]
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <addCharacteristic+0x78>)
 8000944:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000946:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <addCharacteristic+0x78>)
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 800094c:	4a11      	ldr	r2, [pc, #68]	@ (8000994 <addCharacteristic+0x78>)
 800094e:	7e3b      	ldrb	r3, [r7, #24]
 8000950:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000952:	2301      	movs	r3, #1
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2307      	movs	r3, #7
 8000958:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <addCharacteristic+0x7c>)
 800095a:	211e      	movs	r1, #30
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <addCharacteristic+0x78>)
 800095e:	f7ff ff59 	bl	8000814 <BLE_command>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <addCharacteristic+0x80>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	79da      	ldrb	r2, [r3, #7]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <addCharacteristic+0x80>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	7a12      	ldrb	r2, [r2, #8]
 800097c:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <addCharacteristic+0x80>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f003 f82e 	bl	80039e4 <free>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000b7 	.word	0x200000b7
 8000994:	200000b0 	.word	0x200000b0
 8000998:	200000d0 	.word	0x200000d0
 800099c:	200002cc 	.word	0x200002cc

080009a0 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3306      	adds	r3, #6
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <updateCharValue+0x9c>)
 80009b8:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <updateCharValue+0x9c>)
 80009c0:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <updateCharValue+0x9c>)
 80009c8:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <updateCharValue+0x9c>)
 80009d0:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	785a      	ldrb	r2, [r3, #1]
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <updateCharValue+0x9c>)
 80009d8:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <updateCharValue+0x9c>)
 80009e0:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <updateCharValue+0x9c>)
 80009e8:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	330a      	adds	r3, #10
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fff0 	bl	80039d4 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 80009f8:	220a      	movs	r2, #10
 80009fa:	4910      	ldr	r1, [pc, #64]	@ (8000a3c <updateCharValue+0x9c>)
 80009fc:	6978      	ldr	r0, [r7, #20]
 80009fe:	f003 fb70 	bl	80040e2 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	330a      	adds	r3, #10
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	6a39      	ldr	r1, [r7, #32]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fb69 	bl	80040e2 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f103 010a 	add.w	r1, r3, #10
 8000a16:	2300      	movs	r3, #0
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <updateCharValue+0xa0>)
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff fef8 	bl	8000814 <BLE_command>

	free(commandComplete);
 8000a24:	6978      	ldr	r0, [r7, #20]
 8000a26:	f002 ffdd 	bl	80039e4 <free>
	free(rxEvent);
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <updateCharValue+0xa4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 ffd8 	bl	80039e4 <free>
}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000d8 	.word	0x200000d8
 8000a40:	200000d0 	.word	0x200000d0
 8000a44:	200002cc 	.word	0x200002cc

08000a48 <i2c_init>:

#include "i2c.h"
#define I2C_SPEED 400000
#define I2C_TIMEOUT 1000000
void i2c_init() {
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	// trying to configure noise filters then enable timer for I2C by setting the PE bit of the register
	// wanna change the baud rate to 400 khz
	// configure the pins on the MCU so they are connected to the correct I2C peripheral rather than operating as GPIO pins

	// Enable GPIOB clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <i2c_init+0x80>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <i2c_init+0x80>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// enable i2c2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <i2c_init+0x80>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <i2c_init+0x80>)
 8000a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a62:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set PB10 and PB11 to Alternate Function mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11); // Clear mode bits
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <i2c_init+0x84>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <i2c_init+0x84>)
 8000a6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000a6e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1); // Set to Alternate Function mode
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <i2c_init+0x84>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <i2c_init+0x84>)
 8000a76:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000a7a:	6013      	str	r3, [r2, #0]

	// Set PB10 and PB11 to Open-Drain Output
	GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <i2c_init+0x84>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <i2c_init+0x84>)
 8000a82:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000a86:	6053      	str	r3, [r2, #4]

	// Enable Pull-Up resistors for PB10 and PB11
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11); // Clear
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <i2c_init+0x84>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <i2c_init+0x84>)
 8000a8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000a92:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0); // Enable pull-ups
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <i2c_init+0x84>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	4a0c      	ldr	r2, [pc, #48]	@ (8000acc <i2c_init+0x84>)
 8000a9a:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000a9e:	60d3      	str	r3, [r2, #12]

	// Configure PB10 and PB11 to use Alternate Function 4 (AF4) for I2C2
	//GPIOB->AFRH &= ~((0xF << GPIO_AFRH_AFSEL10_Pos) | (0xF << GPIO_AFRH_AFSEL11_Pos)); // Clear AFR bits
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL10_Pos) | (4 << GPIO_AFRH_AFSEL11_Pos));     // Set AF4 for PB10, PB11
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <i2c_init+0x84>)
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa4:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <i2c_init+0x84>)
 8000aa6:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000aaa:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C2->TIMINGR = 0x10909CEC;	// sets up timing for communication, that values is for 100khz
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <i2c_init+0x88>)
 8000aae:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <i2c_init+0x8c>)
 8000ab0:	611a      	str	r2, [r3, #16]
	I2C2->CR1 |= I2C_CR1_PE; // Enable I2C2
 8000ab2:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <i2c_init+0x88>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <i2c_init+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6013      	str	r3, [r2, #0]


}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	40005800 	.word	0x40005800
 8000ad4:	10909cec 	.word	0x10909cec

08000ad8 <i2c_transaction>:
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	603a      	str	r2, [r7, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	71bb      	strb	r3, [r7, #6]
 8000aea:	4613      	mov	r3, r2
 8000aec:	717b      	strb	r3, [r7, #5]
	volatile uint32_t timeout;

	    // Clear any existing errors
	    I2C2->ICR = I2C_ICR_NACKCF | I2C_ICR_STOPCF | I2C_ICR_BERRCF;
 8000aee:	4b6e      	ldr	r3, [pc, #440]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000af0:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000af4:	61da      	str	r2, [r3, #28]

	    printf("Starting I2C transaction - ISR: 0x%lx, CR2: 0x%lx\n", I2C2->ISR, I2C2->CR2);
 8000af6:	4b6c      	ldr	r3, [pc, #432]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a6b      	ldr	r2, [pc, #428]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000afc:	6852      	ldr	r2, [r2, #4]
 8000afe:	4619      	mov	r1, r3
 8000b00:	486a      	ldr	r0, [pc, #424]	@ (8000cac <i2c_transaction+0x1d4>)
 8000b02:	f003 f8e7 	bl	8003cd4 <iprintf>

	    if (dir == 0) {  // Writing data
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d179      	bne.n	8000c00 <i2c_transaction+0x128>
	        // Configure the transfer
	        I2C2->CR2 = 0; // Clear CR2 first
 8000b0c:	4b66      	ldr	r3, [pc, #408]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
	        I2C2->CR2 = (address << 1) | (len << 16) | I2C_CR2_START;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	005a      	lsls	r2, r3, #1
 8000b16:	797b      	ldrb	r3, [r7, #5]
 8000b18:	041b      	lsls	r3, r3, #16
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	4a62      	ldr	r2, [pc, #392]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b22:	6053      	str	r3, [r2, #4]

	        printf("Write CR2 configured: 0x%lx\n", I2C2->CR2);
 8000b24:	4b60      	ldr	r3, [pc, #384]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4861      	ldr	r0, [pc, #388]	@ (8000cb0 <i2c_transaction+0x1d8>)
 8000b2c:	f003 f8d2 	bl	8003cd4 <iprintf>

	        for (uint8_t i = 0; i < len; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e043      	b.n	8000bbe <i2c_transaction+0xe6>
	            timeout = I2C_TIMEOUT;
 8000b36:	4b5f      	ldr	r3, [pc, #380]	@ (8000cb4 <i2c_transaction+0x1dc>)
 8000b38:	60bb      	str	r3, [r7, #8]
	            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000b3a:	e028      	b.n	8000b8e <i2c_transaction+0xb6>
	                if (I2C2->ISR & I2C_ISR_NACKF) {
 8000b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00d      	beq.n	8000b64 <i2c_transaction+0x8c>
	                    printf("Error: NACK received. ISR=0x%lx\n", I2C2->ISR);
 8000b48:	4b57      	ldr	r3, [pc, #348]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	485a      	ldr	r0, [pc, #360]	@ (8000cb8 <i2c_transaction+0x1e0>)
 8000b50:	f003 f8c0 	bl	8003cd4 <iprintf>
	                    I2C2->CR2 |= I2C_CR2_STOP;
 8000b54:	4b54      	ldr	r3, [pc, #336]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4a53      	ldr	r2, [pc, #332]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5e:	6053      	str	r3, [r2, #4]
	                    return 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	e09c      	b.n	8000c9e <i2c_transaction+0x1c6>
	                }

	                if (--timeout == 0) {
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10f      	bne.n	8000b8e <i2c_transaction+0xb6>
	                    printf("Error 1: TXIS timeout. ISR=0x%lx, CR2=0x%lx\n",
	                           I2C2->ISR, I2C2->CR2);
 8000b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a4d      	ldr	r2, [pc, #308]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b74:	6852      	ldr	r2, [r2, #4]
	                    printf("Error 1: TXIS timeout. ISR=0x%lx, CR2=0x%lx\n",
 8000b76:	4619      	mov	r1, r3
 8000b78:	4850      	ldr	r0, [pc, #320]	@ (8000cbc <i2c_transaction+0x1e4>)
 8000b7a:	f003 f8ab 	bl	8003cd4 <iprintf>
	                    I2C2->CR2 |= I2C_CR2_STOP;
 8000b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4a49      	ldr	r2, [pc, #292]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b88:	6053      	str	r3, [r2, #4]
	                    return 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e087      	b.n	8000c9e <i2c_transaction+0x1c6>
	            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000b8e:	4b46      	ldr	r3, [pc, #280]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0d0      	beq.n	8000b3c <i2c_transaction+0x64>
	                }
	            }
	            I2C2->TXDR = data[i];
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	4b41      	ldr	r3, [pc, #260]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
	            printf("Wrote byte %d: 0x%02x\n", i, data[i]);
 8000ba6:	7bf9      	ldrb	r1, [r7, #15]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4843      	ldr	r0, [pc, #268]	@ (8000cc0 <i2c_transaction+0x1e8>)
 8000bb4:	f003 f88e 	bl	8003cd4 <iprintf>
	        for (uint8_t i = 0; i < len; i++) {
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	7bfa      	ldrb	r2, [r7, #15]
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3b7      	bcc.n	8000b36 <i2c_transaction+0x5e>
	        }

	        timeout = I2C_TIMEOUT;
 8000bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb4 <i2c_transaction+0x1dc>)
 8000bc8:	60bb      	str	r3, [r7, #8]
	        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8000bca:	e00c      	b.n	8000be6 <i2c_transaction+0x10e>
	            if (--timeout == 0) {
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d107      	bne.n	8000be6 <i2c_transaction+0x10e>
	                printf("Error 2: TC timeout. ISR=0x%lx\n", I2C2->ISR);
 8000bd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4839      	ldr	r0, [pc, #228]	@ (8000cc4 <i2c_transaction+0x1ec>)
 8000bde:	f003 f879 	bl	8003cd4 <iprintf>
	                return 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	e05b      	b.n	8000c9e <i2c_transaction+0x1c6>
	        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8000be6:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0ec      	beq.n	8000bcc <i2c_transaction+0xf4>
	            }
	        }

	        I2C2->CR2 |= I2C_CR2_STOP;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6053      	str	r3, [r2, #4]
 8000bfe:	e04d      	b.n	8000c9c <i2c_transaction+0x1c4>
	    }
	else {	// 1 for reading data
		I2C2->CR2 = ((address << 1) & I2C_CR2_SADD_Msk) | I2C_CR2_RD_WRN; // Set the device address and indicate a read
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0e:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START; // Set how many bytes we’re reading and start the communication
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	797b      	ldrb	r3, [r7, #5]
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c20:	6053      	str	r3, [r2, #4]

		for (uint8_t i = 0; i < len; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	73bb      	strb	r3, [r7, #14]
 8000c26:	e01c      	b.n	8000c62 <i2c_transaction+0x18a>
			timeout = I2C_TIMEOUT;
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <i2c_transaction+0x1dc>)
 8000c2a:	60bb      	str	r3, [r7, #8]
			while (!(I2C2->ISR & I2C_ISR_RXNE)) { // Wait until data is received
 8000c2c:	e009      	b.n	8000c42 <i2c_transaction+0x16a>
				if (--timeout == 0) {
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d104      	bne.n	8000c42 <i2c_transaction+0x16a>
					printf("error 3");
 8000c38:	4823      	ldr	r0, [pc, #140]	@ (8000cc8 <i2c_transaction+0x1f0>)
 8000c3a:	f003 f84b 	bl	8003cd4 <iprintf>
					return 3; // If we wait too long, return an error
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e02d      	b.n	8000c9e <i2c_transaction+0x1c6>
			while (!(I2C2->ISR & I2C_ISR_RXNE)) { // Wait until data is received
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0ef      	beq.n	8000c2e <i2c_transaction+0x156>
				}
			}
			data[i] = I2C2->RXDR; // Store the received data
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	b2ca      	uxtb	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73bb      	strb	r3, [r7, #14]
 8000c62:	7bba      	ldrb	r2, [r7, #14]
 8000c64:	797b      	ldrb	r3, [r7, #5]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3de      	bcc.n	8000c28 <i2c_transaction+0x150>
		}

		timeout = I2C_TIMEOUT;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <i2c_transaction+0x1dc>)
 8000c6c:	60bb      	str	r3, [r7, #8]
		while (!(I2C2->ISR & I2C_ISR_TC)) { // Wait until the transfer is complete
 8000c6e:	e009      	b.n	8000c84 <i2c_transaction+0x1ac>
			if (--timeout == 0){
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d104      	bne.n	8000c84 <i2c_transaction+0x1ac>
				printf("error 4");
 8000c7a:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <i2c_transaction+0x1f4>)
 8000c7c:	f003 f82a 	bl	8003cd4 <iprintf>
				return 4; // If we wait too long, return an error
 8000c80:	2304      	movs	r3, #4
 8000c82:	e00c      	b.n	8000c9e <i2c_transaction+0x1c6>
		while (!(I2C2->ISR & I2C_ISR_TC)) { // Wait until the transfer is complete
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0ef      	beq.n	8000c70 <i2c_transaction+0x198>
			}
		}

		I2C2->CR2 |= I2C_CR2_STOP; // Send a stop condition to end the communication
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <i2c_transaction+0x1d0>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9a:	6053      	str	r3, [r2, #4]
	}

	return 0; // If we got here, everything worked!
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005800 	.word	0x40005800
 8000cac:	08004d0c 	.word	0x08004d0c
 8000cb0:	08004d40 	.word	0x08004d40
 8000cb4:	000f4240 	.word	0x000f4240
 8000cb8:	08004d60 	.word	0x08004d60
 8000cbc:	08004d84 	.word	0x08004d84
 8000cc0:	08004db4 	.word	0x08004db4
 8000cc4:	08004dcc 	.word	0x08004dcc
 8000cc8:	08004dec 	.word	0x08004dec
 8000ccc:	08004df4 	.word	0x08004df4

08000cd0 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	/* Enable the clock for GPIOA and GPIOB */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // Enable clock for GPIOA
 8000cd4:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <leds_init+0xd0>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	4a31      	ldr	r2, [pc, #196]	@ (8000da0 <leds_init+0xd0>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable clock for GPIOB
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <leds_init+0xd0>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8000da0 <leds_init+0xd0>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure PA5 as an output by clearing all bits and setting the mode */
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000cec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cf6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000cfa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000cfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d16:	f023 0320 	bic.w	r3, r3, #32
 8000d1a:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d2a:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d36:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d3a:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d46:	f023 0320 	bic.w	r3, r3, #32
 8000d4a:	6153      	str	r3, [r2, #20]

	GPIOB->MODER &= ~GPIO_MODER_MODE14;     // Clear mode bits
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <leds_init+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <leds_init+0xd4>)
 8000d52:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d56:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE14_0;    // Set PB14 as output
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <leds_init+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a11      	ldr	r2, [pc, #68]	@ (8000da4 <leds_init+0xd4>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;     // Push-pull output
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <leds_init+0xd4>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <leds_init+0xd4>)
 8000d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d6e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;     // No pull-up/pull-down
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <leds_init+0xd4>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <leds_init+0xd4>)
 8000d76:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d7a:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos); // Low speed mode
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <leds_init+0xd4>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <leds_init+0xd4>)
 8000d82:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000d86:	6093      	str	r3, [r2, #8]
	GPIOB->ODR &= ~GPIO_ODR_OD14;           // Turn off LED2 (PB14)
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <leds_init+0xd4>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <leds_init+0xd4>)
 8000d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d92:	6153      	str	r3, [r2, #20]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <leds_set>:

void leds_set(uint8_t led)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  // TODO implement this
	if((led & 0xFF) == 0x01){
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <leds_set+0x22>
		GPIOA->ODR |= GPIO_ODR_OD5; // Set PA5 to turn on LED1
 8000db8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~GPIO_ODR_OD5; // Set PA5 to turn off LED1
	}
	else if(((led & 0xFF) == 0x04)){
		GPIOB->ODR &= ~GPIO_ODR_OD14; // Clear PB14 to turn off LED2
	}
}
 8000dc8:	e01e      	b.n	8000e08 <leds_set+0x60>
	else if((led & 0xFF) == 0x02){
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d106      	bne.n	8000dde <leds_set+0x36>
		GPIOB->ODR |= GPIO_ODR_OD14;  // Set PB14 to turn on LED2
 8000dd0:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <leds_set+0x6c>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <leds_set+0x6c>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dda:	6153      	str	r3, [r2, #20]
}
 8000ddc:	e014      	b.n	8000e08 <leds_set+0x60>
	else if((led & 0xFF) == 0x03){
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d108      	bne.n	8000df6 <leds_set+0x4e>
		GPIOA->ODR &= ~GPIO_ODR_OD5; // Set PA5 to turn off LED1
 8000de4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dee:	f023 0320 	bic.w	r3, r3, #32
 8000df2:	6153      	str	r3, [r2, #20]
}
 8000df4:	e008      	b.n	8000e08 <leds_set+0x60>
	else if(((led & 0xFF) == 0x04)){
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d105      	bne.n	8000e08 <leds_set+0x60>
		GPIOB->ODR &= ~GPIO_ODR_OD14; // Clear PB14 to turn off LED2
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <leds_set+0x6c>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <leds_set+0x6c>)
 8000e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e06:	6153      	str	r3, [r2, #20]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	48000400 	.word	0x48000400

08000e18 <lsm6dsl_init>:
    }

    printf("LSM6DSL Initialized Successfully!\n");
}
*/
void lsm6dsl_init() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
    uint8_t who_am_i = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
    uint8_t reg = LSM6DSL_WHO_AM_I;
 8000e22:	230f      	movs	r3, #15
 8000e24:	73bb      	strb	r3, [r7, #14]

    // Add a small delay before starting
//    for (volatile int i = 0; i < 100000; i++);

    // Verify the device by reading WHO_AM_I
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, &reg, 1) != 0) {
 8000e26:	f107 020e 	add.w	r2, r7, #14
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	206a      	movs	r0, #106	@ 0x6a
 8000e30:	f7ff fe52 	bl	8000ad8 <i2c_transaction>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <lsm6dsl_init+0x2a>
        printf("Error: Failed to send WHO_AM_I register address!\n");
 8000e3a:	482d      	ldr	r0, [pc, #180]	@ (8000ef0 <lsm6dsl_init+0xd8>)
 8000e3c:	f002 ffb2 	bl	8003da4 <puts>
        return;
 8000e40:	e052      	b.n	8000ee8 <lsm6dsl_init+0xd0>
    }

    if (i2c_transaction(LSM6DSL_ADDRESS, 1, &who_am_i, 1) != 0) {
 8000e42:	f107 020f 	add.w	r2, r7, #15
 8000e46:	2301      	movs	r3, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	206a      	movs	r0, #106	@ 0x6a
 8000e4c:	f7ff fe44 	bl	8000ad8 <i2c_transaction>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <lsm6dsl_init+0x46>
        printf("Error: Failed to read WHO_AM_I register!\n");
 8000e56:	4827      	ldr	r0, [pc, #156]	@ (8000ef4 <lsm6dsl_init+0xdc>)
 8000e58:	f002 ffa4 	bl	8003da4 <puts>
        return;
 8000e5c:	e044      	b.n	8000ee8 <lsm6dsl_init+0xd0>
    }

    printf("LSM6DSL WHO_AM_I: 0x%02X\n", who_am_i);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4825      	ldr	r0, [pc, #148]	@ (8000ef8 <lsm6dsl_init+0xe0>)
 8000e64:	f002 ff36 	bl	8003cd4 <iprintf>
    if (who_am_i != 0x6A) {
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b6a      	cmp	r3, #106	@ 0x6a
 8000e6c:	d003      	beq.n	8000e76 <lsm6dsl_init+0x5e>
        printf("Error: LSM6DSL not detected!\n");
 8000e6e:	4823      	ldr	r0, [pc, #140]	@ (8000efc <lsm6dsl_init+0xe4>)
 8000e70:	f002 ff98 	bl	8003da4 <puts>
        return;
 8000e74:	e038      	b.n	8000ee8 <lsm6dsl_init+0xd0>
    }

    // Add a small delay
    for (volatile int i = 0; i < 100000; i++);
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e002      	b.n	8000e82 <lsm6dsl_init+0x6a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1e      	ldr	r2, [pc, #120]	@ (8000f00 <lsm6dsl_init+0xe8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	ddf8      	ble.n	8000e7c <lsm6dsl_init+0x64>

    // Configure accelerometer first - ODR = 104 Hz (0x40), ±2g (0x00)
    uint8_t accel_config[2] = {LSM6DSL_CTRL1_XL, 0x40};
 8000e8a:	f244 0310 	movw	r3, #16400	@ 0x4010
 8000e8e:	81bb      	strh	r3, [r7, #12]
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, accel_config, 2) != 0) {
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	2302      	movs	r3, #2
 8000e96:	2100      	movs	r1, #0
 8000e98:	206a      	movs	r0, #106	@ 0x6a
 8000e9a:	f7ff fe1d 	bl	8000ad8 <i2c_transaction>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <lsm6dsl_init+0x94>
        printf("Error: Failed to configure accelerometer\n");
 8000ea4:	4817      	ldr	r0, [pc, #92]	@ (8000f04 <lsm6dsl_init+0xec>)
 8000ea6:	f002 ff7d 	bl	8003da4 <puts>
        return;
 8000eaa:	e01d      	b.n	8000ee8 <lsm6dsl_init+0xd0>
    }

    // Add a small delay
    for (volatile int i = 0; i < 100000; i++);
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	e002      	b.n	8000eb8 <lsm6dsl_init+0xa0>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	4a11      	ldr	r2, [pc, #68]	@ (8000f00 <lsm6dsl_init+0xe8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	ddf8      	ble.n	8000eb2 <lsm6dsl_init+0x9a>

    // Enable BDU and IF_INC
    uint8_t ctrl3_config[2] = {LSM6DSL_CTRL3_C, 0x44};
 8000ec0:	f244 4312 	movw	r3, #17426	@ 0x4412
 8000ec4:	813b      	strh	r3, [r7, #8]
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, ctrl3_config, 2) != 0) {
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	2302      	movs	r3, #2
 8000ecc:	2100      	movs	r1, #0
 8000ece:	206a      	movs	r0, #106	@ 0x6a
 8000ed0:	f7ff fe02 	bl	8000ad8 <i2c_transaction>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <lsm6dsl_init+0xca>
        printf("Error: Failed to configure CTRL3_C\n");
 8000eda:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <lsm6dsl_init+0xf0>)
 8000edc:	f002 ff62 	bl	8003da4 <puts>
        return;
 8000ee0:	e002      	b.n	8000ee8 <lsm6dsl_init+0xd0>
    }

    printf("LSM6DSL Initialized Successfully!\n");
 8000ee2:	480a      	ldr	r0, [pc, #40]	@ (8000f0c <lsm6dsl_init+0xf4>)
 8000ee4:	f002 ff5e 	bl	8003da4 <puts>
}
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08004dfc 	.word	0x08004dfc
 8000ef4:	08004e30 	.word	0x08004e30
 8000ef8:	08004e5c 	.word	0x08004e5c
 8000efc:	08004e78 	.word	0x08004e78
 8000f00:	0001869f 	.word	0x0001869f
 8000f04:	08004e98 	.word	0x08004e98
 8000f08:	08004ec4 	.word	0x08004ec4
 8000f0c:	08004ee8 	.word	0x08004ee8

08000f10 <lsm6dsl_read_xyz>:


// Read acceleration data from X, Y, Z axes
void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
    uint8_t reg = LSM6DSL_OUTX_L_XL;
 8000f1c:	2328      	movs	r3, #40	@ 0x28
 8000f1e:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[6];

    // Set register address
    if (i2c_transaction(LSM6DSL_ADDRESS, 0, &reg, 1) != 0) {
 8000f20:	f107 0217 	add.w	r2, r7, #23
 8000f24:	2301      	movs	r3, #1
 8000f26:	2100      	movs	r1, #0
 8000f28:	206a      	movs	r0, #106	@ 0x6a
 8000f2a:	f7ff fdd5 	bl	8000ad8 <i2c_transaction>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <lsm6dsl_read_xyz+0x2c>
        printf("Error: Failed to set register address for reading!\n");
 8000f34:	4832      	ldr	r0, [pc, #200]	@ (8001000 <lsm6dsl_read_xyz+0xf0>)
 8000f36:	f002 ff35 	bl	8003da4 <puts>
        return;
 8000f3a:	e05e      	b.n	8000ffa <lsm6dsl_read_xyz+0xea>
    }

    // Read all 6 bytes in a single transaction
    if (i2c_transaction(LSM6DSL_ADDRESS, 1, raw_data, 6) != 0) {
 8000f3c:	f107 0210 	add.w	r2, r7, #16
 8000f40:	2306      	movs	r3, #6
 8000f42:	2101      	movs	r1, #1
 8000f44:	206a      	movs	r0, #106	@ 0x6a
 8000f46:	f7ff fdc7 	bl	8000ad8 <i2c_transaction>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <lsm6dsl_read_xyz+0x48>
        printf("Error: Failed to read acceleration data!\n");
 8000f50:	482c      	ldr	r0, [pc, #176]	@ (8001004 <lsm6dsl_read_xyz+0xf4>)
 8000f52:	f002 ff27 	bl	8003da4 <puts>
        return;
 8000f56:	e050      	b.n	8000ffa <lsm6dsl_read_xyz+0xea>
    }

    // Combine bytes and convert to signed 16-bit integers
    *x = (int16_t)((raw_data[1] << 8) | raw_data[0]);
 8000f58:	7c7b      	ldrb	r3, [r7, #17]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	7c3b      	ldrb	r3, [r7, #16]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((raw_data[3] << 8) | raw_data[2]);
 8000f6a:	7cfb      	ldrb	r3, [r7, #19]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	7cbb      	ldrb	r3, [r7, #18]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((raw_data[5] << 8) | raw_data[4]);
 8000f7c:	7d7b      	ldrb	r3, [r7, #21]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7d3b      	ldrb	r3, [r7, #20]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	801a      	strh	r2, [r3, #0]

    // Convert to mg (milli-g) values
    // With ±2g full scale, 1 mg = 0.061 mg/LSB
    *x = (*x * 61) / 1000;  // Convert to mg
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <lsm6dsl_read_xyz+0xf8>)
 8000fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa6:	1192      	asrs	r2, r2, #6
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	801a      	strh	r2, [r3, #0]
    *y = (*y * 61) / 1000;  // Convert to mg
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4613      	mov	r3, r2
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <lsm6dsl_read_xyz+0xf8>)
 8000fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fca:	1192      	asrs	r2, r2, #6
 8000fcc:	17db      	asrs	r3, r3, #31
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	801a      	strh	r2, [r3, #0]
    *z = (*z * 61) / 1000;  // Convert to mg
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4613      	mov	r3, r2
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <lsm6dsl_read_xyz+0xf8>)
 8000fea:	fb82 1203 	smull	r1, r2, r2, r3
 8000fee:	1192      	asrs	r2, r2, #6
 8000ff0:	17db      	asrs	r3, r3, #31
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	801a      	strh	r2, [r3, #0]
}
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	08004f0c 	.word	0x08004f0c
 8001004:	08004f40 	.word	0x08004f40
 8001008:	10624dd3 	.word	0x10624dd3

0800100c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001018:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001024:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001028:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800102c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001034:	e000      	b.n	8001038 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001036:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001038:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001042:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_write>:
volatile uint32_t time = 0;

//volatile uint32_t  = 0;

// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e009      	b.n	8001084 <_write+0x2a>
        ITM_SendChar(*ptr++);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffc7 	bl	800100c <ITM_SendChar>
    for (i = 0; i < len; i++) {
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf1      	blt.n	8001070 <_write+0x16>
    }
    return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
    // Check if the update interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF) {
 800109c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00c      	beq.n	80010c4 <TIM2_IRQHandler+0x2c>
        // Clear the update interrupt flag and perform actions
        TIM2->SR &= ~TIM_SR_UIF;
 80010aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6113      	str	r3, [r2, #16]
        updated_count++;
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <TIM2_IRQHandler+0x38>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a03      	ldr	r2, [pc, #12]	@ (80010d0 <TIM2_IRQHandler+0x38>)
 80010c2:	6013      	str	r3, [r2, #0]
    }
};
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000338 	.word	0x20000338

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b0a2      	sub	sp, #136	@ 0x88
 80010d8:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fd08 	bl	8001aee <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f9b7 	bl	8001450 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 fa39 	bl	8001558 <MX_GPIO_Init>
  MX_SPI3_Init();
 80010e6:	f000 f9f9 	bl	80014dc <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f4:	f001 f868 	bl	80021c8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fd6d 	bl	8001bd8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f001 f85e 	bl	80021c8 <HAL_GPIO_WritePin>

  ble_init();
 800110c:	f7ff f8b8 	bl	8000280 <ble_init>

  HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f000 fd61 	bl	8001bd8 <HAL_Delay>


  leds_init();
 8001116:	f7ff fddb 	bl	8000cd0 <leds_init>
  timer_init(TIM2);
 800111a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800111e:	f000 fc59 	bl	80019d4 <timer_init>
  timer_set_ms(TIM2, 10000);//50 ms
 8001122:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001126:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800112a:	f000 fc95 	bl	8001a58 <timer_set_ms>
  i2c_init();
 800112e:	f7ff fc8b 	bl	8000a48 <i2c_init>
  for (volatile int i = 0; i < 500000; i++);
 8001132:	2300      	movs	r3, #0
 8001134:	667b      	str	r3, [r7, #100]	@ 0x64
 8001136:	e002      	b.n	800113e <main+0x6a>
 8001138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800113a:	3301      	adds	r3, #1
 800113c:	667b      	str	r3, [r7, #100]	@ 0x64
 800113e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001140:	4ab8      	ldr	r2, [pc, #736]	@ (8001424 <main+0x350>)
 8001142:	4293      	cmp	r3, r2
 8001144:	ddf8      	ble.n	8001138 <main+0x64>
  lsm6dsl_init();
 8001146:	f7ff fe67 	bl	8000e18 <lsm6dsl_init>
  int16_t x, y, z;
  int16_t lastX, lastY, lastZ;
  const int16_t thresh = 30;
 800114a:	231e      	movs	r3, #30
 800114c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
  int is_moved_bc = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	677b      	str	r3, [r7, #116]	@ 0x74
  leds_set(0x03);
 8001154:	2003      	movs	r0, #3
 8001156:	f7ff fe27 	bl	8000da8 <leds_set>
  leds_set(0x04);
 800115a:	2004      	movs	r0, #4
 800115c:	f7ff fe24 	bl	8000da8 <leds_set>
  uint8_t nonDiscoverable = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  while (1){
	  if(updated_count < 12){	// less than 1 minute
 8001166:	4bb0      	ldr	r3, [pc, #704]	@ (8001428 <main+0x354>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b0b      	cmp	r3, #11
 800116c:	d87c      	bhi.n	8001268 <main+0x194>
		lsm6dsl_read_xyz(&x, &y, &z);  // Read accelerometer data for X, Y, Z axes
 800116e:	f107 026a 	add.w	r2, r7, #106	@ 0x6a
 8001172:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001176:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fec8 	bl	8000f10 <lsm6dsl_read_xyz>
		// Display the acceleration values (in raw data form)
		printf("Acceleration X: %d, Y: %d, Z: %d\n", x, y, z);
 8001180:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001184:	4619      	mov	r1, r3
 8001186:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800118a:	461a      	mov	r2, r3
 800118c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8001190:	48a6      	ldr	r0, [pc, #664]	@ (800142c <main+0x358>)
 8001192:	f002 fd9f 	bl	8003cd4 <iprintf>

		if(x < lastX - thresh || x > lastX + thresh){// if has been moved in x dir reset count and update x
 8001196:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800119a:	4619      	mov	r1, r3
 800119c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 80011a0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4299      	cmp	r1, r3
 80011a8:	db09      	blt.n	80011be <main+0xea>
 80011aa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80011ae:	4619      	mov	r1, r3
 80011b0:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 80011b4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80011b8:	4413      	add	r3, r2
 80011ba:	4299      	cmp	r1, r3
 80011bc:	dd0b      	ble.n	80011d6 <main+0x102>
			lastX = x;
 80011be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80011c2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
			updated_count = 0;
 80011c6:	4b98      	ldr	r3, [pc, #608]	@ (8001428 <main+0x354>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
			is_moved_bc = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	677b      	str	r3, [r7, #116]	@ 0x74
			time = 0;
 80011d0:	4b97      	ldr	r3, [pc, #604]	@ (8001430 <main+0x35c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
		}
		if(y < lastY - thresh || y > lastY + thresh){// if has been moved in y dir reset count and update y
 80011d6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80011da:	4619      	mov	r1, r3
 80011dc:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 80011e0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4299      	cmp	r1, r3
 80011e8:	db09      	blt.n	80011fe <main+0x12a>
 80011ea:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80011ee:	4619      	mov	r1, r3
 80011f0:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 80011f4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80011f8:	4413      	add	r3, r2
 80011fa:	4299      	cmp	r1, r3
 80011fc:	dd0b      	ble.n	8001216 <main+0x142>
			lastY = y;
 80011fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001202:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
			updated_count = 0;
 8001206:	4b88      	ldr	r3, [pc, #544]	@ (8001428 <main+0x354>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
			is_moved_bc = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	677b      	str	r3, [r7, #116]	@ 0x74
			time = 0;
 8001210:	4b87      	ldr	r3, [pc, #540]	@ (8001430 <main+0x35c>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
		}
		if(z < lastZ - thresh || z > lastZ + thresh){// if has been moved in z dir reset count and update z
 8001216:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800121a:	4619      	mov	r1, r3
 800121c:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	@ 0x7a
 8001220:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4299      	cmp	r1, r3
 8001228:	db09      	blt.n	800123e <main+0x16a>
 800122a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800122e:	4619      	mov	r1, r3
 8001230:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	@ 0x7a
 8001234:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8001238:	4413      	add	r3, r2
 800123a:	4299      	cmp	r1, r3
 800123c:	dd0b      	ble.n	8001256 <main+0x182>
			lastZ = z;
 800123e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001242:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
			updated_count = 0;
 8001246:	4b78      	ldr	r3, [pc, #480]	@ (8001428 <main+0x354>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
			is_moved_bc = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	677b      	str	r3, [r7, #116]	@ 0x74
			time = 0;
 8001250:	4b77      	ldr	r3, [pc, #476]	@ (8001430 <main+0x35c>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
		}
		printf("count %d\n", updated_count);
 8001256:	4b74      	ldr	r3, [pc, #464]	@ (8001428 <main+0x354>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4875      	ldr	r0, [pc, #468]	@ (8001434 <main+0x360>)
 800125e:	f002 fd39 	bl	8003cd4 <iprintf>
		is_moved_bc = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	677b      	str	r3, [r7, #116]	@ 0x74
 8001266:	e77e      	b.n	8001166 <main+0x92>
//		count_ten = updated_count;
	  }
	  else{//past a minute
		  if (updated_count == 0XFFFFFFFF){
 8001268:	4b6f      	ldr	r3, [pc, #444]	@ (8001428 <main+0x354>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d102      	bne.n	8001278 <main+0x1a4>
			  updated_count = 12;
 8001272:	4b6d      	ldr	r3, [pc, #436]	@ (8001428 <main+0x354>)
 8001274:	220c      	movs	r2, #12
 8001276:	601a      	str	r2, [r3, #0]
		  }
		  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001278:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800127c:	2b00      	cmp	r3, #0
 800127e:	d108      	bne.n	8001292 <main+0x1be>
 8001280:	2140      	movs	r1, #64	@ 0x40
 8001282:	486d      	ldr	r0, [pc, #436]	@ (8001438 <main+0x364>)
 8001284:	f000 ff88 	bl	8002198 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <main+0x1be>
			  catchBLE();
 800128e:	f7ff fa0d 	bl	80006ac <catchBLE>
		  }
		  if(is_moved_bc == 0){
 8001292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001294:	2b00      	cmp	r3, #0
 8001296:	d122      	bne.n	80012de <main+0x20a>
			  leds_set(0x02);
 8001298:	2002      	movs	r0, #2
 800129a:	f7ff fd85 	bl	8000da8 <leds_set>
			  count_ten = updated_count;
 800129e:	4b62      	ldr	r3, [pc, #392]	@ (8001428 <main+0x354>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a66      	ldr	r2, [pc, #408]	@ (800143c <main+0x368>)
 80012a4:	6013      	str	r3, [r2, #0]
			  HAL_Delay(1000);
 80012a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012aa:	f000 fc95 	bl	8001bd8 <HAL_Delay>
			  // Send a string to the NORDIC UART service, remember to not include the newline
			  unsigned char test_str[] = "PrivTag Airtag1 has been missing for 0 seconds";
 80012ae:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <main+0x36c>)
 80012b0:	463c      	mov	r4, r7
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c0:	c407      	stmia	r4!, {r0, r1, r2}
 80012c2:	8023      	strh	r3, [r4, #0]
 80012c4:	3402      	adds	r4, #2
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	7023      	strb	r3, [r4, #0]
			  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 80012ca:	463b      	mov	r3, r7
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	232e      	movs	r3, #46	@ 0x2e
 80012d0:	2200      	movs	r2, #0
 80012d2:	495c      	ldr	r1, [pc, #368]	@ (8001444 <main+0x370>)
 80012d4:	485c      	ldr	r0, [pc, #368]	@ (8001448 <main+0x374>)
 80012d6:	f7ff fb63 	bl	80009a0 <updateCharValue>
			  is_moved_bc = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	677b      	str	r3, [r7, #116]	@ 0x74
		  }
		  if (count_ten == updated_count - 2){
 80012de:	4b52      	ldr	r3, [pc, #328]	@ (8001428 <main+0x354>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	1e9a      	subs	r2, r3, #2
 80012e4:	4b55      	ldr	r3, [pc, #340]	@ (800143c <main+0x368>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d124      	bne.n	8001336 <main+0x262>
			  time += 10;
 80012ec:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <main+0x35c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	330a      	adds	r3, #10
 80012f2:	4a4f      	ldr	r2, [pc, #316]	@ (8001430 <main+0x35c>)
 80012f4:	6013      	str	r3, [r2, #0]
			  count_ten = updated_count;
 80012f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001428 <main+0x354>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a50      	ldr	r2, [pc, #320]	@ (800143c <main+0x368>)
 80012fc:	6013      	str	r3, [r2, #0]
			  char str[100];
			  snprintf(str, sizeof(str), "P for %d seconds", time);
 80012fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001430 <main+0x35c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4638      	mov	r0, r7
 8001304:	4a51      	ldr	r2, [pc, #324]	@ (800144c <main+0x378>)
 8001306:	2164      	movs	r1, #100	@ 0x64
 8001308:	f002 fd54 	bl	8003db4 <sniprintf>
			  leds_set(0x01);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fd4b 	bl	8000da8 <leds_set>
			  HAL_Delay(1000);
 8001312:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001316:	f000 fc5f 	bl	8001bd8 <HAL_Delay>
			  // Send a string to the NORDIC UART service, remember to not include the newline
			  //unsigned char test_str[] = "PrivTag Airtag1 has been missing for" + str + "seconds";
			  //unsigned char *test_str = (unsigned char *)str;
			  //updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
			  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(str), (unsigned char*)str);
 800131a:	463b      	mov	r3, r7
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ff57 	bl	80001d0 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	463b      	mov	r3, r7
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	4945      	ldr	r1, [pc, #276]	@ (8001444 <main+0x370>)
 8001330:	4845      	ldr	r0, [pc, #276]	@ (8001448 <main+0x374>)
 8001332:	f7ff fb35 	bl	80009a0 <updateCharValue>
		  }
		  lsm6dsl_read_xyz(&x, &y, &z);  // Read accelerometer data for X, Y, Z axes
 8001336:	f107 026a 	add.w	r2, r7, #106	@ 0x6a
 800133a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800133e:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fde4 	bl	8000f10 <lsm6dsl_read_xyz>
		  if(x < lastX - thresh || x > lastX + thresh){//check to see if moved in x dir
 8001348:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800134c:	4619      	mov	r1, r3
 800134e:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 8001352:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4299      	cmp	r1, r3
 800135a:	db09      	blt.n	8001370 <main+0x29c>
 800135c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001360:	4619      	mov	r1, r3
 8001362:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 8001366:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 800136a:	4413      	add	r3, r2
 800136c:	4299      	cmp	r1, r3
 800136e:	dd0f      	ble.n	8001390 <main+0x2bc>
			  lastX = x;
 8001370:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001374:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				  leds_set(0x03);
 8001378:	2003      	movs	r0, #3
 800137a:	f7ff fd15 	bl	8000da8 <leds_set>
				  leds_set(0x04);
 800137e:	2004      	movs	r0, #4
 8001380:	f7ff fd12 	bl	8000da8 <leds_set>
			  updated_count = 0;
 8001384:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <main+0x354>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
			  time = 0;
 800138a:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <main+0x35c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
		  }
		  if((y < lastY - thresh || y > lastY + thresh)){ //check to see if moved in y dir
 8001390:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8001394:	4619      	mov	r1, r3
 8001396:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 800139a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4299      	cmp	r1, r3
 80013a2:	db09      	blt.n	80013b8 <main+0x2e4>
 80013a4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80013a8:	4619      	mov	r1, r3
 80013aa:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	@ 0x7c
 80013ae:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80013b2:	4413      	add	r3, r2
 80013b4:	4299      	cmp	r1, r3
 80013b6:	dd0f      	ble.n	80013d8 <main+0x304>
			  lastY = y;
 80013b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80013bc:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
				  leds_set(0x03);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f7ff fcf1 	bl	8000da8 <leds_set>
				  leds_set(0x04);
 80013c6:	2004      	movs	r0, #4
 80013c8:	f7ff fcee 	bl	8000da8 <leds_set>
			  updated_count = 0;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <main+0x354>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
			  time = 0;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <main+0x35c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
		  }
		  if((z < lastZ - thresh || z > lastZ + thresh)){ //check to see if moved in z dir
 80013d8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 80013dc:	4619      	mov	r1, r3
 80013de:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	@ 0x7a
 80013e2:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	4299      	cmp	r1, r3
 80013ea:	db0a      	blt.n	8001402 <main+0x32e>
 80013ec:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 80013f0:	4619      	mov	r1, r3
 80013f2:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	@ 0x7a
 80013f6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80013fa:	4413      	add	r3, r2
 80013fc:	4299      	cmp	r1, r3
 80013fe:	f77f aeb2 	ble.w	8001166 <main+0x92>
			  lastZ = z;
 8001402:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001406:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
				  leds_set(0x03);
 800140a:	2003      	movs	r0, #3
 800140c:	f7ff fccc 	bl	8000da8 <leds_set>
				  leds_set(0x04);
 8001410:	2004      	movs	r0, #4
 8001412:	f7ff fcc9 	bl	8000da8 <leds_set>
			  updated_count = 0;
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <main+0x354>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
			  time = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <main+0x35c>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	  if(updated_count < 12){	// less than 1 minute
 8001422:	e6a0      	b.n	8001166 <main+0x92>
 8001424:	0007a11f 	.word	0x0007a11f
 8001428:	20000338 	.word	0x20000338
 800142c:	08004f6c 	.word	0x08004f6c
 8001430:	20000340 	.word	0x20000340
 8001434:	08004f90 	.word	0x08004f90
 8001438:	48001000 	.word	0x48001000
 800143c:	2000033c 	.word	0x2000033c
 8001440:	08004fb0 	.word	0x08004fb0
 8001444:	200002c8 	.word	0x200002c8
 8001448:	200002c0 	.word	0x200002c0
 800144c:	08004f9c 	.word	0x08004f9c

08001450 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b096      	sub	sp, #88	@ 0x58
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2244      	movs	r2, #68	@ 0x44
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fdb4 	bl	8003fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001472:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001476:	f000 fef1 	bl	800225c <HAL_PWREx_ControlVoltageScaling>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001480:	f000 f902 	bl	8001688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001484:	2310      	movs	r3, #16
 8001486:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001490:	2370      	movs	r3, #112	@ 0x70
 8001492:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4618      	mov	r0, r3
 800149e:	f000 ff33 	bl	8002308 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014a8:	f000 f8ee 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fafb 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014d0:	f000 f8da 	bl	8001688 <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3758      	adds	r7, #88	@ 0x58
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_SPI3_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <MX_SPI3_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_SPI3_Init+0x74>)
 80014e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_SPI3_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <MX_SPI3_Init+0x74>)
 80014f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_SPI3_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_SPI3_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_SPI3_Init+0x74>)
 800150a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_SPI3_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_SPI3_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_SPI3_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_SPI3_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_SPI3_Init+0x74>)
 800152a:	2207      	movs	r2, #7
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_SPI3_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_SPI3_Init+0x74>)
 8001536:	2208      	movs	r2, #8
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_SPI3_Init+0x74>)
 800153c:	f001 fcac 	bl	8002e98 <HAL_SPI_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 f89f 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002d4 	.word	0x200002d4
 8001554:	40003c00 	.word	0x40003c00

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	4b43      	ldr	r3, [pc, #268]	@ (800167c <MX_GPIO_Init+0x124>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a42      	ldr	r2, [pc, #264]	@ (800167c <MX_GPIO_Init+0x124>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <MX_GPIO_Init+0x124>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <MX_GPIO_Init+0x124>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a3c      	ldr	r2, [pc, #240]	@ (800167c <MX_GPIO_Init+0x124>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <MX_GPIO_Init+0x124>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b37      	ldr	r3, [pc, #220]	@ (800167c <MX_GPIO_Init+0x124>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a36      	ldr	r2, [pc, #216]	@ (800167c <MX_GPIO_Init+0x124>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b34      	ldr	r3, [pc, #208]	@ (800167c <MX_GPIO_Init+0x124>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	@ (800167c <MX_GPIO_Init+0x124>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a30      	ldr	r2, [pc, #192]	@ (800167c <MX_GPIO_Init+0x124>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <MX_GPIO_Init+0x124>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <MX_GPIO_Init+0x124>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <MX_GPIO_Init+0x124>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b28      	ldr	r3, [pc, #160]	@ (800167c <MX_GPIO_Init+0x124>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2120      	movs	r1, #32
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ee:	f000 fdeb 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f8:	4821      	ldr	r0, [pc, #132]	@ (8001680 <MX_GPIO_Init+0x128>)
 80015fa:	f000 fde5 	bl	80021c8 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001608:	f000 fdde 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800160c:	2340      	movs	r3, #64	@ 0x40
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001610:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4818      	ldr	r0, [pc, #96]	@ (8001684 <MX_GPIO_Init+0x12c>)
 8001622:	f000 fc0f 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001626:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f000 fbff 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4808      	ldr	r0, [pc, #32]	@ (8001680 <MX_GPIO_Init+0x128>)
 8001660:	f000 fbf0 	bl	8001e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2017      	movs	r0, #23
 800166a:	f000 fbb4 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800166e:	2017      	movs	r0, #23
 8001670:	f000 fbcd 	bl	8001e0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	48000c00 	.word	0x48000c00
 8001684:	48001000 	.word	0x48001000

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <Error_Handler+0x8>

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_SPI_MspInit+0x7c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d128      	bne.n	8001750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_SPI_MspInit+0x80>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_SPI_MspInit+0x80>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_SPI_MspInit+0x80>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800172e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001740:	2306      	movs	r3, #6
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <HAL_SPI_MspInit+0x84>)
 800174c:	f000 fb7a 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40003c00 	.word	0x40003c00
 800175c:	40021000 	.word	0x40021000
 8001760:	48000800 	.word	0x48000800

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <NMI_Handler+0x4>

0800176c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <MemManage_Handler+0x4>

0800177c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <UsageFault_Handler+0x4>

0800178c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 f9ed 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <EXTI9_5_IRQHandler+0x14>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80017ce:	2040      	movs	r0, #64	@ 0x40
 80017d0:	f000 fd12 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002d0 	.word	0x200002d0

080017dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
	}

return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <_sbrk+0x50>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x16>
		heap_end = &end;
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <_sbrk+0x50>)
 800182a:	4a10      	ldr	r2, [pc, #64]	@ (800186c <_sbrk+0x54>)
 800182c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <_sbrk+0x50>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <_sbrk+0x50>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	466a      	mov	r2, sp
 800183e:	4293      	cmp	r3, r2
 8001840:	d907      	bls.n	8001852 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001842:	f002 fc21 	bl	8004088 <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	220c      	movs	r2, #12
 800184a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e006      	b.n	8001860 <_sbrk+0x48>
	}

	heap_end += incr;
 8001852:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <_sbrk+0x50>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <_sbrk+0x50>)
 800185c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000344 	.word	0x20000344
 800186c:	20000498 	.word	0x20000498

08001870 <_close>:

int _close(int file)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001898:	605a      	str	r2, [r3, #4]
	return 0;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_isatty>:

int _isatty(int file)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
	return 0;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <SystemInit+0x64>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	4a16      	ldr	r2, [pc, #88]	@ (800193c <SystemInit+0x64>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <SystemInit+0x68>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <SystemInit+0x68>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <SystemInit+0x68>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <SystemInit+0x68>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <SystemInit+0x68>)
 8001904:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001908:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800190c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <SystemInit+0x68>)
 8001910:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001914:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <SystemInit+0x68>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <SystemInit+0x68>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001920:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001922:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <SystemInit+0x68>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <SystemInit+0x64>)
 800192a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800192e:	609a      	str	r2, [r3, #8]
#endif
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	40021000 	.word	0x40021000

08001944 <__NVIC_EnableIRQ>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	@ (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	// Enable clock for TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <timer_init+0x64>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <timer_init+0x64>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable the timer
    timer->CR1 &= ~TIM_CR1_CEN;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 0201 	bic.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]

    // Reset counter and status register
    timer->CNT = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
    timer->SR = 0;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]

    // Set auto-reload value for 50 ms (assuming 4 MHz clock)
    timer->ARR = 0xFFFF;   // 50 ms period (1 kHz clock -> 50 ticks)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a06:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable update interrupt
    timer->DIER |= TIM_DIER_UIE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001a14:	201c      	movs	r0, #28
 8001a16:	f7ff ff95 	bl	8001944 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f7ff ffaf 	bl	8001980 <__NVIC_SetPriority>

    // Enable the timer
    timer->CR1 |= TIM_CR1_CEN;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  // TODO implement this
	timer->CNT = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  // TODO implement this
	uint32_t timer_clock = 4000000; // Timer clock after prescaler
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <timer_set_ms+0x3c>)
 8001a66:	60fb      	str	r3, [r7, #12]
	uint32_t period_ticks = (timer_clock / 1000) * period_ms; // Calculate period in ticks
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <timer_set_ms+0x40>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	60bb      	str	r3, [r7, #8]
	timer->ARR = period_ticks - 1; // Set auto-reload value
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer_reset(TIM2);
 8001a82:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001a86:	f7ff ffd9 	bl	8001a3c <timer_reset>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	003d0900 	.word	0x003d0900
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ff1a 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f002 fae3 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff fb01 	bl	80010d4 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001ae0:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 8001ae4:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001ae8:	20000498 	.word	0x20000498

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f961 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fdc0 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_InitTick+0x6c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_InitTick+0x70>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_InitTick+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f96d 	bl	8001e2a <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d809      	bhi.n	8001b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f937 	bl	8001dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b68:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_InitTick+0x74>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e004      	b.n	8001b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e001      	b.n	8001b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000138 	.word	0x20000138
 8001b90:	20000130 	.word	0x20000130
 8001b94:	20000134 	.word	0x20000134

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000138 	.word	0x20000138
 8001bbc:	20000348 	.word	0x20000348

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000348 	.word	0x20000348

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000138 	.word	0x20000138

08001c20 <__NVIC_SetPriorityGrouping>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e17f      	b.n	8002154 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8171 	beq.w	800214e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d005      	beq.n	8001e84 <HAL_GPIO_Init+0x40>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d130      	bne.n	8001ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 0201 	and.w	r2, r3, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d118      	bne.n	8001f24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	6939      	ldr	r1, [r7, #16]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ac 	beq.w	800214e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8002174 <HAL_GPIO_Init+0x330>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8002174 <HAL_GPIO_Init+0x330>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6613      	str	r3, [r2, #96]	@ 0x60
 8002002:	4b5c      	ldr	r3, [pc, #368]	@ (8002174 <HAL_GPIO_Init+0x330>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800200e:	4a5a      	ldr	r2, [pc, #360]	@ (8002178 <HAL_GPIO_Init+0x334>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x242>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4f      	ldr	r2, [pc, #316]	@ (800217c <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x23e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4e      	ldr	r2, [pc, #312]	@ (8002180 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x23a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4d      	ldr	r2, [pc, #308]	@ (8002184 <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x236>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4c      	ldr	r2, [pc, #304]	@ (8002188 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x232>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	@ (800218c <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x22e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	@ (8002190 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x22a>
 800206a:	2306      	movs	r3, #6
 800206c:	e00c      	b.n	8002088 <HAL_GPIO_Init+0x244>
 800206e:	2307      	movs	r3, #7
 8002070:	e00a      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002072:	2305      	movs	r3, #5
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002076:	2304      	movs	r3, #4
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x244>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x244>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002086:	2300      	movs	r3, #0
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002098:	4937      	ldr	r1, [pc, #220]	@ (8002178 <HAL_GPIO_Init+0x334>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ca:	4a32      	ldr	r2, [pc, #200]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020d0:	4b30      	ldr	r3, [pc, #192]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020fa:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800211e:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_GPIO_Init+0x350>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_GPIO_Init+0x350>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_GPIO_Init+0x350>)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae78 	bne.w	8001e54 <HAL_GPIO_Init+0x10>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000
 800217c:	48000400 	.word	0x48000400
 8002180:	48000800 	.word	0x48000800
 8002184:	48000c00 	.word	0x48000c00
 8002188:	48001000 	.word	0x48001000
 800218c:	48001400 	.word	0x48001400
 8002190:	48001800 	.word	0x48001800
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f806 	bl	8002228 <HAL_GPIO_EXTI_Callback>
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <HAL_PWREx_GetVoltageRange+0x18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800226a:	d130      	bne.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800226c:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002278:	d038      	beq.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002284:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2232      	movs	r2, #50	@ 0x32
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4a1b      	ldr	r2, [pc, #108]	@ (8002304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a0:	e002      	b.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b4:	d102      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f2      	bne.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c8:	d110      	bne.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e00f      	b.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022da:	d007      	beq.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e4:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40007000 	.word	0x40007000
 8002300:	20000130 	.word	0x20000130
 8002304:	431bde83 	.word	0x431bde83

08002308 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e3ca      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4b97      	ldr	r3, [pc, #604]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4b94      	ldr	r3, [pc, #592]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80e4 	beq.w	8002504 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_RCC_OscConfig+0x4a>
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	f040 808b 	bne.w	8002460 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b01      	cmp	r3, #1
 800234e:	f040 8087 	bne.w	8002460 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002352:	4b89      	ldr	r3, [pc, #548]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e3a2      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	4b82      	ldr	r3, [pc, #520]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_RCC_OscConfig+0x7c>
 800237a:	4b7f      	ldr	r3, [pc, #508]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002382:	e005      	b.n	8002390 <HAL_RCC_OscConfig+0x88>
 8002384:	4b7c      	ldr	r3, [pc, #496]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002390:	4293      	cmp	r3, r2
 8002392:	d223      	bcs.n	80023dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fd1d 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e383      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a8:	4b73      	ldr	r3, [pc, #460]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a72      	ldr	r2, [pc, #456]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b70      	ldr	r3, [pc, #448]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	496d      	ldr	r1, [pc, #436]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	4968      	ldr	r1, [pc, #416]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	e025      	b.n	8002428 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023dc:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023e2:	f043 0308 	orr.w	r3, r3, #8
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4960      	ldr	r1, [pc, #384]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	495b      	ldr	r1, [pc, #364]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fcdd 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e343      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002428:	f000 fc4a 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	4950      	ldr	r1, [pc, #320]	@ (800257c <HAL_RCC_OscConfig+0x274>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	4a4e      	ldr	r2, [pc, #312]	@ (8002580 <HAL_RCC_OscConfig+0x278>)
 8002446:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002448:	4b4e      	ldr	r3, [pc, #312]	@ (8002584 <HAL_RCC_OscConfig+0x27c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fb67 	bl	8001b20 <HAL_InitTick>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d052      	beq.n	8002502 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	e327      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d032      	beq.n	80024ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002468:	4b43      	ldr	r3, [pc, #268]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a42      	ldr	r2, [pc, #264]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002474:	f7ff fba4 	bl	8001bc0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800247c:	f7ff fba0 	bl	8001bc0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e310      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248e:	4b3a      	ldr	r3, [pc, #232]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249a:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a36      	ldr	r2, [pc, #216]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4931      	ldr	r1, [pc, #196]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	492c      	ldr	r1, [pc, #176]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e01a      	b.n	8002504 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a29      	ldr	r2, [pc, #164]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024da:	f7ff fb71 	bl	8001bc0 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e2:	f7ff fb6d 	bl	8001bc0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e2dd      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f4:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x1da>
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002502:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d074      	beq.n	80025fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x21a>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d10e      	bne.n	800253a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d064      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d160      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e2ba      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x24a>
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0b      	ldr	r2, [pc, #44]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e026      	b.n	80025a0 <HAL_RCC_OscConfig+0x298>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800255a:	d115      	bne.n	8002588 <HAL_RCC_OscConfig+0x280>
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 8002562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a02      	ldr	r2, [pc, #8]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x298>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	08004fe0 	.word	0x08004fe0
 8002580:	20000130 	.word	0x20000130
 8002584:	20000134 	.word	0x20000134
 8002588:	4ba0      	ldr	r3, [pc, #640]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a9f      	ldr	r2, [pc, #636]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b9d      	ldr	r3, [pc, #628]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a9c      	ldr	r2, [pc, #624]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff fb0a 	bl	8001bc0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fb06 	bl	8001bc0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e276      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c2:	4b92      	ldr	r3, [pc, #584]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2a8>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff faf6 	bl	8001bc0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff faf2 	bl	8001bc0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	@ 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e262      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ea:	4b88      	ldr	r3, [pc, #544]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2d0>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d060      	beq.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d005      	beq.n	8002618 <HAL_RCC_OscConfig+0x310>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d119      	bne.n	8002646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d116      	bne.n	8002646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	4b7c      	ldr	r3, [pc, #496]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x328>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e23f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	4973      	ldr	r1, [pc, #460]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002644:	e040      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d023      	beq.n	8002696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264e:	4b6f      	ldr	r3, [pc, #444]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6e      	ldr	r2, [pc, #440]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff fab1 	bl	8001bc0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7ff faad 	bl	8001bc0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e21d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002674:	4b65      	ldr	r3, [pc, #404]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b62      	ldr	r3, [pc, #392]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	495f      	ldr	r1, [pc, #380]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
 8002694:	e018      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002696:	4b5d      	ldr	r3, [pc, #372]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5c      	ldr	r2, [pc, #368]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800269c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff fa8d 	bl	8001bc0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7ff fa89 	bl	8001bc0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1f9      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026bc:	4b53      	ldr	r3, [pc, #332]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03c      	beq.n	800274e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026dc:	4b4b      	ldr	r3, [pc, #300]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e2:	4a4a      	ldr	r2, [pc, #296]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7ff fa68 	bl	8001bc0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff fa64 	bl	8001bc0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1d4      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002706:	4b41      	ldr	r3, [pc, #260]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <HAL_RCC_OscConfig+0x3ec>
 8002714:	e01b      	b.n	800274e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002716:	4b3d      	ldr	r3, [pc, #244]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271c:	4a3b      	ldr	r2, [pc, #236]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7ff fa4b 	bl	8001bc0 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272e:	f7ff fa47 	bl	8001bc0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1b7      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ef      	bne.n	800272e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80a6 	beq.w	80028a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002760:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6593      	str	r3, [r2, #88]	@ 0x58
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002784:	2301      	movs	r3, #1
 8002786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <HAL_RCC_OscConfig+0x508>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d118      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002794:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_RCC_OscConfig+0x508>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_RCC_OscConfig+0x508>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a0:	f7ff fa0e 	bl	8001bc0 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7ff fa0a 	bl	8001bc0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e17a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_RCC_OscConfig+0x508>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4d8>
 80027ce:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d4:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027de:	e029      	b.n	8002834 <HAL_RCC_OscConfig+0x52c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d115      	bne.n	8002814 <HAL_RCC_OscConfig+0x50c>
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a07      	ldr	r2, [pc, #28]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a03      	ldr	r2, [pc, #12]	@ (800280c <HAL_RCC_OscConfig+0x504>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002808:	e014      	b.n	8002834 <HAL_RCC_OscConfig+0x52c>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40007000 	.word	0x40007000
 8002814:	4b9c      	ldr	r3, [pc, #624]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	4a9b      	ldr	r2, [pc, #620]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002824:	4b98      	ldr	r3, [pc, #608]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	4a97      	ldr	r2, [pc, #604]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7ff f9c0 	bl	8001bc0 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002842:	e00a      	b.n	800285a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7ff f9bc 	bl	8001bc0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e12a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ed      	beq.n	8002844 <HAL_RCC_OscConfig+0x53c>
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7ff f9a9 	bl	8001bc0 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7ff f9a5 	bl	8001bc0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e113      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002888:	4b7f      	ldr	r3, [pc, #508]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ed      	bne.n	8002872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002896:	7ffb      	ldrb	r3, [r7, #31]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d105      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	4a79      	ldr	r2, [pc, #484]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80028a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80fe 	beq.w	8002aae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	f040 80d0 	bne.w	8002a5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028bc:	4b72      	ldr	r3, [pc, #456]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d130      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	3b01      	subs	r3, #1
 80028dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d127      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d11f      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028fc:	2a07      	cmp	r2, #7
 80028fe:	bf14      	ite	ne
 8002900:	2201      	movne	r2, #1
 8002902:	2200      	moveq	r2, #0
 8002904:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d109      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d06e      	beq.n	8002a10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d069      	beq.n	8002a0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002938:	4b53      	ldr	r3, [pc, #332]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002944:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0ad      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002954:	4b4c      	ldr	r3, [pc, #304]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4b      	ldr	r2, [pc, #300]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002960:	f7ff f92e 	bl	8001bc0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7ff f92a 	bl	8001bc0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e09a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297a:	4b43      	ldr	r3, [pc, #268]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002986:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <HAL_RCC_OscConfig+0x784>)
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002996:	3a01      	subs	r2, #1
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029a0:	0212      	lsls	r2, r2, #8
 80029a2:	4311      	orrs	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029a8:	0852      	lsrs	r2, r2, #1
 80029aa:	3a01      	subs	r2, #1
 80029ac:	0552      	lsls	r2, r2, #21
 80029ae:	4311      	orrs	r1, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029b4:	0852      	lsrs	r2, r2, #1
 80029b6:	3a01      	subs	r2, #1
 80029b8:	0652      	lsls	r2, r2, #25
 80029ba:	4311      	orrs	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029c0:	0912      	lsrs	r2, r2, #4
 80029c2:	0452      	lsls	r2, r2, #17
 80029c4:	430a      	orrs	r2, r1
 80029c6:	4930      	ldr	r1, [pc, #192]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e4:	f7ff f8ec 	bl	8001bc0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7ff f8e8 	bl	8001bc0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e058      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b22      	ldr	r3, [pc, #136]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0a:	e050      	b.n	8002aae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e04f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a10:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d148      	bne.n	8002aae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a16      	ldr	r2, [pc, #88]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a34:	f7ff f8c4 	bl	8001bc0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff f8c0 	bl	8001bc0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e030      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x734>
 8002a5a:	e028      	b.n	8002aae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d023      	beq.n	8002aaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f8a7 	bl	8001bc0 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	e00c      	b.n	8002a90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff f8a3 	bl	8001bc0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d905      	bls.n	8002a90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e013      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x7b0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ec      	bne.n	8002a76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x7b0>)
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	4905      	ldr	r1, [pc, #20]	@ (8002ab8 <HAL_RCC_OscConfig+0x7b0>)
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_OscConfig+0x7b4>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
 8002aa8:	e001      	b.n	8002aae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	feeefffc 	.word	0xfeeefffc

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0e7      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b75      	ldr	r3, [pc, #468]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d910      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b72      	ldr	r3, [pc, #456]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4970      	ldr	r1, [pc, #448]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b6e      	ldr	r3, [pc, #440]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0cf      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4b66      	ldr	r3, [pc, #408]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d908      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4960      	ldr	r1, [pc, #384]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d04c      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d121      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0a6      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	4b54      	ldr	r3, [pc, #336]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d115      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e09a      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b76:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e08e      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b86:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e086      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b46      	ldr	r3, [pc, #280]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4943      	ldr	r1, [pc, #268]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7ff f80a 	bl	8001bc0 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7ff f806 	bl	8001bc0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e06e      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d208      	bcs.n	8002c06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	492b      	ldr	r1, [pc, #172]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c06:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d210      	bcs.n	8002c36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c14:	4b25      	ldr	r3, [pc, #148]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 0207 	bic.w	r2, r3, #7
 8002c1c:	4923      	ldr	r1, [pc, #140]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c24:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e036      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4918      	ldr	r1, [pc, #96]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4910      	ldr	r1, [pc, #64]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c74:	f000 f824 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	490b      	ldr	r1, [pc, #44]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	4a09      	ldr	r2, [pc, #36]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <HAL_RCC_ClockConfig+0x1fc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ff41 	bl	8001b20 <HAL_InitTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08004fe0 	.word	0x08004fe0
 8002cb8:	20000130 	.word	0x20000130
 8002cbc:	20000134 	.word	0x20000134

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cce:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d121      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d11e      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf4:	4b34      	ldr	r3, [pc, #208]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d00:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e005      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d10:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d102      	bne.n	8002d3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d38:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e004      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d44:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d134      	bne.n	8002db8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d003      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0xac>
 8002d64:	e005      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d68:	617b      	str	r3, [r7, #20]
      break;
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6e:	617b      	str	r3, [r7, #20]
      break;
 8002d70:	e002      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	617b      	str	r3, [r7, #20]
      break;
 8002d76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	3301      	adds	r3, #1
 8002d84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	fb03 f202 	mul.w	r2, r3, r2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	0e5b      	lsrs	r3, r3, #25
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	3301      	adds	r3, #1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db8:	69bb      	ldr	r3, [r7, #24]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	@ 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08004ff0 	.word	0x08004ff0
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	007a1200 	.word	0x007a1200

08002dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff fa26 	bl	8002240 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	e014      	b.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a24      	ldr	r2, [pc, #144]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff fa16 	bl	8002240 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e28:	d10b      	bne.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d919      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e34:	d902      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e013      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e010      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	@ 0x80
 8002e46:	d902      	bls.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e48:	2303      	movs	r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e00a      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b80      	cmp	r3, #128	@ 0x80
 8002e52:	d102      	bne.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e54:	2302      	movs	r3, #2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	e004      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d101      	bne.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4909      	ldr	r1, [pc, #36]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e74:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e095      	b.n	8002fd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eba:	d009      	beq.n	8002ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
 8002ec2:	e005      	b.n	8002ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe fbf6 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f10:	d902      	bls.n	8002f18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e002      	b.n	8002f1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f26:	d007      	beq.n	8002f38 <HAL_SPI_Init+0xa0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	ea42 0103 	orr.w	r1, r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	f003 0204 	and.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fb4:	ea42 0103 	orr.w	r1, r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b088      	sub	sp, #32
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_SPI_Transmit+0x22>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e15f      	b.n	80032c0 <HAL_SPI_Transmit+0x2e2>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003008:	f7fe fdda 	bl	8001bc0 <HAL_GetTick>
 800300c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003022:	e148      	b.n	80032b6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_SPI_Transmit+0x52>
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003034:	e13f      	b.n	80032b6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003080:	d10f      	bne.n	80030a2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003090:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ac:	2b40      	cmp	r3, #64	@ 0x40
 80030ae:	d007      	beq.n	80030c0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c8:	d94f      	bls.n	800316a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0xfa>
 80030d2:	8afb      	ldrh	r3, [r7, #22]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d142      	bne.n	800315e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030fc:	e02f      	b.n	800315e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d112      	bne.n	8003132 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003130:	e015      	b.n	800315e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003132:	f7fe fd45 	bl	8001bc0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d803      	bhi.n	800314a <HAL_SPI_Transmit+0x16c>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Transmit+0x172>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800315c:	e0ab      	b.n	80032b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ca      	bne.n	80030fe <HAL_SPI_Transmit+0x120>
 8003168:	e080      	b.n	800326c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_SPI_Transmit+0x19a>
 8003172:	8afb      	ldrh	r3, [r7, #22]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d174      	bne.n	8003262 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d912      	bls.n	80031a8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b02      	subs	r3, #2
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031a6:	e05c      	b.n	8003262 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	7812      	ldrb	r2, [r2, #0]
 80031b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031ce:	e048      	b.n	8003262 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d12b      	bne.n	8003236 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d912      	bls.n	800320e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	1c9a      	adds	r2, r3, #2
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b02      	subs	r3, #2
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800320c:	e029      	b.n	8003262 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003234:	e015      	b.n	8003262 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003236:	f7fe fcc3 	bl	8001bc0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_Transmit+0x270>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x276>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003260:	e029      	b.n	80032b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1b1      	bne.n	80031d0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	6839      	ldr	r1, [r7, #0]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fb69 	bl	8003948 <SPI_EndRxTxTransaction>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e003      	b.n	80032b6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032be:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	@ 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d6:	2301      	movs	r3, #1
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x26>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e20a      	b.n	8003704 <HAL_SPI_TransmitReceive+0x43c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f6:	f7fe fc63 	bl	8001bc0 <HAL_GetTick>
 80032fa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003302:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003312:	7efb      	ldrb	r3, [r7, #27]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d00e      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x6e>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331e:	d106      	bne.n	800332e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_SPI_TransmitReceive+0x66>
 8003328:	7efb      	ldrb	r3, [r7, #27]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d003      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800332e:	2302      	movs	r3, #2
 8003330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003334:	e1e0      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x80>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x80>
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800334e:	e1d3      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b04      	cmp	r3, #4
 800335a:	d003      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2205      	movs	r2, #5
 8003360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	887a      	ldrh	r2, [r7, #2]
 800338a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a6:	d802      	bhi.n	80033ae <HAL_SPI_TransmitReceive+0xe6>
 80033a8:	8a3b      	ldrh	r3, [r7, #16]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d908      	bls.n	80033c0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e007      	b.n	80033d0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b40      	cmp	r3, #64	@ 0x40
 80033dc:	d007      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033f6:	f240 8081 	bls.w	80034fc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x140>
 8003402:	8a7b      	ldrh	r3, [r7, #18]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d16d      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342c:	e05a      	b.n	80034e4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11b      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x1ac>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x1ac>
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	2b01      	cmp	r3, #1
 800344a:	d113      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d11c      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x1f4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	b292      	uxth	r2, r2
 800349a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b8:	2301      	movs	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034bc:	f7fe fb80 	bl	8001bc0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d80b      	bhi.n	80034e4 <HAL_SPI_TransmitReceive+0x21c>
 80034cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d007      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034e2:	e109      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d19f      	bne.n	800342e <HAL_SPI_TransmitReceive+0x166>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d199      	bne.n	800342e <HAL_SPI_TransmitReceive+0x166>
 80034fa:	e0e3      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_SPI_TransmitReceive+0x244>
 8003504:	8a7b      	ldrh	r3, [r7, #18]
 8003506:	2b01      	cmp	r3, #1
 8003508:	f040 80cf 	bne.w	80036aa <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d912      	bls.n	800353c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b02      	subs	r3, #2
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800353a:	e0b6      	b.n	80036aa <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	7812      	ldrb	r2, [r2, #0]
 8003548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003562:	e0a2      	b.n	80036aa <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d134      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x314>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02f      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x314>
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	2b01      	cmp	r3, #1
 8003580:	d12c      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d912      	bls.n	80035b2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	881a      	ldrh	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	1c9a      	adds	r2, r3, #2
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b02      	subs	r3, #2
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035b0:	e012      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d148      	bne.n	800367c <HAL_SPI_TransmitReceive+0x3b4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d042      	beq.n	800367c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d923      	bls.n	800364a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b02      	subs	r3, #2
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d81f      	bhi.n	8003678 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	e016      	b.n	8003678 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f103 020c 	add.w	r2, r3, #12
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003678:	2301      	movs	r3, #1
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800367c:	f7fe faa0 	bl	8001bc0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003688:	429a      	cmp	r2, r3
 800368a:	d803      	bhi.n	8003694 <HAL_SPI_TransmitReceive+0x3cc>
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d102      	bne.n	800369a <HAL_SPI_TransmitReceive+0x3d2>
 8003694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80036a8:	e026      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f af57 	bne.w	8003564 <HAL_SPI_TransmitReceive+0x29c>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f47f af50 	bne.w	8003564 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f93d 	bl	8003948 <SPI_EndRxTxTransaction>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e003      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003700:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	@ 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800371c:	f7fe fa50 	bl	8001bc0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4413      	add	r3, r2
 800372a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800372c:	f7fe fa48 	bl	8001bc0 <HAL_GetTick>
 8003730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003732:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	0d1b      	lsrs	r3, r3, #20
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003742:	e054      	b.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d050      	beq.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800374c:	f7fe fa38 	bl	8001bc0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	429a      	cmp	r2, r3
 800375a:	d902      	bls.n	8003762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d13d      	bne.n	80037de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800377a:	d111      	bne.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003784:	d004      	beq.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378e:	d107      	bne.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a8:	d10f      	bne.n	80037ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e017      	b.n	800380e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	429a      	cmp	r2, r3
 800380a:	d19b      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000130 	.word	0x20000130

0800381c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	@ 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800382e:	f7fe f9c7 	bl	8001bc0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	4413      	add	r3, r2
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800383e:	f7fe f9bf 	bl	8001bc0 <HAL_GetTick>
 8003842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800384c:	4b3d      	ldr	r3, [pc, #244]	@ (8003944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00da      	lsls	r2, r3, #3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	0d1b      	lsrs	r3, r3, #20
 800385c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003864:	e060      	b.n	8003928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800386c:	d107      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800387c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d050      	beq.n	8003928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003886:	f7fe f99b 	bl	8001bc0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003892:	429a      	cmp	r2, r3
 8003894:	d902      	bls.n	800389c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13d      	bne.n	8003918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b4:	d111      	bne.n	80038da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038be:	d004      	beq.n	80038ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d107      	bne.n	80038da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e2:	d10f      	bne.n	8003904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e010      	b.n	800393a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3b01      	subs	r3, #1
 8003926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d196      	bne.n	8003866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	@ 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000130 	.word	0x20000130

08003948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff ff5b 	bl	800381c <SPI_WaitFifoStateUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e027      	b.n	80039cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	@ 0x80
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff fec0 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e014      	b.n	80039cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff ff34 	bl	800381c <SPI_WaitFifoStateUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e000      	b.n	80039cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <malloc>:
 80039d4:	4b02      	ldr	r3, [pc, #8]	@ (80039e0 <malloc+0xc>)
 80039d6:	4601      	mov	r1, r0
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	f000 b82d 	b.w	8003a38 <_malloc_r>
 80039de:	bf00      	nop
 80039e0:	20000148 	.word	0x20000148

080039e4 <free>:
 80039e4:	4b02      	ldr	r3, [pc, #8]	@ (80039f0 <free+0xc>)
 80039e6:	4601      	mov	r1, r0
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f000 bb89 	b.w	8004100 <_free_r>
 80039ee:	bf00      	nop
 80039f0:	20000148 	.word	0x20000148

080039f4 <sbrk_aligned>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a34 <sbrk_aligned+0x40>)
 80039f8:	460c      	mov	r4, r1
 80039fa:	6831      	ldr	r1, [r6, #0]
 80039fc:	4605      	mov	r5, r0
 80039fe:	b911      	cbnz	r1, 8003a06 <sbrk_aligned+0x12>
 8003a00:	f000 fb20 	bl	8004044 <_sbrk_r>
 8003a04:	6030      	str	r0, [r6, #0]
 8003a06:	4621      	mov	r1, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 fb1b 	bl	8004044 <_sbrk_r>
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	d103      	bne.n	8003a1a <sbrk_aligned+0x26>
 8003a12:	f04f 34ff 	mov.w	r4, #4294967295
 8003a16:	4620      	mov	r0, r4
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
 8003a1a:	1cc4      	adds	r4, r0, #3
 8003a1c:	f024 0403 	bic.w	r4, r4, #3
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d0f8      	beq.n	8003a16 <sbrk_aligned+0x22>
 8003a24:	1a21      	subs	r1, r4, r0
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 fb0c 	bl	8004044 <_sbrk_r>
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d1f2      	bne.n	8003a16 <sbrk_aligned+0x22>
 8003a30:	e7ef      	b.n	8003a12 <sbrk_aligned+0x1e>
 8003a32:	bf00      	nop
 8003a34:	2000034c 	.word	0x2000034c

08003a38 <_malloc_r>:
 8003a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a3c:	1ccd      	adds	r5, r1, #3
 8003a3e:	f025 0503 	bic.w	r5, r5, #3
 8003a42:	3508      	adds	r5, #8
 8003a44:	2d0c      	cmp	r5, #12
 8003a46:	bf38      	it	cc
 8003a48:	250c      	movcc	r5, #12
 8003a4a:	2d00      	cmp	r5, #0
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	db01      	blt.n	8003a54 <_malloc_r+0x1c>
 8003a50:	42a9      	cmp	r1, r5
 8003a52:	d904      	bls.n	8003a5e <_malloc_r+0x26>
 8003a54:	230c      	movs	r3, #12
 8003a56:	6033      	str	r3, [r6, #0]
 8003a58:	2000      	movs	r0, #0
 8003a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b34 <_malloc_r+0xfc>
 8003a62:	f000 f869 	bl	8003b38 <__malloc_lock>
 8003a66:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6a:	461c      	mov	r4, r3
 8003a6c:	bb44      	cbnz	r4, 8003ac0 <_malloc_r+0x88>
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff ffbf 	bl	80039f4 <sbrk_aligned>
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	4604      	mov	r4, r0
 8003a7a:	d158      	bne.n	8003b2e <_malloc_r+0xf6>
 8003a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a80:	4627      	mov	r7, r4
 8003a82:	2f00      	cmp	r7, #0
 8003a84:	d143      	bne.n	8003b0e <_malloc_r+0xd6>
 8003a86:	2c00      	cmp	r4, #0
 8003a88:	d04b      	beq.n	8003b22 <_malloc_r+0xea>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4630      	mov	r0, r6
 8003a90:	eb04 0903 	add.w	r9, r4, r3
 8003a94:	f000 fad6 	bl	8004044 <_sbrk_r>
 8003a98:	4581      	cmp	r9, r0
 8003a9a:	d142      	bne.n	8003b22 <_malloc_r+0xea>
 8003a9c:	6821      	ldr	r1, [r4, #0]
 8003a9e:	1a6d      	subs	r5, r5, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7ff ffa6 	bl	80039f4 <sbrk_aligned>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d03a      	beq.n	8003b22 <_malloc_r+0xea>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	442b      	add	r3, r5
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	bb62      	cbnz	r2, 8003b14 <_malloc_r+0xdc>
 8003aba:	f8c8 7000 	str.w	r7, [r8]
 8003abe:	e00f      	b.n	8003ae0 <_malloc_r+0xa8>
 8003ac0:	6822      	ldr	r2, [r4, #0]
 8003ac2:	1b52      	subs	r2, r2, r5
 8003ac4:	d420      	bmi.n	8003b08 <_malloc_r+0xd0>
 8003ac6:	2a0b      	cmp	r2, #11
 8003ac8:	d917      	bls.n	8003afa <_malloc_r+0xc2>
 8003aca:	1961      	adds	r1, r4, r5
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	6025      	str	r5, [r4, #0]
 8003ad0:	bf18      	it	ne
 8003ad2:	6059      	strne	r1, [r3, #4]
 8003ad4:	6863      	ldr	r3, [r4, #4]
 8003ad6:	bf08      	it	eq
 8003ad8:	f8c8 1000 	streq.w	r1, [r8]
 8003adc:	5162      	str	r2, [r4, r5]
 8003ade:	604b      	str	r3, [r1, #4]
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 f82f 	bl	8003b44 <__malloc_unlock>
 8003ae6:	f104 000b 	add.w	r0, r4, #11
 8003aea:	1d23      	adds	r3, r4, #4
 8003aec:	f020 0007 	bic.w	r0, r0, #7
 8003af0:	1ac2      	subs	r2, r0, r3
 8003af2:	bf1c      	itt	ne
 8003af4:	1a1b      	subne	r3, r3, r0
 8003af6:	50a3      	strne	r3, [r4, r2]
 8003af8:	e7af      	b.n	8003a5a <_malloc_r+0x22>
 8003afa:	6862      	ldr	r2, [r4, #4]
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	bf0c      	ite	eq
 8003b00:	f8c8 2000 	streq.w	r2, [r8]
 8003b04:	605a      	strne	r2, [r3, #4]
 8003b06:	e7eb      	b.n	8003ae0 <_malloc_r+0xa8>
 8003b08:	4623      	mov	r3, r4
 8003b0a:	6864      	ldr	r4, [r4, #4]
 8003b0c:	e7ae      	b.n	8003a6c <_malloc_r+0x34>
 8003b0e:	463c      	mov	r4, r7
 8003b10:	687f      	ldr	r7, [r7, #4]
 8003b12:	e7b6      	b.n	8003a82 <_malloc_r+0x4a>
 8003b14:	461a      	mov	r2, r3
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	d1fb      	bne.n	8003b14 <_malloc_r+0xdc>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6053      	str	r3, [r2, #4]
 8003b20:	e7de      	b.n	8003ae0 <_malloc_r+0xa8>
 8003b22:	230c      	movs	r3, #12
 8003b24:	6033      	str	r3, [r6, #0]
 8003b26:	4630      	mov	r0, r6
 8003b28:	f000 f80c 	bl	8003b44 <__malloc_unlock>
 8003b2c:	e794      	b.n	8003a58 <_malloc_r+0x20>
 8003b2e:	6005      	str	r5, [r0, #0]
 8003b30:	e7d6      	b.n	8003ae0 <_malloc_r+0xa8>
 8003b32:	bf00      	nop
 8003b34:	20000350 	.word	0x20000350

08003b38 <__malloc_lock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	@ (8003b40 <__malloc_lock+0x8>)
 8003b3a:	f000 bad0 	b.w	80040de <__retarget_lock_acquire_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000494 	.word	0x20000494

08003b44 <__malloc_unlock>:
 8003b44:	4801      	ldr	r0, [pc, #4]	@ (8003b4c <__malloc_unlock+0x8>)
 8003b46:	f000 bacb 	b.w	80040e0 <__retarget_lock_release_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	20000494 	.word	0x20000494

08003b50 <std>:
 8003b50:	2300      	movs	r3, #0
 8003b52:	b510      	push	{r4, lr}
 8003b54:	4604      	mov	r4, r0
 8003b56:	e9c0 3300 	strd	r3, r3, [r0]
 8003b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b5e:	6083      	str	r3, [r0, #8]
 8003b60:	8181      	strh	r1, [r0, #12]
 8003b62:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b64:	81c2      	strh	r2, [r0, #14]
 8003b66:	6183      	str	r3, [r0, #24]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	305c      	adds	r0, #92	@ 0x5c
 8003b6e:	f000 fa2d 	bl	8003fcc <memset>
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <std+0x58>)
 8003b74:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <std+0x5c>)
 8003b78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <std+0x60>)
 8003b7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <std+0x64>)
 8003b80:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b82:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <std+0x68>)
 8003b84:	6224      	str	r4, [r4, #32]
 8003b86:	429c      	cmp	r4, r3
 8003b88:	d006      	beq.n	8003b98 <std+0x48>
 8003b8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b8e:	4294      	cmp	r4, r2
 8003b90:	d002      	beq.n	8003b98 <std+0x48>
 8003b92:	33d0      	adds	r3, #208	@ 0xd0
 8003b94:	429c      	cmp	r4, r3
 8003b96:	d105      	bne.n	8003ba4 <std+0x54>
 8003b98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba0:	f000 ba9c 	b.w	80040dc <__retarget_lock_init_recursive>
 8003ba4:	bd10      	pop	{r4, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08003e1d 	.word	0x08003e1d
 8003bac:	08003e3f 	.word	0x08003e3f
 8003bb0:	08003e77 	.word	0x08003e77
 8003bb4:	08003e9b 	.word	0x08003e9b
 8003bb8:	20000354 	.word	0x20000354

08003bbc <stdio_exit_handler>:
 8003bbc:	4a02      	ldr	r2, [pc, #8]	@ (8003bc8 <stdio_exit_handler+0xc>)
 8003bbe:	4903      	ldr	r1, [pc, #12]	@ (8003bcc <stdio_exit_handler+0x10>)
 8003bc0:	4803      	ldr	r0, [pc, #12]	@ (8003bd0 <stdio_exit_handler+0x14>)
 8003bc2:	f000 b869 	b.w	8003c98 <_fwalk_sglue>
 8003bc6:	bf00      	nop
 8003bc8:	2000013c 	.word	0x2000013c
 8003bcc:	08004aed 	.word	0x08004aed
 8003bd0:	2000014c 	.word	0x2000014c

08003bd4 <cleanup_stdio>:
 8003bd4:	6841      	ldr	r1, [r0, #4]
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <cleanup_stdio+0x34>)
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	4604      	mov	r4, r0
 8003bde:	d001      	beq.n	8003be4 <cleanup_stdio+0x10>
 8003be0:	f000 ff84 	bl	8004aec <_fflush_r>
 8003be4:	68a1      	ldr	r1, [r4, #8]
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <cleanup_stdio+0x38>)
 8003be8:	4299      	cmp	r1, r3
 8003bea:	d002      	beq.n	8003bf2 <cleanup_stdio+0x1e>
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 ff7d 	bl	8004aec <_fflush_r>
 8003bf2:	68e1      	ldr	r1, [r4, #12]
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <cleanup_stdio+0x3c>)
 8003bf6:	4299      	cmp	r1, r3
 8003bf8:	d004      	beq.n	8003c04 <cleanup_stdio+0x30>
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c00:	f000 bf74 	b.w	8004aec <_fflush_r>
 8003c04:	bd10      	pop	{r4, pc}
 8003c06:	bf00      	nop
 8003c08:	20000354 	.word	0x20000354
 8003c0c:	200003bc 	.word	0x200003bc
 8003c10:	20000424 	.word	0x20000424

08003c14 <global_stdio_init.part.0>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <global_stdio_init.part.0+0x30>)
 8003c18:	4c0b      	ldr	r4, [pc, #44]	@ (8003c48 <global_stdio_init.part.0+0x34>)
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c4c <global_stdio_init.part.0+0x38>)
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	4620      	mov	r0, r4
 8003c20:	2200      	movs	r2, #0
 8003c22:	2104      	movs	r1, #4
 8003c24:	f7ff ff94 	bl	8003b50 <std>
 8003c28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	2109      	movs	r1, #9
 8003c30:	f7ff ff8e 	bl	8003b50 <std>
 8003c34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c38:	2202      	movs	r2, #2
 8003c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3e:	2112      	movs	r1, #18
 8003c40:	f7ff bf86 	b.w	8003b50 <std>
 8003c44:	2000048c 	.word	0x2000048c
 8003c48:	20000354 	.word	0x20000354
 8003c4c:	08003bbd 	.word	0x08003bbd

08003c50 <__sfp_lock_acquire>:
 8003c50:	4801      	ldr	r0, [pc, #4]	@ (8003c58 <__sfp_lock_acquire+0x8>)
 8003c52:	f000 ba44 	b.w	80040de <__retarget_lock_acquire_recursive>
 8003c56:	bf00      	nop
 8003c58:	20000495 	.word	0x20000495

08003c5c <__sfp_lock_release>:
 8003c5c:	4801      	ldr	r0, [pc, #4]	@ (8003c64 <__sfp_lock_release+0x8>)
 8003c5e:	f000 ba3f 	b.w	80040e0 <__retarget_lock_release_recursive>
 8003c62:	bf00      	nop
 8003c64:	20000495 	.word	0x20000495

08003c68 <__sinit>:
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	f7ff fff0 	bl	8003c50 <__sfp_lock_acquire>
 8003c70:	6a23      	ldr	r3, [r4, #32]
 8003c72:	b11b      	cbz	r3, 8003c7c <__sinit+0x14>
 8003c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c78:	f7ff bff0 	b.w	8003c5c <__sfp_lock_release>
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <__sinit+0x28>)
 8003c7e:	6223      	str	r3, [r4, #32]
 8003c80:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <__sinit+0x2c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f5      	bne.n	8003c74 <__sinit+0xc>
 8003c88:	f7ff ffc4 	bl	8003c14 <global_stdio_init.part.0>
 8003c8c:	e7f2      	b.n	8003c74 <__sinit+0xc>
 8003c8e:	bf00      	nop
 8003c90:	08003bd5 	.word	0x08003bd5
 8003c94:	2000048c 	.word	0x2000048c

08003c98 <_fwalk_sglue>:
 8003c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	4688      	mov	r8, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8003cac:	d505      	bpl.n	8003cba <_fwalk_sglue+0x22>
 8003cae:	6824      	ldr	r4, [r4, #0]
 8003cb0:	2c00      	cmp	r4, #0
 8003cb2:	d1f7      	bne.n	8003ca4 <_fwalk_sglue+0xc>
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cba:	89ab      	ldrh	r3, [r5, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d907      	bls.n	8003cd0 <_fwalk_sglue+0x38>
 8003cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	d003      	beq.n	8003cd0 <_fwalk_sglue+0x38>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4638      	mov	r0, r7
 8003ccc:	47c0      	blx	r8
 8003cce:	4306      	orrs	r6, r0
 8003cd0:	3568      	adds	r5, #104	@ 0x68
 8003cd2:	e7e9      	b.n	8003ca8 <_fwalk_sglue+0x10>

08003cd4 <iprintf>:
 8003cd4:	b40f      	push	{r0, r1, r2, r3}
 8003cd6:	b507      	push	{r0, r1, r2, lr}
 8003cd8:	4906      	ldr	r1, [pc, #24]	@ (8003cf4 <iprintf+0x20>)
 8003cda:	ab04      	add	r3, sp, #16
 8003cdc:	6808      	ldr	r0, [r1, #0]
 8003cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce2:	6881      	ldr	r1, [r0, #8]
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	f000 fbd7 	bl	8004498 <_vfiprintf_r>
 8003cea:	b003      	add	sp, #12
 8003cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf0:	b004      	add	sp, #16
 8003cf2:	4770      	bx	lr
 8003cf4:	20000148 	.word	0x20000148

08003cf8 <_puts_r>:
 8003cf8:	6a03      	ldr	r3, [r0, #32]
 8003cfa:	b570      	push	{r4, r5, r6, lr}
 8003cfc:	6884      	ldr	r4, [r0, #8]
 8003cfe:	4605      	mov	r5, r0
 8003d00:	460e      	mov	r6, r1
 8003d02:	b90b      	cbnz	r3, 8003d08 <_puts_r+0x10>
 8003d04:	f7ff ffb0 	bl	8003c68 <__sinit>
 8003d08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d0a:	07db      	lsls	r3, r3, #31
 8003d0c:	d405      	bmi.n	8003d1a <_puts_r+0x22>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	0598      	lsls	r0, r3, #22
 8003d12:	d402      	bmi.n	8003d1a <_puts_r+0x22>
 8003d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d16:	f000 f9e2 	bl	80040de <__retarget_lock_acquire_recursive>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	0719      	lsls	r1, r3, #28
 8003d1e:	d502      	bpl.n	8003d26 <_puts_r+0x2e>
 8003d20:	6923      	ldr	r3, [r4, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d135      	bne.n	8003d92 <_puts_r+0x9a>
 8003d26:	4621      	mov	r1, r4
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f000 f8f9 	bl	8003f20 <__swsetup_r>
 8003d2e:	b380      	cbz	r0, 8003d92 <_puts_r+0x9a>
 8003d30:	f04f 35ff 	mov.w	r5, #4294967295
 8003d34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d36:	07da      	lsls	r2, r3, #31
 8003d38:	d405      	bmi.n	8003d46 <_puts_r+0x4e>
 8003d3a:	89a3      	ldrh	r3, [r4, #12]
 8003d3c:	059b      	lsls	r3, r3, #22
 8003d3e:	d402      	bmi.n	8003d46 <_puts_r+0x4e>
 8003d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d42:	f000 f9cd 	bl	80040e0 <__retarget_lock_release_recursive>
 8003d46:	4628      	mov	r0, r5
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da04      	bge.n	8003d58 <_puts_r+0x60>
 8003d4e:	69a2      	ldr	r2, [r4, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dc17      	bgt.n	8003d84 <_puts_r+0x8c>
 8003d54:	290a      	cmp	r1, #10
 8003d56:	d015      	beq.n	8003d84 <_puts_r+0x8c>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	6022      	str	r2, [r4, #0]
 8003d5e:	7019      	strb	r1, [r3, #0]
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d66:	3b01      	subs	r3, #1
 8003d68:	60a3      	str	r3, [r4, #8]
 8003d6a:	2900      	cmp	r1, #0
 8003d6c:	d1ed      	bne.n	8003d4a <_puts_r+0x52>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da11      	bge.n	8003d96 <_puts_r+0x9e>
 8003d72:	4622      	mov	r2, r4
 8003d74:	210a      	movs	r1, #10
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f893 	bl	8003ea2 <__swbuf_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d0d7      	beq.n	8003d30 <_puts_r+0x38>
 8003d80:	250a      	movs	r5, #10
 8003d82:	e7d7      	b.n	8003d34 <_puts_r+0x3c>
 8003d84:	4622      	mov	r2, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f88b 	bl	8003ea2 <__swbuf_r>
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d1e7      	bne.n	8003d60 <_puts_r+0x68>
 8003d90:	e7ce      	b.n	8003d30 <_puts_r+0x38>
 8003d92:	3e01      	subs	r6, #1
 8003d94:	e7e4      	b.n	8003d60 <_puts_r+0x68>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e7ee      	b.n	8003d80 <_puts_r+0x88>
	...

08003da4 <puts>:
 8003da4:	4b02      	ldr	r3, [pc, #8]	@ (8003db0 <puts+0xc>)
 8003da6:	4601      	mov	r1, r0
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	f7ff bfa5 	b.w	8003cf8 <_puts_r>
 8003dae:	bf00      	nop
 8003db0:	20000148 	.word	0x20000148

08003db4 <sniprintf>:
 8003db4:	b40c      	push	{r2, r3}
 8003db6:	b530      	push	{r4, r5, lr}
 8003db8:	4b17      	ldr	r3, [pc, #92]	@ (8003e18 <sniprintf+0x64>)
 8003dba:	1e0c      	subs	r4, r1, #0
 8003dbc:	681d      	ldr	r5, [r3, #0]
 8003dbe:	b09d      	sub	sp, #116	@ 0x74
 8003dc0:	da08      	bge.n	8003dd4 <sniprintf+0x20>
 8003dc2:	238b      	movs	r3, #139	@ 0x8b
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dca:	b01d      	add	sp, #116	@ 0x74
 8003dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dd0:	b002      	add	sp, #8
 8003dd2:	4770      	bx	lr
 8003dd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ddc:	bf14      	ite	ne
 8003dde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003de2:	4623      	moveq	r3, r4
 8003de4:	9304      	str	r3, [sp, #16]
 8003de6:	9307      	str	r3, [sp, #28]
 8003de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dec:	9002      	str	r0, [sp, #8]
 8003dee:	9006      	str	r0, [sp, #24]
 8003df0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003df4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003df6:	ab21      	add	r3, sp, #132	@ 0x84
 8003df8:	a902      	add	r1, sp, #8
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	f000 fa25 	bl	800424c <_svfiprintf_r>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	bfbc      	itt	lt
 8003e06:	238b      	movlt	r3, #139	@ 0x8b
 8003e08:	602b      	strlt	r3, [r5, #0]
 8003e0a:	2c00      	cmp	r4, #0
 8003e0c:	d0dd      	beq.n	8003dca <sniprintf+0x16>
 8003e0e:	9b02      	ldr	r3, [sp, #8]
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e7d9      	b.n	8003dca <sniprintf+0x16>
 8003e16:	bf00      	nop
 8003e18:	20000148 	.word	0x20000148

08003e1c <__sread>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	f000 f8fc 	bl	8004020 <_read_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	bfab      	itete	ge
 8003e2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e30:	181b      	addge	r3, r3, r0
 8003e32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e36:	bfac      	ite	ge
 8003e38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e3a:	81a3      	strhlt	r3, [r4, #12]
 8003e3c:	bd10      	pop	{r4, pc}

08003e3e <__swrite>:
 8003e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	461f      	mov	r7, r3
 8003e44:	898b      	ldrh	r3, [r1, #12]
 8003e46:	05db      	lsls	r3, r3, #23
 8003e48:	4605      	mov	r5, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	d505      	bpl.n	8003e5c <__swrite+0x1e>
 8003e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e54:	2302      	movs	r3, #2
 8003e56:	2200      	movs	r2, #0
 8003e58:	f000 f8d0 	bl	8003ffc <_lseek_r>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e72:	f000 b8f7 	b.w	8004064 <_write_r>

08003e76 <__sseek>:
 8003e76:	b510      	push	{r4, lr}
 8003e78:	460c      	mov	r4, r1
 8003e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7e:	f000 f8bd 	bl	8003ffc <_lseek_r>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	bf15      	itete	ne
 8003e88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e92:	81a3      	strheq	r3, [r4, #12]
 8003e94:	bf18      	it	ne
 8003e96:	81a3      	strhne	r3, [r4, #12]
 8003e98:	bd10      	pop	{r4, pc}

08003e9a <__sclose>:
 8003e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9e:	f000 b89d 	b.w	8003fdc <_close_r>

08003ea2 <__swbuf_r>:
 8003ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea4:	460e      	mov	r6, r1
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	b118      	cbz	r0, 8003eb4 <__swbuf_r+0x12>
 8003eac:	6a03      	ldr	r3, [r0, #32]
 8003eae:	b90b      	cbnz	r3, 8003eb4 <__swbuf_r+0x12>
 8003eb0:	f7ff feda 	bl	8003c68 <__sinit>
 8003eb4:	69a3      	ldr	r3, [r4, #24]
 8003eb6:	60a3      	str	r3, [r4, #8]
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	071a      	lsls	r2, r3, #28
 8003ebc:	d501      	bpl.n	8003ec2 <__swbuf_r+0x20>
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	b943      	cbnz	r3, 8003ed4 <__swbuf_r+0x32>
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f000 f82b 	bl	8003f20 <__swsetup_r>
 8003eca:	b118      	cbz	r0, 8003ed4 <__swbuf_r+0x32>
 8003ecc:	f04f 37ff 	mov.w	r7, #4294967295
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	6922      	ldr	r2, [r4, #16]
 8003ed8:	1a98      	subs	r0, r3, r2
 8003eda:	6963      	ldr	r3, [r4, #20]
 8003edc:	b2f6      	uxtb	r6, r6
 8003ede:	4283      	cmp	r3, r0
 8003ee0:	4637      	mov	r7, r6
 8003ee2:	dc05      	bgt.n	8003ef0 <__swbuf_r+0x4e>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 fe00 	bl	8004aec <_fflush_r>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d1ed      	bne.n	8003ecc <__swbuf_r+0x2a>
 8003ef0:	68a3      	ldr	r3, [r4, #8]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	6022      	str	r2, [r4, #0]
 8003efc:	701e      	strb	r6, [r3, #0]
 8003efe:	6962      	ldr	r2, [r4, #20]
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d004      	beq.n	8003f10 <__swbuf_r+0x6e>
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	07db      	lsls	r3, r3, #31
 8003f0a:	d5e1      	bpl.n	8003ed0 <__swbuf_r+0x2e>
 8003f0c:	2e0a      	cmp	r6, #10
 8003f0e:	d1df      	bne.n	8003ed0 <__swbuf_r+0x2e>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 fdea 	bl	8004aec <_fflush_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d0d9      	beq.n	8003ed0 <__swbuf_r+0x2e>
 8003f1c:	e7d6      	b.n	8003ecc <__swbuf_r+0x2a>
	...

08003f20 <__swsetup_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4b29      	ldr	r3, [pc, #164]	@ (8003fc8 <__swsetup_r+0xa8>)
 8003f24:	4605      	mov	r5, r0
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	460c      	mov	r4, r1
 8003f2a:	b118      	cbz	r0, 8003f34 <__swsetup_r+0x14>
 8003f2c:	6a03      	ldr	r3, [r0, #32]
 8003f2e:	b90b      	cbnz	r3, 8003f34 <__swsetup_r+0x14>
 8003f30:	f7ff fe9a 	bl	8003c68 <__sinit>
 8003f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f38:	0719      	lsls	r1, r3, #28
 8003f3a:	d422      	bmi.n	8003f82 <__swsetup_r+0x62>
 8003f3c:	06da      	lsls	r2, r3, #27
 8003f3e:	d407      	bmi.n	8003f50 <__swsetup_r+0x30>
 8003f40:	2209      	movs	r2, #9
 8003f42:	602a      	str	r2, [r5, #0]
 8003f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4e:	e033      	b.n	8003fb8 <__swsetup_r+0x98>
 8003f50:	0758      	lsls	r0, r3, #29
 8003f52:	d512      	bpl.n	8003f7a <__swsetup_r+0x5a>
 8003f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f56:	b141      	cbz	r1, 8003f6a <__swsetup_r+0x4a>
 8003f58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f5c:	4299      	cmp	r1, r3
 8003f5e:	d002      	beq.n	8003f66 <__swsetup_r+0x46>
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 f8cd 	bl	8004100 <_free_r>
 8003f66:	2300      	movs	r3, #0
 8003f68:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f6a:	89a3      	ldrh	r3, [r4, #12]
 8003f6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	2300      	movs	r3, #0
 8003f74:	6063      	str	r3, [r4, #4]
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	b94b      	cbnz	r3, 8003f9a <__swsetup_r+0x7a>
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f90:	d003      	beq.n	8003f9a <__swsetup_r+0x7a>
 8003f92:	4621      	mov	r1, r4
 8003f94:	4628      	mov	r0, r5
 8003f96:	f000 fdf7 	bl	8004b88 <__smakebuf_r>
 8003f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f9e:	f013 0201 	ands.w	r2, r3, #1
 8003fa2:	d00a      	beq.n	8003fba <__swsetup_r+0x9a>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	60a2      	str	r2, [r4, #8]
 8003fa8:	6962      	ldr	r2, [r4, #20]
 8003faa:	4252      	negs	r2, r2
 8003fac:	61a2      	str	r2, [r4, #24]
 8003fae:	6922      	ldr	r2, [r4, #16]
 8003fb0:	b942      	cbnz	r2, 8003fc4 <__swsetup_r+0xa4>
 8003fb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003fb6:	d1c5      	bne.n	8003f44 <__swsetup_r+0x24>
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	0799      	lsls	r1, r3, #30
 8003fbc:	bf58      	it	pl
 8003fbe:	6962      	ldrpl	r2, [r4, #20]
 8003fc0:	60a2      	str	r2, [r4, #8]
 8003fc2:	e7f4      	b.n	8003fae <__swsetup_r+0x8e>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e7f7      	b.n	8003fb8 <__swsetup_r+0x98>
 8003fc8:	20000148 	.word	0x20000148

08003fcc <memset>:
 8003fcc:	4402      	add	r2, r0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <memset+0xa>
 8003fd4:	4770      	bx	lr
 8003fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fda:	e7f9      	b.n	8003fd0 <memset+0x4>

08003fdc <_close_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4d06      	ldr	r5, [pc, #24]	@ (8003ff8 <_close_r+0x1c>)
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f7fd fc42 	bl	8001870 <_close>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_close_r+0x1a>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_close_r+0x1a>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000490 	.word	0x20000490

08003ffc <_lseek_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4d07      	ldr	r5, [pc, #28]	@ (800401c <_lseek_r+0x20>)
 8004000:	4604      	mov	r4, r0
 8004002:	4608      	mov	r0, r1
 8004004:	4611      	mov	r1, r2
 8004006:	2200      	movs	r2, #0
 8004008:	602a      	str	r2, [r5, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f7fd fc57 	bl	80018be <_lseek>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_lseek_r+0x1e>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_lseek_r+0x1e>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20000490 	.word	0x20000490

08004020 <_read_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4d07      	ldr	r5, [pc, #28]	@ (8004040 <_read_r+0x20>)
 8004024:	4604      	mov	r4, r0
 8004026:	4608      	mov	r0, r1
 8004028:	4611      	mov	r1, r2
 800402a:	2200      	movs	r2, #0
 800402c:	602a      	str	r2, [r5, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f7fd fbd4 	bl	80017dc <_read>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_read_r+0x1e>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_read_r+0x1e>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20000490 	.word	0x20000490

08004044 <_sbrk_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d06      	ldr	r5, [pc, #24]	@ (8004060 <_sbrk_r+0x1c>)
 8004048:	2300      	movs	r3, #0
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	f7fd fbe2 	bl	8001818 <_sbrk>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_sbrk_r+0x1a>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b103      	cbz	r3, 800405e <_sbrk_r+0x1a>
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	20000490 	.word	0x20000490

08004064 <_write_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d07      	ldr	r5, [pc, #28]	@ (8004084 <_write_r+0x20>)
 8004068:	4604      	mov	r4, r0
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	2200      	movs	r2, #0
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f7fc fff1 	bl	800105a <_write>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_write_r+0x1e>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_write_r+0x1e>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20000490 	.word	0x20000490

08004088 <__errno>:
 8004088:	4b01      	ldr	r3, [pc, #4]	@ (8004090 <__errno+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000148 	.word	0x20000148

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	@ (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	@ (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	@ (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	@ (80040d8 <__libc_init_array+0x44>)
 80040a8:	f000 fe1c 	bl	8004ce4 <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	0800505c 	.word	0x0800505c
 80040d0:	0800505c 	.word	0x0800505c
 80040d4:	0800505c 	.word	0x0800505c
 80040d8:	08005060 	.word	0x08005060

080040dc <__retarget_lock_init_recursive>:
 80040dc:	4770      	bx	lr

080040de <__retarget_lock_acquire_recursive>:
 80040de:	4770      	bx	lr

080040e0 <__retarget_lock_release_recursive>:
 80040e0:	4770      	bx	lr

080040e2 <memcpy>:
 80040e2:	440a      	add	r2, r1
 80040e4:	4291      	cmp	r1, r2
 80040e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80040ea:	d100      	bne.n	80040ee <memcpy+0xc>
 80040ec:	4770      	bx	lr
 80040ee:	b510      	push	{r4, lr}
 80040f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040f8:	4291      	cmp	r1, r2
 80040fa:	d1f9      	bne.n	80040f0 <memcpy+0xe>
 80040fc:	bd10      	pop	{r4, pc}
	...

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d041      	beq.n	800418c <_free_r+0x8c>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f7ff fd10 	bl	8003b38 <__malloc_lock>
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <_free_r+0x90>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	b933      	cbnz	r3, 800412c <_free_r+0x2c>
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	4628      	mov	r0, r5
 8004124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004128:	f7ff bd0c 	b.w	8003b44 <__malloc_unlock>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d908      	bls.n	8004142 <_free_r+0x42>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf01      	itttt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	e7ed      	b.n	800411e <_free_r+0x1e>
 8004142:	461a      	mov	r2, r3
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b10b      	cbz	r3, 800414c <_free_r+0x4c>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d9fa      	bls.n	8004142 <_free_r+0x42>
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	1850      	adds	r0, r2, r1
 8004150:	42a0      	cmp	r0, r4
 8004152:	d10b      	bne.n	800416c <_free_r+0x6c>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	4401      	add	r1, r0
 8004158:	1850      	adds	r0, r2, r1
 800415a:	4283      	cmp	r3, r0
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	d1e0      	bne.n	8004122 <_free_r+0x22>
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	6053      	str	r3, [r2, #4]
 8004166:	4408      	add	r0, r1
 8004168:	6010      	str	r0, [r2, #0]
 800416a:	e7da      	b.n	8004122 <_free_r+0x22>
 800416c:	d902      	bls.n	8004174 <_free_r+0x74>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d6      	b.n	8004122 <_free_r+0x22>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf04      	itt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	bf04      	itt	eq
 8004184:	1809      	addeq	r1, r1, r0
 8004186:	6021      	streq	r1, [r4, #0]
 8004188:	6054      	str	r4, [r2, #4]
 800418a:	e7ca      	b.n	8004122 <_free_r+0x22>
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	20000350 	.word	0x20000350

08004194 <__ssputs_r>:
 8004194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	688e      	ldr	r6, [r1, #8]
 800419a:	461f      	mov	r7, r3
 800419c:	42be      	cmp	r6, r7
 800419e:	680b      	ldr	r3, [r1, #0]
 80041a0:	4682      	mov	sl, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	4690      	mov	r8, r2
 80041a6:	d82d      	bhi.n	8004204 <__ssputs_r+0x70>
 80041a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041b0:	d026      	beq.n	8004200 <__ssputs_r+0x6c>
 80041b2:	6965      	ldr	r5, [r4, #20]
 80041b4:	6909      	ldr	r1, [r1, #16]
 80041b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ba:	eba3 0901 	sub.w	r9, r3, r1
 80041be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041c2:	1c7b      	adds	r3, r7, #1
 80041c4:	444b      	add	r3, r9
 80041c6:	106d      	asrs	r5, r5, #1
 80041c8:	429d      	cmp	r5, r3
 80041ca:	bf38      	it	cc
 80041cc:	461d      	movcc	r5, r3
 80041ce:	0553      	lsls	r3, r2, #21
 80041d0:	d527      	bpl.n	8004222 <__ssputs_r+0x8e>
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7ff fc30 	bl	8003a38 <_malloc_r>
 80041d8:	4606      	mov	r6, r0
 80041da:	b360      	cbz	r0, 8004236 <__ssputs_r+0xa2>
 80041dc:	6921      	ldr	r1, [r4, #16]
 80041de:	464a      	mov	r2, r9
 80041e0:	f7ff ff7f 	bl	80040e2 <memcpy>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ee:	81a3      	strh	r3, [r4, #12]
 80041f0:	6126      	str	r6, [r4, #16]
 80041f2:	6165      	str	r5, [r4, #20]
 80041f4:	444e      	add	r6, r9
 80041f6:	eba5 0509 	sub.w	r5, r5, r9
 80041fa:	6026      	str	r6, [r4, #0]
 80041fc:	60a5      	str	r5, [r4, #8]
 80041fe:	463e      	mov	r6, r7
 8004200:	42be      	cmp	r6, r7
 8004202:	d900      	bls.n	8004206 <__ssputs_r+0x72>
 8004204:	463e      	mov	r6, r7
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	4632      	mov	r2, r6
 800420a:	4641      	mov	r1, r8
 800420c:	f000 fcf8 	bl	8004c00 <memmove>
 8004210:	68a3      	ldr	r3, [r4, #8]
 8004212:	1b9b      	subs	r3, r3, r6
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	4433      	add	r3, r6
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	2000      	movs	r0, #0
 800421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004222:	462a      	mov	r2, r5
 8004224:	f000 fd28 	bl	8004c78 <_realloc_r>
 8004228:	4606      	mov	r6, r0
 800422a:	2800      	cmp	r0, #0
 800422c:	d1e0      	bne.n	80041f0 <__ssputs_r+0x5c>
 800422e:	6921      	ldr	r1, [r4, #16]
 8004230:	4650      	mov	r0, sl
 8004232:	f7ff ff65 	bl	8004100 <_free_r>
 8004236:	230c      	movs	r3, #12
 8004238:	f8ca 3000 	str.w	r3, [sl]
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	e7e9      	b.n	800421e <__ssputs_r+0x8a>
	...

0800424c <_svfiprintf_r>:
 800424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004250:	4698      	mov	r8, r3
 8004252:	898b      	ldrh	r3, [r1, #12]
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	b09d      	sub	sp, #116	@ 0x74
 8004258:	4607      	mov	r7, r0
 800425a:	460d      	mov	r5, r1
 800425c:	4614      	mov	r4, r2
 800425e:	d510      	bpl.n	8004282 <_svfiprintf_r+0x36>
 8004260:	690b      	ldr	r3, [r1, #16]
 8004262:	b973      	cbnz	r3, 8004282 <_svfiprintf_r+0x36>
 8004264:	2140      	movs	r1, #64	@ 0x40
 8004266:	f7ff fbe7 	bl	8003a38 <_malloc_r>
 800426a:	6028      	str	r0, [r5, #0]
 800426c:	6128      	str	r0, [r5, #16]
 800426e:	b930      	cbnz	r0, 800427e <_svfiprintf_r+0x32>
 8004270:	230c      	movs	r3, #12
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	b01d      	add	sp, #116	@ 0x74
 800427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427e:	2340      	movs	r3, #64	@ 0x40
 8004280:	616b      	str	r3, [r5, #20]
 8004282:	2300      	movs	r3, #0
 8004284:	9309      	str	r3, [sp, #36]	@ 0x24
 8004286:	2320      	movs	r3, #32
 8004288:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800428c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004290:	2330      	movs	r3, #48	@ 0x30
 8004292:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004430 <_svfiprintf_r+0x1e4>
 8004296:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	4623      	mov	r3, r4
 80042a0:	469a      	mov	sl, r3
 80042a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a6:	b10a      	cbz	r2, 80042ac <_svfiprintf_r+0x60>
 80042a8:	2a25      	cmp	r2, #37	@ 0x25
 80042aa:	d1f9      	bne.n	80042a0 <_svfiprintf_r+0x54>
 80042ac:	ebba 0b04 	subs.w	fp, sl, r4
 80042b0:	d00b      	beq.n	80042ca <_svfiprintf_r+0x7e>
 80042b2:	465b      	mov	r3, fp
 80042b4:	4622      	mov	r2, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff ff6b 	bl	8004194 <__ssputs_r>
 80042be:	3001      	adds	r0, #1
 80042c0:	f000 80a7 	beq.w	8004412 <_svfiprintf_r+0x1c6>
 80042c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042c6:	445a      	add	r2, fp
 80042c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80042ca:	f89a 3000 	ldrb.w	r3, [sl]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 809f 	beq.w	8004412 <_svfiprintf_r+0x1c6>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042de:	f10a 0a01 	add.w	sl, sl, #1
 80042e2:	9304      	str	r3, [sp, #16]
 80042e4:	9307      	str	r3, [sp, #28]
 80042e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80042ec:	4654      	mov	r4, sl
 80042ee:	2205      	movs	r2, #5
 80042f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f4:	484e      	ldr	r0, [pc, #312]	@ (8004430 <_svfiprintf_r+0x1e4>)
 80042f6:	f7fb ff73 	bl	80001e0 <memchr>
 80042fa:	9a04      	ldr	r2, [sp, #16]
 80042fc:	b9d8      	cbnz	r0, 8004336 <_svfiprintf_r+0xea>
 80042fe:	06d0      	lsls	r0, r2, #27
 8004300:	bf44      	itt	mi
 8004302:	2320      	movmi	r3, #32
 8004304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004308:	0711      	lsls	r1, r2, #28
 800430a:	bf44      	itt	mi
 800430c:	232b      	movmi	r3, #43	@ 0x2b
 800430e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004312:	f89a 3000 	ldrb.w	r3, [sl]
 8004316:	2b2a      	cmp	r3, #42	@ 0x2a
 8004318:	d015      	beq.n	8004346 <_svfiprintf_r+0xfa>
 800431a:	9a07      	ldr	r2, [sp, #28]
 800431c:	4654      	mov	r4, sl
 800431e:	2000      	movs	r0, #0
 8004320:	f04f 0c0a 	mov.w	ip, #10
 8004324:	4621      	mov	r1, r4
 8004326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800432a:	3b30      	subs	r3, #48	@ 0x30
 800432c:	2b09      	cmp	r3, #9
 800432e:	d94b      	bls.n	80043c8 <_svfiprintf_r+0x17c>
 8004330:	b1b0      	cbz	r0, 8004360 <_svfiprintf_r+0x114>
 8004332:	9207      	str	r2, [sp, #28]
 8004334:	e014      	b.n	8004360 <_svfiprintf_r+0x114>
 8004336:	eba0 0308 	sub.w	r3, r0, r8
 800433a:	fa09 f303 	lsl.w	r3, r9, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	46a2      	mov	sl, r4
 8004344:	e7d2      	b.n	80042ec <_svfiprintf_r+0xa0>
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	9103      	str	r1, [sp, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfbb      	ittet	lt
 8004352:	425b      	neglt	r3, r3
 8004354:	f042 0202 	orrlt.w	r2, r2, #2
 8004358:	9307      	strge	r3, [sp, #28]
 800435a:	9307      	strlt	r3, [sp, #28]
 800435c:	bfb8      	it	lt
 800435e:	9204      	strlt	r2, [sp, #16]
 8004360:	7823      	ldrb	r3, [r4, #0]
 8004362:	2b2e      	cmp	r3, #46	@ 0x2e
 8004364:	d10a      	bne.n	800437c <_svfiprintf_r+0x130>
 8004366:	7863      	ldrb	r3, [r4, #1]
 8004368:	2b2a      	cmp	r3, #42	@ 0x2a
 800436a:	d132      	bne.n	80043d2 <_svfiprintf_r+0x186>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	9203      	str	r2, [sp, #12]
 8004374:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004378:	3402      	adds	r4, #2
 800437a:	9305      	str	r3, [sp, #20]
 800437c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004440 <_svfiprintf_r+0x1f4>
 8004380:	7821      	ldrb	r1, [r4, #0]
 8004382:	2203      	movs	r2, #3
 8004384:	4650      	mov	r0, sl
 8004386:	f7fb ff2b 	bl	80001e0 <memchr>
 800438a:	b138      	cbz	r0, 800439c <_svfiprintf_r+0x150>
 800438c:	9b04      	ldr	r3, [sp, #16]
 800438e:	eba0 000a 	sub.w	r0, r0, sl
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	4082      	lsls	r2, r0
 8004396:	4313      	orrs	r3, r2
 8004398:	3401      	adds	r4, #1
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a0:	4824      	ldr	r0, [pc, #144]	@ (8004434 <_svfiprintf_r+0x1e8>)
 80043a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043a6:	2206      	movs	r2, #6
 80043a8:	f7fb ff1a 	bl	80001e0 <memchr>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d036      	beq.n	800441e <_svfiprintf_r+0x1d2>
 80043b0:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <_svfiprintf_r+0x1ec>)
 80043b2:	bb1b      	cbnz	r3, 80043fc <_svfiprintf_r+0x1b0>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	3307      	adds	r3, #7
 80043b8:	f023 0307 	bic.w	r3, r3, #7
 80043bc:	3308      	adds	r3, #8
 80043be:	9303      	str	r3, [sp, #12]
 80043c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043c2:	4433      	add	r3, r6
 80043c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043c6:	e76a      	b.n	800429e <_svfiprintf_r+0x52>
 80043c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043cc:	460c      	mov	r4, r1
 80043ce:	2001      	movs	r0, #1
 80043d0:	e7a8      	b.n	8004324 <_svfiprintf_r+0xd8>
 80043d2:	2300      	movs	r3, #0
 80043d4:	3401      	adds	r4, #1
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	4619      	mov	r1, r3
 80043da:	f04f 0c0a 	mov.w	ip, #10
 80043de:	4620      	mov	r0, r4
 80043e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043e4:	3a30      	subs	r2, #48	@ 0x30
 80043e6:	2a09      	cmp	r2, #9
 80043e8:	d903      	bls.n	80043f2 <_svfiprintf_r+0x1a6>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0c6      	beq.n	800437c <_svfiprintf_r+0x130>
 80043ee:	9105      	str	r1, [sp, #20]
 80043f0:	e7c4      	b.n	800437c <_svfiprintf_r+0x130>
 80043f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80043f6:	4604      	mov	r4, r0
 80043f8:	2301      	movs	r3, #1
 80043fa:	e7f0      	b.n	80043de <_svfiprintf_r+0x192>
 80043fc:	ab03      	add	r3, sp, #12
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	462a      	mov	r2, r5
 8004402:	4b0e      	ldr	r3, [pc, #56]	@ (800443c <_svfiprintf_r+0x1f0>)
 8004404:	a904      	add	r1, sp, #16
 8004406:	4638      	mov	r0, r7
 8004408:	f3af 8000 	nop.w
 800440c:	1c42      	adds	r2, r0, #1
 800440e:	4606      	mov	r6, r0
 8004410:	d1d6      	bne.n	80043c0 <_svfiprintf_r+0x174>
 8004412:	89ab      	ldrh	r3, [r5, #12]
 8004414:	065b      	lsls	r3, r3, #25
 8004416:	f53f af2d 	bmi.w	8004274 <_svfiprintf_r+0x28>
 800441a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800441c:	e72c      	b.n	8004278 <_svfiprintf_r+0x2c>
 800441e:	ab03      	add	r3, sp, #12
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	462a      	mov	r2, r5
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <_svfiprintf_r+0x1f0>)
 8004426:	a904      	add	r1, sp, #16
 8004428:	4638      	mov	r0, r7
 800442a:	f000 f9bb 	bl	80047a4 <_printf_i>
 800442e:	e7ed      	b.n	800440c <_svfiprintf_r+0x1c0>
 8004430:	08005020 	.word	0x08005020
 8004434:	0800502a 	.word	0x0800502a
 8004438:	00000000 	.word	0x00000000
 800443c:	08004195 	.word	0x08004195
 8004440:	08005026 	.word	0x08005026

08004444 <__sfputc_r>:
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	3b01      	subs	r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	b410      	push	{r4}
 800444c:	6093      	str	r3, [r2, #8]
 800444e:	da08      	bge.n	8004462 <__sfputc_r+0x1e>
 8004450:	6994      	ldr	r4, [r2, #24]
 8004452:	42a3      	cmp	r3, r4
 8004454:	db01      	blt.n	800445a <__sfputc_r+0x16>
 8004456:	290a      	cmp	r1, #10
 8004458:	d103      	bne.n	8004462 <__sfputc_r+0x1e>
 800445a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445e:	f7ff bd20 	b.w	8003ea2 <__swbuf_r>
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	1c58      	adds	r0, r3, #1
 8004466:	6010      	str	r0, [r2, #0]
 8004468:	7019      	strb	r1, [r3, #0]
 800446a:	4608      	mov	r0, r1
 800446c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004470:	4770      	bx	lr

08004472 <__sfputs_r>:
 8004472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	4614      	mov	r4, r2
 800447a:	18d5      	adds	r5, r2, r3
 800447c:	42ac      	cmp	r4, r5
 800447e:	d101      	bne.n	8004484 <__sfputs_r+0x12>
 8004480:	2000      	movs	r0, #0
 8004482:	e007      	b.n	8004494 <__sfputs_r+0x22>
 8004484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004488:	463a      	mov	r2, r7
 800448a:	4630      	mov	r0, r6
 800448c:	f7ff ffda 	bl	8004444 <__sfputc_r>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d1f3      	bne.n	800447c <__sfputs_r+0xa>
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004498 <_vfiprintf_r>:
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	460d      	mov	r5, r1
 800449e:	b09d      	sub	sp, #116	@ 0x74
 80044a0:	4614      	mov	r4, r2
 80044a2:	4698      	mov	r8, r3
 80044a4:	4606      	mov	r6, r0
 80044a6:	b118      	cbz	r0, 80044b0 <_vfiprintf_r+0x18>
 80044a8:	6a03      	ldr	r3, [r0, #32]
 80044aa:	b90b      	cbnz	r3, 80044b0 <_vfiprintf_r+0x18>
 80044ac:	f7ff fbdc 	bl	8003c68 <__sinit>
 80044b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044b2:	07d9      	lsls	r1, r3, #31
 80044b4:	d405      	bmi.n	80044c2 <_vfiprintf_r+0x2a>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	059a      	lsls	r2, r3, #22
 80044ba:	d402      	bmi.n	80044c2 <_vfiprintf_r+0x2a>
 80044bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044be:	f7ff fe0e 	bl	80040de <__retarget_lock_acquire_recursive>
 80044c2:	89ab      	ldrh	r3, [r5, #12]
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	d501      	bpl.n	80044cc <_vfiprintf_r+0x34>
 80044c8:	692b      	ldr	r3, [r5, #16]
 80044ca:	b99b      	cbnz	r3, 80044f4 <_vfiprintf_r+0x5c>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff fd26 	bl	8003f20 <__swsetup_r>
 80044d4:	b170      	cbz	r0, 80044f4 <_vfiprintf_r+0x5c>
 80044d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044d8:	07dc      	lsls	r4, r3, #31
 80044da:	d504      	bpl.n	80044e6 <_vfiprintf_r+0x4e>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	b01d      	add	sp, #116	@ 0x74
 80044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	0598      	lsls	r0, r3, #22
 80044ea:	d4f7      	bmi.n	80044dc <_vfiprintf_r+0x44>
 80044ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ee:	f7ff fdf7 	bl	80040e0 <__retarget_lock_release_recursive>
 80044f2:	e7f3      	b.n	80044dc <_vfiprintf_r+0x44>
 80044f4:	2300      	movs	r3, #0
 80044f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044f8:	2320      	movs	r3, #32
 80044fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004502:	2330      	movs	r3, #48	@ 0x30
 8004504:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046b4 <_vfiprintf_r+0x21c>
 8004508:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800450c:	f04f 0901 	mov.w	r9, #1
 8004510:	4623      	mov	r3, r4
 8004512:	469a      	mov	sl, r3
 8004514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004518:	b10a      	cbz	r2, 800451e <_vfiprintf_r+0x86>
 800451a:	2a25      	cmp	r2, #37	@ 0x25
 800451c:	d1f9      	bne.n	8004512 <_vfiprintf_r+0x7a>
 800451e:	ebba 0b04 	subs.w	fp, sl, r4
 8004522:	d00b      	beq.n	800453c <_vfiprintf_r+0xa4>
 8004524:	465b      	mov	r3, fp
 8004526:	4622      	mov	r2, r4
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff ffa1 	bl	8004472 <__sfputs_r>
 8004530:	3001      	adds	r0, #1
 8004532:	f000 80a7 	beq.w	8004684 <_vfiprintf_r+0x1ec>
 8004536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004538:	445a      	add	r2, fp
 800453a:	9209      	str	r2, [sp, #36]	@ 0x24
 800453c:	f89a 3000 	ldrb.w	r3, [sl]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 809f 	beq.w	8004684 <_vfiprintf_r+0x1ec>
 8004546:	2300      	movs	r3, #0
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004550:	f10a 0a01 	add.w	sl, sl, #1
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	9307      	str	r3, [sp, #28]
 8004558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800455c:	931a      	str	r3, [sp, #104]	@ 0x68
 800455e:	4654      	mov	r4, sl
 8004560:	2205      	movs	r2, #5
 8004562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004566:	4853      	ldr	r0, [pc, #332]	@ (80046b4 <_vfiprintf_r+0x21c>)
 8004568:	f7fb fe3a 	bl	80001e0 <memchr>
 800456c:	9a04      	ldr	r2, [sp, #16]
 800456e:	b9d8      	cbnz	r0, 80045a8 <_vfiprintf_r+0x110>
 8004570:	06d1      	lsls	r1, r2, #27
 8004572:	bf44      	itt	mi
 8004574:	2320      	movmi	r3, #32
 8004576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800457a:	0713      	lsls	r3, r2, #28
 800457c:	bf44      	itt	mi
 800457e:	232b      	movmi	r3, #43	@ 0x2b
 8004580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004584:	f89a 3000 	ldrb.w	r3, [sl]
 8004588:	2b2a      	cmp	r3, #42	@ 0x2a
 800458a:	d015      	beq.n	80045b8 <_vfiprintf_r+0x120>
 800458c:	9a07      	ldr	r2, [sp, #28]
 800458e:	4654      	mov	r4, sl
 8004590:	2000      	movs	r0, #0
 8004592:	f04f 0c0a 	mov.w	ip, #10
 8004596:	4621      	mov	r1, r4
 8004598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459c:	3b30      	subs	r3, #48	@ 0x30
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d94b      	bls.n	800463a <_vfiprintf_r+0x1a2>
 80045a2:	b1b0      	cbz	r0, 80045d2 <_vfiprintf_r+0x13a>
 80045a4:	9207      	str	r2, [sp, #28]
 80045a6:	e014      	b.n	80045d2 <_vfiprintf_r+0x13a>
 80045a8:	eba0 0308 	sub.w	r3, r0, r8
 80045ac:	fa09 f303 	lsl.w	r3, r9, r3
 80045b0:	4313      	orrs	r3, r2
 80045b2:	9304      	str	r3, [sp, #16]
 80045b4:	46a2      	mov	sl, r4
 80045b6:	e7d2      	b.n	800455e <_vfiprintf_r+0xc6>
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	1d19      	adds	r1, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	9103      	str	r1, [sp, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bfbb      	ittet	lt
 80045c4:	425b      	neglt	r3, r3
 80045c6:	f042 0202 	orrlt.w	r2, r2, #2
 80045ca:	9307      	strge	r3, [sp, #28]
 80045cc:	9307      	strlt	r3, [sp, #28]
 80045ce:	bfb8      	it	lt
 80045d0:	9204      	strlt	r2, [sp, #16]
 80045d2:	7823      	ldrb	r3, [r4, #0]
 80045d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80045d6:	d10a      	bne.n	80045ee <_vfiprintf_r+0x156>
 80045d8:	7863      	ldrb	r3, [r4, #1]
 80045da:	2b2a      	cmp	r3, #42	@ 0x2a
 80045dc:	d132      	bne.n	8004644 <_vfiprintf_r+0x1ac>
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9203      	str	r2, [sp, #12]
 80045e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045ea:	3402      	adds	r4, #2
 80045ec:	9305      	str	r3, [sp, #20]
 80045ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046c4 <_vfiprintf_r+0x22c>
 80045f2:	7821      	ldrb	r1, [r4, #0]
 80045f4:	2203      	movs	r2, #3
 80045f6:	4650      	mov	r0, sl
 80045f8:	f7fb fdf2 	bl	80001e0 <memchr>
 80045fc:	b138      	cbz	r0, 800460e <_vfiprintf_r+0x176>
 80045fe:	9b04      	ldr	r3, [sp, #16]
 8004600:	eba0 000a 	sub.w	r0, r0, sl
 8004604:	2240      	movs	r2, #64	@ 0x40
 8004606:	4082      	lsls	r2, r0
 8004608:	4313      	orrs	r3, r2
 800460a:	3401      	adds	r4, #1
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004612:	4829      	ldr	r0, [pc, #164]	@ (80046b8 <_vfiprintf_r+0x220>)
 8004614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004618:	2206      	movs	r2, #6
 800461a:	f7fb fde1 	bl	80001e0 <memchr>
 800461e:	2800      	cmp	r0, #0
 8004620:	d03f      	beq.n	80046a2 <_vfiprintf_r+0x20a>
 8004622:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <_vfiprintf_r+0x224>)
 8004624:	bb1b      	cbnz	r3, 800466e <_vfiprintf_r+0x1d6>
 8004626:	9b03      	ldr	r3, [sp, #12]
 8004628:	3307      	adds	r3, #7
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	3308      	adds	r3, #8
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004634:	443b      	add	r3, r7
 8004636:	9309      	str	r3, [sp, #36]	@ 0x24
 8004638:	e76a      	b.n	8004510 <_vfiprintf_r+0x78>
 800463a:	fb0c 3202 	mla	r2, ip, r2, r3
 800463e:	460c      	mov	r4, r1
 8004640:	2001      	movs	r0, #1
 8004642:	e7a8      	b.n	8004596 <_vfiprintf_r+0xfe>
 8004644:	2300      	movs	r3, #0
 8004646:	3401      	adds	r4, #1
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 0c0a 	mov.w	ip, #10
 8004650:	4620      	mov	r0, r4
 8004652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004656:	3a30      	subs	r2, #48	@ 0x30
 8004658:	2a09      	cmp	r2, #9
 800465a:	d903      	bls.n	8004664 <_vfiprintf_r+0x1cc>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0c6      	beq.n	80045ee <_vfiprintf_r+0x156>
 8004660:	9105      	str	r1, [sp, #20]
 8004662:	e7c4      	b.n	80045ee <_vfiprintf_r+0x156>
 8004664:	fb0c 2101 	mla	r1, ip, r1, r2
 8004668:	4604      	mov	r4, r0
 800466a:	2301      	movs	r3, #1
 800466c:	e7f0      	b.n	8004650 <_vfiprintf_r+0x1b8>
 800466e:	ab03      	add	r3, sp, #12
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	462a      	mov	r2, r5
 8004674:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <_vfiprintf_r+0x228>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	4630      	mov	r0, r6
 800467a:	f3af 8000 	nop.w
 800467e:	4607      	mov	r7, r0
 8004680:	1c78      	adds	r0, r7, #1
 8004682:	d1d6      	bne.n	8004632 <_vfiprintf_r+0x19a>
 8004684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004686:	07d9      	lsls	r1, r3, #31
 8004688:	d405      	bmi.n	8004696 <_vfiprintf_r+0x1fe>
 800468a:	89ab      	ldrh	r3, [r5, #12]
 800468c:	059a      	lsls	r2, r3, #22
 800468e:	d402      	bmi.n	8004696 <_vfiprintf_r+0x1fe>
 8004690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004692:	f7ff fd25 	bl	80040e0 <__retarget_lock_release_recursive>
 8004696:	89ab      	ldrh	r3, [r5, #12]
 8004698:	065b      	lsls	r3, r3, #25
 800469a:	f53f af1f 	bmi.w	80044dc <_vfiprintf_r+0x44>
 800469e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046a0:	e71e      	b.n	80044e0 <_vfiprintf_r+0x48>
 80046a2:	ab03      	add	r3, sp, #12
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	462a      	mov	r2, r5
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <_vfiprintf_r+0x228>)
 80046aa:	a904      	add	r1, sp, #16
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f879 	bl	80047a4 <_printf_i>
 80046b2:	e7e4      	b.n	800467e <_vfiprintf_r+0x1e6>
 80046b4:	08005020 	.word	0x08005020
 80046b8:	0800502a 	.word	0x0800502a
 80046bc:	00000000 	.word	0x00000000
 80046c0:	08004473 	.word	0x08004473
 80046c4:	08005026 	.word	0x08005026

080046c8 <_printf_common>:
 80046c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	4616      	mov	r6, r2
 80046ce:	4698      	mov	r8, r3
 80046d0:	688a      	ldr	r2, [r1, #8]
 80046d2:	690b      	ldr	r3, [r1, #16]
 80046d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d8:	4293      	cmp	r3, r2
 80046da:	bfb8      	it	lt
 80046dc:	4613      	movlt	r3, r2
 80046de:	6033      	str	r3, [r6, #0]
 80046e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046e4:	4607      	mov	r7, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	b10a      	cbz	r2, 80046ee <_printf_common+0x26>
 80046ea:	3301      	adds	r3, #1
 80046ec:	6033      	str	r3, [r6, #0]
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	0699      	lsls	r1, r3, #26
 80046f2:	bf42      	ittt	mi
 80046f4:	6833      	ldrmi	r3, [r6, #0]
 80046f6:	3302      	addmi	r3, #2
 80046f8:	6033      	strmi	r3, [r6, #0]
 80046fa:	6825      	ldr	r5, [r4, #0]
 80046fc:	f015 0506 	ands.w	r5, r5, #6
 8004700:	d106      	bne.n	8004710 <_printf_common+0x48>
 8004702:	f104 0a19 	add.w	sl, r4, #25
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	6832      	ldr	r2, [r6, #0]
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	42ab      	cmp	r3, r5
 800470e:	dc26      	bgt.n	800475e <_printf_common+0x96>
 8004710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	3b00      	subs	r3, #0
 8004718:	bf18      	it	ne
 800471a:	2301      	movne	r3, #1
 800471c:	0692      	lsls	r2, r2, #26
 800471e:	d42b      	bmi.n	8004778 <_printf_common+0xb0>
 8004720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004724:	4641      	mov	r1, r8
 8004726:	4638      	mov	r0, r7
 8004728:	47c8      	blx	r9
 800472a:	3001      	adds	r0, #1
 800472c:	d01e      	beq.n	800476c <_printf_common+0xa4>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	6922      	ldr	r2, [r4, #16]
 8004732:	f003 0306 	and.w	r3, r3, #6
 8004736:	2b04      	cmp	r3, #4
 8004738:	bf02      	ittt	eq
 800473a:	68e5      	ldreq	r5, [r4, #12]
 800473c:	6833      	ldreq	r3, [r6, #0]
 800473e:	1aed      	subeq	r5, r5, r3
 8004740:	68a3      	ldr	r3, [r4, #8]
 8004742:	bf0c      	ite	eq
 8004744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004748:	2500      	movne	r5, #0
 800474a:	4293      	cmp	r3, r2
 800474c:	bfc4      	itt	gt
 800474e:	1a9b      	subgt	r3, r3, r2
 8004750:	18ed      	addgt	r5, r5, r3
 8004752:	2600      	movs	r6, #0
 8004754:	341a      	adds	r4, #26
 8004756:	42b5      	cmp	r5, r6
 8004758:	d11a      	bne.n	8004790 <_printf_common+0xc8>
 800475a:	2000      	movs	r0, #0
 800475c:	e008      	b.n	8004770 <_printf_common+0xa8>
 800475e:	2301      	movs	r3, #1
 8004760:	4652      	mov	r2, sl
 8004762:	4641      	mov	r1, r8
 8004764:	4638      	mov	r0, r7
 8004766:	47c8      	blx	r9
 8004768:	3001      	adds	r0, #1
 800476a:	d103      	bne.n	8004774 <_printf_common+0xac>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004774:	3501      	adds	r5, #1
 8004776:	e7c6      	b.n	8004706 <_printf_common+0x3e>
 8004778:	18e1      	adds	r1, r4, r3
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	2030      	movs	r0, #48	@ 0x30
 800477e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004782:	4422      	add	r2, r4
 8004784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800478c:	3302      	adds	r3, #2
 800478e:	e7c7      	b.n	8004720 <_printf_common+0x58>
 8004790:	2301      	movs	r3, #1
 8004792:	4622      	mov	r2, r4
 8004794:	4641      	mov	r1, r8
 8004796:	4638      	mov	r0, r7
 8004798:	47c8      	blx	r9
 800479a:	3001      	adds	r0, #1
 800479c:	d0e6      	beq.n	800476c <_printf_common+0xa4>
 800479e:	3601      	adds	r6, #1
 80047a0:	e7d9      	b.n	8004756 <_printf_common+0x8e>
	...

080047a4 <_printf_i>:
 80047a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	7e0f      	ldrb	r7, [r1, #24]
 80047aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047ac:	2f78      	cmp	r7, #120	@ 0x78
 80047ae:	4691      	mov	r9, r2
 80047b0:	4680      	mov	r8, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	469a      	mov	sl, r3
 80047b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ba:	d807      	bhi.n	80047cc <_printf_i+0x28>
 80047bc:	2f62      	cmp	r7, #98	@ 0x62
 80047be:	d80a      	bhi.n	80047d6 <_printf_i+0x32>
 80047c0:	2f00      	cmp	r7, #0
 80047c2:	f000 80d2 	beq.w	800496a <_printf_i+0x1c6>
 80047c6:	2f58      	cmp	r7, #88	@ 0x58
 80047c8:	f000 80b9 	beq.w	800493e <_printf_i+0x19a>
 80047cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047d4:	e03a      	b.n	800484c <_printf_i+0xa8>
 80047d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047da:	2b15      	cmp	r3, #21
 80047dc:	d8f6      	bhi.n	80047cc <_printf_i+0x28>
 80047de:	a101      	add	r1, pc, #4	@ (adr r1, 80047e4 <_printf_i+0x40>)
 80047e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	08004851 	.word	0x08004851
 80047ec:	080047cd 	.word	0x080047cd
 80047f0:	080047cd 	.word	0x080047cd
 80047f4:	080047cd 	.word	0x080047cd
 80047f8:	080047cd 	.word	0x080047cd
 80047fc:	08004851 	.word	0x08004851
 8004800:	080047cd 	.word	0x080047cd
 8004804:	080047cd 	.word	0x080047cd
 8004808:	080047cd 	.word	0x080047cd
 800480c:	080047cd 	.word	0x080047cd
 8004810:	08004951 	.word	0x08004951
 8004814:	0800487b 	.word	0x0800487b
 8004818:	0800490b 	.word	0x0800490b
 800481c:	080047cd 	.word	0x080047cd
 8004820:	080047cd 	.word	0x080047cd
 8004824:	08004973 	.word	0x08004973
 8004828:	080047cd 	.word	0x080047cd
 800482c:	0800487b 	.word	0x0800487b
 8004830:	080047cd 	.word	0x080047cd
 8004834:	080047cd 	.word	0x080047cd
 8004838:	08004913 	.word	0x08004913
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	1d1a      	adds	r2, r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6032      	str	r2, [r6, #0]
 8004844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800484c:	2301      	movs	r3, #1
 800484e:	e09d      	b.n	800498c <_printf_i+0x1e8>
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	6820      	ldr	r0, [r4, #0]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	6031      	str	r1, [r6, #0]
 8004858:	0606      	lsls	r6, r0, #24
 800485a:	d501      	bpl.n	8004860 <_printf_i+0xbc>
 800485c:	681d      	ldr	r5, [r3, #0]
 800485e:	e003      	b.n	8004868 <_printf_i+0xc4>
 8004860:	0645      	lsls	r5, r0, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0xb8>
 8004864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004868:	2d00      	cmp	r5, #0
 800486a:	da03      	bge.n	8004874 <_printf_i+0xd0>
 800486c:	232d      	movs	r3, #45	@ 0x2d
 800486e:	426d      	negs	r5, r5
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004874:	4859      	ldr	r0, [pc, #356]	@ (80049dc <_printf_i+0x238>)
 8004876:	230a      	movs	r3, #10
 8004878:	e011      	b.n	800489e <_printf_i+0xfa>
 800487a:	6821      	ldr	r1, [r4, #0]
 800487c:	6833      	ldr	r3, [r6, #0]
 800487e:	0608      	lsls	r0, r1, #24
 8004880:	f853 5b04 	ldr.w	r5, [r3], #4
 8004884:	d402      	bmi.n	800488c <_printf_i+0xe8>
 8004886:	0649      	lsls	r1, r1, #25
 8004888:	bf48      	it	mi
 800488a:	b2ad      	uxthmi	r5, r5
 800488c:	2f6f      	cmp	r7, #111	@ 0x6f
 800488e:	4853      	ldr	r0, [pc, #332]	@ (80049dc <_printf_i+0x238>)
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	bf14      	ite	ne
 8004894:	230a      	movne	r3, #10
 8004896:	2308      	moveq	r3, #8
 8004898:	2100      	movs	r1, #0
 800489a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800489e:	6866      	ldr	r6, [r4, #4]
 80048a0:	60a6      	str	r6, [r4, #8]
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	bfa2      	ittt	ge
 80048a6:	6821      	ldrge	r1, [r4, #0]
 80048a8:	f021 0104 	bicge.w	r1, r1, #4
 80048ac:	6021      	strge	r1, [r4, #0]
 80048ae:	b90d      	cbnz	r5, 80048b4 <_printf_i+0x110>
 80048b0:	2e00      	cmp	r6, #0
 80048b2:	d04b      	beq.n	800494c <_printf_i+0x1a8>
 80048b4:	4616      	mov	r6, r2
 80048b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ba:	fb03 5711 	mls	r7, r3, r1, r5
 80048be:	5dc7      	ldrb	r7, [r0, r7]
 80048c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048c4:	462f      	mov	r7, r5
 80048c6:	42bb      	cmp	r3, r7
 80048c8:	460d      	mov	r5, r1
 80048ca:	d9f4      	bls.n	80048b6 <_printf_i+0x112>
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d10b      	bne.n	80048e8 <_printf_i+0x144>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	07df      	lsls	r7, r3, #31
 80048d4:	d508      	bpl.n	80048e8 <_printf_i+0x144>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	6861      	ldr	r1, [r4, #4]
 80048da:	4299      	cmp	r1, r3
 80048dc:	bfde      	ittt	le
 80048de:	2330      	movle	r3, #48	@ 0x30
 80048e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048e8:	1b92      	subs	r2, r2, r6
 80048ea:	6122      	str	r2, [r4, #16]
 80048ec:	f8cd a000 	str.w	sl, [sp]
 80048f0:	464b      	mov	r3, r9
 80048f2:	aa03      	add	r2, sp, #12
 80048f4:	4621      	mov	r1, r4
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7ff fee6 	bl	80046c8 <_printf_common>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d14a      	bne.n	8004996 <_printf_i+0x1f2>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	b004      	add	sp, #16
 8004906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f043 0320 	orr.w	r3, r3, #32
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	4833      	ldr	r0, [pc, #204]	@ (80049e0 <_printf_i+0x23c>)
 8004914:	2778      	movs	r7, #120	@ 0x78
 8004916:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	6831      	ldr	r1, [r6, #0]
 800491e:	061f      	lsls	r7, r3, #24
 8004920:	f851 5b04 	ldr.w	r5, [r1], #4
 8004924:	d402      	bmi.n	800492c <_printf_i+0x188>
 8004926:	065f      	lsls	r7, r3, #25
 8004928:	bf48      	it	mi
 800492a:	b2ad      	uxthmi	r5, r5
 800492c:	6031      	str	r1, [r6, #0]
 800492e:	07d9      	lsls	r1, r3, #31
 8004930:	bf44      	itt	mi
 8004932:	f043 0320 	orrmi.w	r3, r3, #32
 8004936:	6023      	strmi	r3, [r4, #0]
 8004938:	b11d      	cbz	r5, 8004942 <_printf_i+0x19e>
 800493a:	2310      	movs	r3, #16
 800493c:	e7ac      	b.n	8004898 <_printf_i+0xf4>
 800493e:	4827      	ldr	r0, [pc, #156]	@ (80049dc <_printf_i+0x238>)
 8004940:	e7e9      	b.n	8004916 <_printf_i+0x172>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f023 0320 	bic.w	r3, r3, #32
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	e7f6      	b.n	800493a <_printf_i+0x196>
 800494c:	4616      	mov	r6, r2
 800494e:	e7bd      	b.n	80048cc <_printf_i+0x128>
 8004950:	6833      	ldr	r3, [r6, #0]
 8004952:	6825      	ldr	r5, [r4, #0]
 8004954:	6961      	ldr	r1, [r4, #20]
 8004956:	1d18      	adds	r0, r3, #4
 8004958:	6030      	str	r0, [r6, #0]
 800495a:	062e      	lsls	r6, r5, #24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	d501      	bpl.n	8004964 <_printf_i+0x1c0>
 8004960:	6019      	str	r1, [r3, #0]
 8004962:	e002      	b.n	800496a <_printf_i+0x1c6>
 8004964:	0668      	lsls	r0, r5, #25
 8004966:	d5fb      	bpl.n	8004960 <_printf_i+0x1bc>
 8004968:	8019      	strh	r1, [r3, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	4616      	mov	r6, r2
 8004970:	e7bc      	b.n	80048ec <_printf_i+0x148>
 8004972:	6833      	ldr	r3, [r6, #0]
 8004974:	1d1a      	adds	r2, r3, #4
 8004976:	6032      	str	r2, [r6, #0]
 8004978:	681e      	ldr	r6, [r3, #0]
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	2100      	movs	r1, #0
 800497e:	4630      	mov	r0, r6
 8004980:	f7fb fc2e 	bl	80001e0 <memchr>
 8004984:	b108      	cbz	r0, 800498a <_printf_i+0x1e6>
 8004986:	1b80      	subs	r0, r0, r6
 8004988:	6060      	str	r0, [r4, #4]
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	2300      	movs	r3, #0
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004994:	e7aa      	b.n	80048ec <_printf_i+0x148>
 8004996:	6923      	ldr	r3, [r4, #16]
 8004998:	4632      	mov	r2, r6
 800499a:	4649      	mov	r1, r9
 800499c:	4640      	mov	r0, r8
 800499e:	47d0      	blx	sl
 80049a0:	3001      	adds	r0, #1
 80049a2:	d0ad      	beq.n	8004900 <_printf_i+0x15c>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	079b      	lsls	r3, r3, #30
 80049a8:	d413      	bmi.n	80049d2 <_printf_i+0x22e>
 80049aa:	68e0      	ldr	r0, [r4, #12]
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	4298      	cmp	r0, r3
 80049b0:	bfb8      	it	lt
 80049b2:	4618      	movlt	r0, r3
 80049b4:	e7a6      	b.n	8004904 <_printf_i+0x160>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4632      	mov	r2, r6
 80049ba:	4649      	mov	r1, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	47d0      	blx	sl
 80049c0:	3001      	adds	r0, #1
 80049c2:	d09d      	beq.n	8004900 <_printf_i+0x15c>
 80049c4:	3501      	adds	r5, #1
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	9903      	ldr	r1, [sp, #12]
 80049ca:	1a5b      	subs	r3, r3, r1
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	dcf2      	bgt.n	80049b6 <_printf_i+0x212>
 80049d0:	e7eb      	b.n	80049aa <_printf_i+0x206>
 80049d2:	2500      	movs	r5, #0
 80049d4:	f104 0619 	add.w	r6, r4, #25
 80049d8:	e7f5      	b.n	80049c6 <_printf_i+0x222>
 80049da:	bf00      	nop
 80049dc:	08005031 	.word	0x08005031
 80049e0:	08005042 	.word	0x08005042

080049e4 <__sflush_r>:
 80049e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ec:	0716      	lsls	r6, r2, #28
 80049ee:	4605      	mov	r5, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	d454      	bmi.n	8004a9e <__sflush_r+0xba>
 80049f4:	684b      	ldr	r3, [r1, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc02      	bgt.n	8004a00 <__sflush_r+0x1c>
 80049fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dd48      	ble.n	8004a92 <__sflush_r+0xae>
 8004a00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d045      	beq.n	8004a92 <__sflush_r+0xae>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a0c:	682f      	ldr	r7, [r5, #0]
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	d030      	beq.n	8004a76 <__sflush_r+0x92>
 8004a14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	0759      	lsls	r1, r3, #29
 8004a1a:	d505      	bpl.n	8004a28 <__sflush_r+0x44>
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a22:	b10b      	cbz	r3, 8004a28 <__sflush_r+0x44>
 8004a24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a26:	1ad2      	subs	r2, r2, r3
 8004a28:	2300      	movs	r3, #0
 8004a2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b0      	blx	r6
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	d106      	bne.n	8004a46 <__sflush_r+0x62>
 8004a38:	6829      	ldr	r1, [r5, #0]
 8004a3a:	291d      	cmp	r1, #29
 8004a3c:	d82b      	bhi.n	8004a96 <__sflush_r+0xb2>
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae8 <__sflush_r+0x104>)
 8004a40:	410a      	asrs	r2, r1
 8004a42:	07d6      	lsls	r6, r2, #31
 8004a44:	d427      	bmi.n	8004a96 <__sflush_r+0xb2>
 8004a46:	2200      	movs	r2, #0
 8004a48:	6062      	str	r2, [r4, #4]
 8004a4a:	04d9      	lsls	r1, r3, #19
 8004a4c:	6922      	ldr	r2, [r4, #16]
 8004a4e:	6022      	str	r2, [r4, #0]
 8004a50:	d504      	bpl.n	8004a5c <__sflush_r+0x78>
 8004a52:	1c42      	adds	r2, r0, #1
 8004a54:	d101      	bne.n	8004a5a <__sflush_r+0x76>
 8004a56:	682b      	ldr	r3, [r5, #0]
 8004a58:	b903      	cbnz	r3, 8004a5c <__sflush_r+0x78>
 8004a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a5e:	602f      	str	r7, [r5, #0]
 8004a60:	b1b9      	cbz	r1, 8004a92 <__sflush_r+0xae>
 8004a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a66:	4299      	cmp	r1, r3
 8004a68:	d002      	beq.n	8004a70 <__sflush_r+0x8c>
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f7ff fb48 	bl	8004100 <_free_r>
 8004a70:	2300      	movs	r3, #0
 8004a72:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a74:	e00d      	b.n	8004a92 <__sflush_r+0xae>
 8004a76:	2301      	movs	r3, #1
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b0      	blx	r6
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	1c50      	adds	r0, r2, #1
 8004a80:	d1c9      	bne.n	8004a16 <__sflush_r+0x32>
 8004a82:	682b      	ldr	r3, [r5, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0c6      	beq.n	8004a16 <__sflush_r+0x32>
 8004a88:	2b1d      	cmp	r3, #29
 8004a8a:	d001      	beq.n	8004a90 <__sflush_r+0xac>
 8004a8c:	2b16      	cmp	r3, #22
 8004a8e:	d11e      	bne.n	8004ace <__sflush_r+0xea>
 8004a90:	602f      	str	r7, [r5, #0]
 8004a92:	2000      	movs	r0, #0
 8004a94:	e022      	b.n	8004adc <__sflush_r+0xf8>
 8004a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a9a:	b21b      	sxth	r3, r3
 8004a9c:	e01b      	b.n	8004ad6 <__sflush_r+0xf2>
 8004a9e:	690f      	ldr	r7, [r1, #16]
 8004aa0:	2f00      	cmp	r7, #0
 8004aa2:	d0f6      	beq.n	8004a92 <__sflush_r+0xae>
 8004aa4:	0793      	lsls	r3, r2, #30
 8004aa6:	680e      	ldr	r6, [r1, #0]
 8004aa8:	bf08      	it	eq
 8004aaa:	694b      	ldreq	r3, [r1, #20]
 8004aac:	600f      	str	r7, [r1, #0]
 8004aae:	bf18      	it	ne
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	eba6 0807 	sub.w	r8, r6, r7
 8004ab6:	608b      	str	r3, [r1, #8]
 8004ab8:	f1b8 0f00 	cmp.w	r8, #0
 8004abc:	dde9      	ble.n	8004a92 <__sflush_r+0xae>
 8004abe:	6a21      	ldr	r1, [r4, #32]
 8004ac0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ac2:	4643      	mov	r3, r8
 8004ac4:	463a      	mov	r2, r7
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b0      	blx	r6
 8004aca:	2800      	cmp	r0, #0
 8004acc:	dc08      	bgt.n	8004ae0 <__sflush_r+0xfc>
 8004ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae0:	4407      	add	r7, r0
 8004ae2:	eba8 0800 	sub.w	r8, r8, r0
 8004ae6:	e7e7      	b.n	8004ab8 <__sflush_r+0xd4>
 8004ae8:	dfbffffe 	.word	0xdfbffffe

08004aec <_fflush_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	690b      	ldr	r3, [r1, #16]
 8004af0:	4605      	mov	r5, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b913      	cbnz	r3, 8004afc <_fflush_r+0x10>
 8004af6:	2500      	movs	r5, #0
 8004af8:	4628      	mov	r0, r5
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	b118      	cbz	r0, 8004b06 <_fflush_r+0x1a>
 8004afe:	6a03      	ldr	r3, [r0, #32]
 8004b00:	b90b      	cbnz	r3, 8004b06 <_fflush_r+0x1a>
 8004b02:	f7ff f8b1 	bl	8003c68 <__sinit>
 8004b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f3      	beq.n	8004af6 <_fflush_r+0xa>
 8004b0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b10:	07d0      	lsls	r0, r2, #31
 8004b12:	d404      	bmi.n	8004b1e <_fflush_r+0x32>
 8004b14:	0599      	lsls	r1, r3, #22
 8004b16:	d402      	bmi.n	8004b1e <_fflush_r+0x32>
 8004b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b1a:	f7ff fae0 	bl	80040de <__retarget_lock_acquire_recursive>
 8004b1e:	4628      	mov	r0, r5
 8004b20:	4621      	mov	r1, r4
 8004b22:	f7ff ff5f 	bl	80049e4 <__sflush_r>
 8004b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b28:	07da      	lsls	r2, r3, #31
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	d4e4      	bmi.n	8004af8 <_fflush_r+0xc>
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	059b      	lsls	r3, r3, #22
 8004b32:	d4e1      	bmi.n	8004af8 <_fflush_r+0xc>
 8004b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b36:	f7ff fad3 	bl	80040e0 <__retarget_lock_release_recursive>
 8004b3a:	e7dd      	b.n	8004af8 <_fflush_r+0xc>

08004b3c <__swhatbuf_r>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	460c      	mov	r4, r1
 8004b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b44:	2900      	cmp	r1, #0
 8004b46:	b096      	sub	sp, #88	@ 0x58
 8004b48:	4615      	mov	r5, r2
 8004b4a:	461e      	mov	r6, r3
 8004b4c:	da0d      	bge.n	8004b6a <__swhatbuf_r+0x2e>
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	bf14      	ite	ne
 8004b5a:	2340      	movne	r3, #64	@ 0x40
 8004b5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b60:	2000      	movs	r0, #0
 8004b62:	6031      	str	r1, [r6, #0]
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	b016      	add	sp, #88	@ 0x58
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
 8004b6a:	466a      	mov	r2, sp
 8004b6c:	f000 f862 	bl	8004c34 <_fstat_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	dbec      	blt.n	8004b4e <__swhatbuf_r+0x12>
 8004b74:	9901      	ldr	r1, [sp, #4]
 8004b76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b7e:	4259      	negs	r1, r3
 8004b80:	4159      	adcs	r1, r3
 8004b82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b86:	e7eb      	b.n	8004b60 <__swhatbuf_r+0x24>

08004b88 <__smakebuf_r>:
 8004b88:	898b      	ldrh	r3, [r1, #12]
 8004b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b8c:	079d      	lsls	r5, r3, #30
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	d507      	bpl.n	8004ba4 <__smakebuf_r+0x1c>
 8004b94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	b003      	add	sp, #12
 8004ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba4:	ab01      	add	r3, sp, #4
 8004ba6:	466a      	mov	r2, sp
 8004ba8:	f7ff ffc8 	bl	8004b3c <__swhatbuf_r>
 8004bac:	9f00      	ldr	r7, [sp, #0]
 8004bae:	4605      	mov	r5, r0
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7fe ff40 	bl	8003a38 <_malloc_r>
 8004bb8:	b948      	cbnz	r0, 8004bce <__smakebuf_r+0x46>
 8004bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbe:	059a      	lsls	r2, r3, #22
 8004bc0:	d4ee      	bmi.n	8004ba0 <__smakebuf_r+0x18>
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	f043 0302 	orr.w	r3, r3, #2
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	e7e2      	b.n	8004b94 <__smakebuf_r+0xc>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	6020      	str	r0, [r4, #0]
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bde:	b15b      	cbz	r3, 8004bf8 <__smakebuf_r+0x70>
 8004be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 f837 	bl	8004c58 <_isatty_r>
 8004bea:	b128      	cbz	r0, 8004bf8 <__smakebuf_r+0x70>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	431d      	orrs	r5, r3
 8004bfc:	81a5      	strh	r5, [r4, #12]
 8004bfe:	e7cf      	b.n	8004ba0 <__smakebuf_r+0x18>

08004c00 <memmove>:
 8004c00:	4288      	cmp	r0, r1
 8004c02:	b510      	push	{r4, lr}
 8004c04:	eb01 0402 	add.w	r4, r1, r2
 8004c08:	d902      	bls.n	8004c10 <memmove+0x10>
 8004c0a:	4284      	cmp	r4, r0
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	d807      	bhi.n	8004c20 <memmove+0x20>
 8004c10:	1e43      	subs	r3, r0, #1
 8004c12:	42a1      	cmp	r1, r4
 8004c14:	d008      	beq.n	8004c28 <memmove+0x28>
 8004c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c1e:	e7f8      	b.n	8004c12 <memmove+0x12>
 8004c20:	4402      	add	r2, r0
 8004c22:	4601      	mov	r1, r0
 8004c24:	428a      	cmp	r2, r1
 8004c26:	d100      	bne.n	8004c2a <memmove+0x2a>
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c32:	e7f7      	b.n	8004c24 <memmove+0x24>

08004c34 <_fstat_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d07      	ldr	r5, [pc, #28]	@ (8004c54 <_fstat_r+0x20>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	f7fc fe21 	bl	8001888 <_fstat>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d102      	bne.n	8004c50 <_fstat_r+0x1c>
 8004c4a:	682b      	ldr	r3, [r5, #0]
 8004c4c:	b103      	cbz	r3, 8004c50 <_fstat_r+0x1c>
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
 8004c52:	bf00      	nop
 8004c54:	20000490 	.word	0x20000490

08004c58 <_isatty_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d06      	ldr	r5, [pc, #24]	@ (8004c74 <_isatty_r+0x1c>)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fc fe20 	bl	80018a8 <_isatty>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_isatty_r+0x1a>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_isatty_r+0x1a>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	20000490 	.word	0x20000490

08004c78 <_realloc_r>:
 8004c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	4615      	mov	r5, r2
 8004c80:	460c      	mov	r4, r1
 8004c82:	b921      	cbnz	r1, 8004c8e <_realloc_r+0x16>
 8004c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c88:	4611      	mov	r1, r2
 8004c8a:	f7fe bed5 	b.w	8003a38 <_malloc_r>
 8004c8e:	b92a      	cbnz	r2, 8004c9c <_realloc_r+0x24>
 8004c90:	f7ff fa36 	bl	8004100 <_free_r>
 8004c94:	2400      	movs	r4, #0
 8004c96:	4620      	mov	r0, r4
 8004c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c9c:	f000 f81a 	bl	8004cd4 <_malloc_usable_size_r>
 8004ca0:	4285      	cmp	r5, r0
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	d802      	bhi.n	8004cac <_realloc_r+0x34>
 8004ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004caa:	d8f4      	bhi.n	8004c96 <_realloc_r+0x1e>
 8004cac:	4629      	mov	r1, r5
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f7fe fec2 	bl	8003a38 <_malloc_r>
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d0ec      	beq.n	8004c94 <_realloc_r+0x1c>
 8004cba:	42b5      	cmp	r5, r6
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	bf28      	it	cs
 8004cc2:	4632      	movcs	r2, r6
 8004cc4:	f7ff fa0d 	bl	80040e2 <memcpy>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f7ff fa18 	bl	8004100 <_free_r>
 8004cd0:	463c      	mov	r4, r7
 8004cd2:	e7e0      	b.n	8004c96 <_realloc_r+0x1e>

08004cd4 <_malloc_usable_size_r>:
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f18      	subs	r0, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfbc      	itt	lt
 8004cde:	580b      	ldrlt	r3, [r1, r0]
 8004ce0:	18c0      	addlt	r0, r0, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
